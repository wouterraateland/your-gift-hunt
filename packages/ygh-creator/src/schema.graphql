# source: https://hunt-api-e7bdecad20.herokuapp.com/hunt-api/dev
# timestamp: Mon Apr 01 2019 12:05:47 GMT+0200 (Midden-Europese zomertijd)

enum AccessType {
  NONE
  CODE
}

type Action implements Node {
  id: ID!
  createdAt: DateTime!
  type: ActionType!
  payload: ActionPayload!
  gamePlay: GamePlay!
}

"""A connection to a list of items."""
type ActionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionEdge]!
  aggregate: AggregateAction!
}

input ActionCreateInput {
  type: ActionType!
  payload: ActionPayloadCreateOneWithoutActionInput!
  gamePlay: GamePlayCreateOneWithoutActionsInput!
}

input ActionCreateManyWithoutGamePlayInput {
  create: [ActionCreateWithoutGamePlayInput!]
  connect: [ActionWhereUniqueInput!]
}

input ActionCreateOneWithoutPayloadInput {
  create: ActionCreateWithoutPayloadInput
  connect: ActionWhereUniqueInput
}

input ActionCreateWithoutGamePlayInput {
  type: ActionType!
  payload: ActionPayloadCreateOneWithoutActionInput!
}

input ActionCreateWithoutPayloadInput {
  type: ActionType!
  gamePlay: GamePlayCreateOneWithoutActionsInput!
}

"""An edge in a connection."""
type ActionEdge {
  """The item at the end of the edge."""
  node: Action!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ActionPayload implements Node {
  id: ID!
  source: State
  destination: State
  inputValues(where: ActionPayloadInputValueWhereInput, orderBy: ActionPayloadInputValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionPayloadInputValue!]
  action: Action
}

"""A connection to a list of items."""
type ActionPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPayloadEdge]!
  aggregate: AggregateActionPayload!
}

input ActionPayloadCreateInput {
  source: StateCreateOneInput
  destination: StateCreateOneInput
  inputValues: ActionPayloadInputValueCreateManyInput
  action: ActionCreateOneWithoutPayloadInput
}

input ActionPayloadCreateOneWithoutActionInput {
  create: ActionPayloadCreateWithoutActionInput
  connect: ActionPayloadWhereUniqueInput
}

input ActionPayloadCreateWithoutActionInput {
  source: StateCreateOneInput
  destination: StateCreateOneInput
  inputValues: ActionPayloadInputValueCreateManyInput
}

"""An edge in a connection."""
type ActionPayloadEdge {
  """The item at the end of the edge."""
  node: ActionPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

type ActionPayloadInputValue implements Node {
  id: ID!
  key: String!
  value: String
}

"""A connection to a list of items."""
type ActionPayloadInputValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPayloadInputValueEdge]!
  aggregate: AggregateActionPayloadInputValue!
}

input ActionPayloadInputValueCreateInput {
  key: String!
  value: String
}

input ActionPayloadInputValueCreateManyInput {
  create: [ActionPayloadInputValueCreateInput!]
  connect: [ActionPayloadInputValueWhereUniqueInput!]
}

"""An edge in a connection."""
type ActionPayloadInputValueEdge {
  """The item at the end of the edge."""
  node: ActionPayloadInputValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionPayloadInputValueOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionPayloadInputValuePreviousValues {
  id: ID!
  key: String!
  value: String
}

input ActionPayloadInputValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadInputValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadInputValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadInputValueScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type ActionPayloadInputValueSubscriptionPayload {
  mutation: MutationType!
  node: ActionPayloadInputValue
  updatedFields: [String!]
  previousValues: ActionPayloadInputValuePreviousValues
}

input ActionPayloadInputValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadInputValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadInputValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadInputValueSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionPayloadInputValueWhereInput
}

input ActionPayloadInputValueUpdateDataInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateManyDataInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateManyInput {
  create: [ActionPayloadInputValueCreateInput!]
  connect: [ActionPayloadInputValueWhereUniqueInput!]
  disconnect: [ActionPayloadInputValueWhereUniqueInput!]
  delete: [ActionPayloadInputValueWhereUniqueInput!]
  update: [ActionPayloadInputValueUpdateWithWhereUniqueNestedInput!]
  updateMany: [ActionPayloadInputValueUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionPayloadInputValueScalarWhereInput!]
  upsert: [ActionPayloadInputValueUpsertWithWhereUniqueNestedInput!]
}

input ActionPayloadInputValueUpdateManyMutationInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateManyWithWhereNestedInput {
  where: ActionPayloadInputValueScalarWhereInput!
  data: ActionPayloadInputValueUpdateManyDataInput!
}

input ActionPayloadInputValueUpdateWithWhereUniqueNestedInput {
  where: ActionPayloadInputValueWhereUniqueInput!
  data: ActionPayloadInputValueUpdateDataInput!
}

input ActionPayloadInputValueUpsertWithWhereUniqueNestedInput {
  where: ActionPayloadInputValueWhereUniqueInput!
  update: ActionPayloadInputValueUpdateDataInput!
  create: ActionPayloadInputValueCreateInput!
}

input ActionPayloadInputValueWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadInputValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadInputValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadInputValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

input ActionPayloadInputValueWhereUniqueInput {
  id: ID
}

enum ActionPayloadOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionPayloadPreviousValues {
  id: ID!
}

type ActionPayloadSubscriptionPayload {
  mutation: MutationType!
  node: ActionPayload
  updatedFields: [String!]
  previousValues: ActionPayloadPreviousValues
}

input ActionPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionPayloadWhereInput
}

input ActionPayloadUpdateInput {
  source: StateUpdateOneInput
  destination: StateUpdateOneInput
  inputValues: ActionPayloadInputValueUpdateManyInput
  action: ActionUpdateOneWithoutPayloadInput
}

input ActionPayloadUpdateOneRequiredWithoutActionInput {
  create: ActionPayloadCreateWithoutActionInput
  connect: ActionPayloadWhereUniqueInput
  update: ActionPayloadUpdateWithoutActionDataInput
  upsert: ActionPayloadUpsertWithoutActionInput
}

input ActionPayloadUpdateWithoutActionDataInput {
  source: StateUpdateOneInput
  destination: StateUpdateOneInput
  inputValues: ActionPayloadInputValueUpdateManyInput
}

input ActionPayloadUpsertWithoutActionInput {
  update: ActionPayloadUpdateWithoutActionDataInput!
  create: ActionPayloadCreateWithoutActionInput!
}

input ActionPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  source: StateWhereInput
  destination: StateWhereInput
  inputValues_every: ActionPayloadInputValueWhereInput
  inputValues_some: ActionPayloadInputValueWhereInput
  inputValues_none: ActionPayloadInputValueWhereInput
  action: ActionWhereInput
}

input ActionPayloadWhereUniqueInput {
  id: ID
}

type ActionPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: ActionType!
}

type ActionRequirement implements Node {
  id: ID!
  template: ActionRequirementTemplate
  name: String
  description: String
  type: ActionType!
  hints(where: HintWhereInput, orderBy: HintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hint!]
  payload: PayloadRequirement
  stateTransition: StateTransition!
}

"""A connection to a list of items."""
type ActionRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionRequirementEdge]!
  aggregate: AggregateActionRequirement!
}

input ActionRequirementCreateInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  hints: HintCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementCreateManyWithoutStateTransitionInput {
  create: [ActionRequirementCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementWhereUniqueInput!]
}

input ActionRequirementCreateOneWithoutHintsInput {
  create: ActionRequirementCreateWithoutHintsInput
  connect: ActionRequirementWhereUniqueInput
}

input ActionRequirementCreateOneWithoutPayloadInput {
  create: ActionRequirementCreateWithoutPayloadInput
  connect: ActionRequirementWhereUniqueInput
}

input ActionRequirementCreateWithoutHintsInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  payload: PayloadRequirementCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementCreateWithoutPayloadInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  hints: HintCreateManyWithoutActionRequirementInput
  stateTransition: StateTransitionCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementCreateWithoutStateTransitionInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  hints: HintCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementCreateOneWithoutActionRequirementInput
}

"""An edge in a connection."""
type ActionRequirementEdge {
  """The item at the end of the edge."""
  node: ActionRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionRequirementOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionRequirementPreviousValues {
  id: ID!
  name: String
  description: String
  type: ActionType!
}

input ActionRequirementScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
}

type ActionRequirementSubscriptionPayload {
  mutation: MutationType!
  node: ActionRequirement
  updatedFields: [String!]
  previousValues: ActionRequirementPreviousValues
}

input ActionRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionRequirementWhereInput
}

type ActionRequirementTemplate implements Node {
  id: ID!
  name: String
  description: String
  type: ActionType!
  hints(where: HintTemplateWhereInput, orderBy: HintTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HintTemplate!]
  payload: PayloadRequirementTemplate
  stateTransition: StateTransitionTemplate!
}

"""A connection to a list of items."""
type ActionRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionRequirementTemplateEdge]!
  aggregate: AggregateActionRequirementTemplate!
}

input ActionRequirementTemplateCreateInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementTemplateCreateManyWithoutStateTransitionInput {
  create: [ActionRequirementTemplateCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementTemplateWhereUniqueInput!]
}

input ActionRequirementTemplateCreateOneInput {
  create: ActionRequirementTemplateCreateInput
  connect: ActionRequirementTemplateWhereUniqueInput
}

input ActionRequirementTemplateCreateOneWithoutHintsInput {
  create: ActionRequirementTemplateCreateWithoutHintsInput
  connect: ActionRequirementTemplateWhereUniqueInput
}

input ActionRequirementTemplateCreateOneWithoutPayloadInput {
  create: ActionRequirementTemplateCreateWithoutPayloadInput
  connect: ActionRequirementTemplateWhereUniqueInput
}

input ActionRequirementTemplateCreateWithoutHintsInput {
  name: String
  description: String
  type: ActionType
  payload: PayloadRequirementTemplateCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementTemplateCreateWithoutPayloadInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateCreateManyWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementTemplateCreateWithoutStateTransitionInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateCreateOneWithoutActionRequirementInput
}

"""An edge in a connection."""
type ActionRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: ActionRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionRequirementTemplatePreviousValues {
  id: ID!
  name: String
  description: String
  type: ActionType!
}

input ActionRequirementTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
}

type ActionRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: ActionRequirementTemplate
  updatedFields: [String!]
  previousValues: ActionRequirementTemplatePreviousValues
}

input ActionRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionRequirementTemplateWhereInput
}

input ActionRequirementTemplateUpdateDataInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateManyDataInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementTemplateUpdateManyMutationInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementTemplateUpdateManyWithoutStateTransitionInput {
  create: [ActionRequirementTemplateCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementTemplateWhereUniqueInput!]
  disconnect: [ActionRequirementTemplateWhereUniqueInput!]
  delete: [ActionRequirementTemplateWhereUniqueInput!]
  update: [ActionRequirementTemplateUpdateWithWhereUniqueWithoutStateTransitionInput!]
  updateMany: [ActionRequirementTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionRequirementTemplateScalarWhereInput!]
  upsert: [ActionRequirementTemplateUpsertWithWhereUniqueWithoutStateTransitionInput!]
}

input ActionRequirementTemplateUpdateManyWithWhereNestedInput {
  where: ActionRequirementTemplateScalarWhereInput!
  data: ActionRequirementTemplateUpdateManyDataInput!
}

input ActionRequirementTemplateUpdateOneInput {
  create: ActionRequirementTemplateCreateInput
  connect: ActionRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionRequirementTemplateUpdateDataInput
  upsert: ActionRequirementTemplateUpsertNestedInput
}

input ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput {
  create: ActionRequirementTemplateCreateWithoutPayloadInput
  connect: ActionRequirementTemplateWhereUniqueInput
  update: ActionRequirementTemplateUpdateWithoutPayloadDataInput
  upsert: ActionRequirementTemplateUpsertWithoutPayloadInput
}

input ActionRequirementTemplateUpdateOneWithoutHintsInput {
  create: ActionRequirementTemplateCreateWithoutHintsInput
  connect: ActionRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionRequirementTemplateUpdateWithoutHintsDataInput
  upsert: ActionRequirementTemplateUpsertWithoutHintsInput
}

input ActionRequirementTemplateUpdateWithoutHintsDataInput {
  name: String
  description: String
  type: ActionType
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateWithoutPayloadDataInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateWithoutStateTransitionDataInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
}

input ActionRequirementTemplateUpdateWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementTemplateWhereUniqueInput!
  data: ActionRequirementTemplateUpdateWithoutStateTransitionDataInput!
}

input ActionRequirementTemplateUpsertNestedInput {
  update: ActionRequirementTemplateUpdateDataInput!
  create: ActionRequirementTemplateCreateInput!
}

input ActionRequirementTemplateUpsertWithoutHintsInput {
  update: ActionRequirementTemplateUpdateWithoutHintsDataInput!
  create: ActionRequirementTemplateCreateWithoutHintsInput!
}

input ActionRequirementTemplateUpsertWithoutPayloadInput {
  update: ActionRequirementTemplateUpdateWithoutPayloadDataInput!
  create: ActionRequirementTemplateCreateWithoutPayloadInput!
}

input ActionRequirementTemplateUpsertWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementTemplateWhereUniqueInput!
  update: ActionRequirementTemplateUpdateWithoutStateTransitionDataInput!
  create: ActionRequirementTemplateCreateWithoutStateTransitionInput!
}

input ActionRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
  hints_every: HintTemplateWhereInput
  hints_some: HintTemplateWhereInput
  hints_none: HintTemplateWhereInput
  payload: PayloadRequirementTemplateWhereInput
  stateTransition: StateTransitionTemplateWhereInput
}

input ActionRequirementTemplateWhereUniqueInput {
  id: ID
}

input ActionRequirementUpdateInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  hints: HintUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementUpdateManyDataInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementUpdateManyMutationInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementUpdateManyWithoutStateTransitionInput {
  create: [ActionRequirementCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementWhereUniqueInput!]
  disconnect: [ActionRequirementWhereUniqueInput!]
  delete: [ActionRequirementWhereUniqueInput!]
  update: [ActionRequirementUpdateWithWhereUniqueWithoutStateTransitionInput!]
  updateMany: [ActionRequirementUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionRequirementScalarWhereInput!]
  upsert: [ActionRequirementUpsertWithWhereUniqueWithoutStateTransitionInput!]
}

input ActionRequirementUpdateManyWithWhereNestedInput {
  where: ActionRequirementScalarWhereInput!
  data: ActionRequirementUpdateManyDataInput!
}

input ActionRequirementUpdateOneRequiredWithoutPayloadInput {
  create: ActionRequirementCreateWithoutPayloadInput
  connect: ActionRequirementWhereUniqueInput
  update: ActionRequirementUpdateWithoutPayloadDataInput
  upsert: ActionRequirementUpsertWithoutPayloadInput
}

input ActionRequirementUpdateOneWithoutHintsInput {
  create: ActionRequirementCreateWithoutHintsInput
  connect: ActionRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionRequirementUpdateWithoutHintsDataInput
  upsert: ActionRequirementUpsertWithoutHintsInput
}

input ActionRequirementUpdateWithoutHintsDataInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  payload: PayloadRequirementUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementUpdateWithoutPayloadDataInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  hints: HintUpdateManyWithoutActionRequirementInput
  stateTransition: StateTransitionUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementUpdateWithoutStateTransitionDataInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  hints: HintUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementUpdateOneWithoutActionRequirementInput
}

input ActionRequirementUpdateWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementWhereUniqueInput!
  data: ActionRequirementUpdateWithoutStateTransitionDataInput!
}

input ActionRequirementUpsertWithoutHintsInput {
  update: ActionRequirementUpdateWithoutHintsDataInput!
  create: ActionRequirementCreateWithoutHintsInput!
}

input ActionRequirementUpsertWithoutPayloadInput {
  update: ActionRequirementUpdateWithoutPayloadDataInput!
  create: ActionRequirementCreateWithoutPayloadInput!
}

input ActionRequirementUpsertWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementWhereUniqueInput!
  update: ActionRequirementUpdateWithoutStateTransitionDataInput!
  create: ActionRequirementCreateWithoutStateTransitionInput!
}

input ActionRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
  template: ActionRequirementTemplateWhereInput
  hints_every: HintWhereInput
  hints_some: HintWhereInput
  hints_none: HintWhereInput
  payload: PayloadRequirementWhereInput
  stateTransition: StateTransitionWhereInput
}

input ActionRequirementWhereUniqueInput {
  id: ID
}

input ActionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
}

type ActionSubscriptionPayload {
  mutation: MutationType!
  node: Action
  updatedFields: [String!]
  previousValues: ActionPreviousValues
}

input ActionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionWhereInput
}

enum ActionType {
  USE
  TARGET_OF_USE
  INPUT
  TRANSFORM
  TRIGGER
  UNLOCK
  IDENTIFY_HELPER
}

input ActionUpdateInput {
  type: ActionType
  payload: ActionPayloadUpdateOneRequiredWithoutActionInput
  gamePlay: GamePlayUpdateOneRequiredWithoutActionsInput
}

input ActionUpdateManyDataInput {
  type: ActionType
}

input ActionUpdateManyMutationInput {
  type: ActionType
}

input ActionUpdateManyWithoutGamePlayInput {
  create: [ActionCreateWithoutGamePlayInput!]
  connect: [ActionWhereUniqueInput!]
  disconnect: [ActionWhereUniqueInput!]
  delete: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutGamePlayInput!]
  updateMany: [ActionUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionScalarWhereInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutGamePlayInput!]
}

input ActionUpdateManyWithWhereNestedInput {
  where: ActionScalarWhereInput!
  data: ActionUpdateManyDataInput!
}

input ActionUpdateOneWithoutPayloadInput {
  create: ActionCreateWithoutPayloadInput
  connect: ActionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionUpdateWithoutPayloadDataInput
  upsert: ActionUpsertWithoutPayloadInput
}

input ActionUpdateWithoutGamePlayDataInput {
  type: ActionType
  payload: ActionPayloadUpdateOneRequiredWithoutActionInput
}

input ActionUpdateWithoutPayloadDataInput {
  type: ActionType
  gamePlay: GamePlayUpdateOneRequiredWithoutActionsInput
}

input ActionUpdateWithWhereUniqueWithoutGamePlayInput {
  where: ActionWhereUniqueInput!
  data: ActionUpdateWithoutGamePlayDataInput!
}

input ActionUpsertWithoutPayloadInput {
  update: ActionUpdateWithoutPayloadDataInput!
  create: ActionCreateWithoutPayloadInput!
}

input ActionUpsertWithWhereUniqueWithoutGamePlayInput {
  where: ActionWhereUniqueInput!
  update: ActionUpdateWithoutGamePlayDataInput!
  create: ActionCreateWithoutGamePlayInput!
}

input ActionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
  payload: ActionPayloadWhereInput
  gamePlay: GamePlayWhereInput
}

input ActionWhereUniqueInput {
  id: ID
}

type AggregateAction {
  count: Int!
}

type AggregateActionPayload {
  count: Int!
}

type AggregateActionPayloadInputValue {
  count: Int!
}

type AggregateActionRequirement {
  count: Int!
}

type AggregateActionRequirementTemplate {
  count: Int!
}

type AggregateEntity {
  count: Int!
}

type AggregateEntityRequirement {
  count: Int!
}

type AggregateEntityRequirementTemplate {
  count: Int!
}

type AggregateEntityTemplate {
  count: Int!
}

type AggregateField {
  count: Int!
}

type AggregateFieldTemplate {
  count: Int!
}

type AggregateFieldType {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateGamePlay {
  count: Int!
}

type AggregateHint {
  count: Int!
}

type AggregateHintTemplate {
  count: Int!
}

type AggregateInformationSlot {
  count: Int!
}

type AggregateInformationSlotTemplate {
  count: Int!
}

type AggregateInputRequirement {
  count: Int!
}

type AggregateInputRequirementTemplate {
  count: Int!
}

type AggregatePayloadRequirement {
  count: Int!
}

type AggregatePayloadRequirementTemplate {
  count: Int!
}

type AggregateState {
  count: Int!
}

type AggregateStateTemplate {
  count: Int!
}

type AggregateStateTransition {
  count: Int!
}

type AggregateStateTransitionTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum ComparatorType {
  EQUAL_TO
  GREATER_THEN
  LESS_THEN
  ELEMENT_OF
}

scalar DateTime

type Entity implements Node {
  id: ID!
  template: EntityTemplate
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Field!]
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
  informationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot!]
  featuredField: Field
  defaultState: State
  game: Game
}

"""A connection to a list of items."""
type EntityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityEdge]!
  aggregate: AggregateEntity!
}

input EntityCreateInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateManyWithoutGameInput {
  create: [EntityCreateWithoutGameInput!]
  connect: [EntityWhereUniqueInput!]
}

input EntityCreateOneWithoutFieldsInput {
  create: EntityCreateWithoutFieldsInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutInformationSlotsInput {
  create: EntityCreateWithoutInformationSlotsInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutStatesInput {
  create: EntityCreateWithoutStatesInput
  connect: EntityWhereUniqueInput
}

input EntityCreateWithoutFieldsInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateCreateOneInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutGameInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
}

input EntityCreateWithoutInformationSlotsInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutStatesInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

"""An edge in a connection."""
type EntityEdge {
  """The item at the end of the edge."""
  node: Entity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isTrigger_ASC
  isTrigger_DESC
  isItem_ASC
  isItem_DESC
  isObject_ASC
  isObject_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EntityPreviousValues {
  id: ID!
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
}

type EntityRequirement implements Node {
  id: ID!
  template: EntityRequirementTemplate
  entityState: State!
  payload: PayloadRequirement!
}

"""A connection to a list of items."""
type EntityRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityRequirementEdge]!
  aggregate: AggregateEntityRequirement!
}

input EntityRequirementCreateInput {
  template: EntityRequirementTemplateCreateOneInput
  entityState: StateCreateOneInput!
  payload: PayloadRequirementCreateOneWithoutRequiredEntityInput!
}

input EntityRequirementCreateOneWithoutPayloadInput {
  create: EntityRequirementCreateWithoutPayloadInput
  connect: EntityRequirementWhereUniqueInput
}

input EntityRequirementCreateWithoutPayloadInput {
  template: EntityRequirementTemplateCreateOneInput
  entityState: StateCreateOneInput!
}

"""An edge in a connection."""
type EntityRequirementEdge {
  """The item at the end of the edge."""
  node: EntityRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityRequirementOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EntityRequirementPreviousValues {
  id: ID!
}

type EntityRequirementSubscriptionPayload {
  mutation: MutationType!
  node: EntityRequirement
  updatedFields: [String!]
  previousValues: EntityRequirementPreviousValues
}

input EntityRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityRequirementWhereInput
}

type EntityRequirementTemplate implements Node {
  id: ID!
  entityState: StateTemplate!
  payload: PayloadRequirementTemplate!
}

"""A connection to a list of items."""
type EntityRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityRequirementTemplateEdge]!
  aggregate: AggregateEntityRequirementTemplate!
}

input EntityRequirementTemplateCreateInput {
  entityState: StateTemplateCreateOneInput!
  payload: PayloadRequirementTemplateCreateOneWithoutRequiredEntityInput!
}

input EntityRequirementTemplateCreateOneInput {
  create: EntityRequirementTemplateCreateInput
  connect: EntityRequirementTemplateWhereUniqueInput
}

input EntityRequirementTemplateCreateOneWithoutPayloadInput {
  create: EntityRequirementTemplateCreateWithoutPayloadInput
  connect: EntityRequirementTemplateWhereUniqueInput
}

input EntityRequirementTemplateCreateWithoutPayloadInput {
  entityState: StateTemplateCreateOneInput!
}

"""An edge in a connection."""
type EntityRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: EntityRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EntityRequirementTemplatePreviousValues {
  id: ID!
}

type EntityRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: EntityRequirementTemplate
  updatedFields: [String!]
  previousValues: EntityRequirementTemplatePreviousValues
}

input EntityRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityRequirementTemplateWhereInput
}

input EntityRequirementTemplateUpdateDataInput {
  entityState: StateTemplateUpdateOneRequiredInput
  payload: PayloadRequirementTemplateUpdateOneRequiredWithoutRequiredEntityInput
}

input EntityRequirementTemplateUpdateInput {
  entityState: StateTemplateUpdateOneRequiredInput
  payload: PayloadRequirementTemplateUpdateOneRequiredWithoutRequiredEntityInput
}

input EntityRequirementTemplateUpdateOneInput {
  create: EntityRequirementTemplateCreateInput
  connect: EntityRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityRequirementTemplateUpdateDataInput
  upsert: EntityRequirementTemplateUpsertNestedInput
}

input EntityRequirementTemplateUpdateOneWithoutPayloadInput {
  create: EntityRequirementTemplateCreateWithoutPayloadInput
  connect: EntityRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityRequirementTemplateUpdateWithoutPayloadDataInput
  upsert: EntityRequirementTemplateUpsertWithoutPayloadInput
}

input EntityRequirementTemplateUpdateWithoutPayloadDataInput {
  entityState: StateTemplateUpdateOneRequiredInput
}

input EntityRequirementTemplateUpsertNestedInput {
  update: EntityRequirementTemplateUpdateDataInput!
  create: EntityRequirementTemplateCreateInput!
}

input EntityRequirementTemplateUpsertWithoutPayloadInput {
  update: EntityRequirementTemplateUpdateWithoutPayloadDataInput!
  create: EntityRequirementTemplateCreateWithoutPayloadInput!
}

input EntityRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  entityState: StateTemplateWhereInput
  payload: PayloadRequirementTemplateWhereInput
}

input EntityRequirementTemplateWhereUniqueInput {
  id: ID
}

input EntityRequirementUpdateInput {
  template: EntityRequirementTemplateUpdateOneInput
  entityState: StateUpdateOneRequiredInput
  payload: PayloadRequirementUpdateOneRequiredWithoutRequiredEntityInput
}

input EntityRequirementUpdateOneWithoutPayloadInput {
  create: EntityRequirementCreateWithoutPayloadInput
  connect: EntityRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityRequirementUpdateWithoutPayloadDataInput
  upsert: EntityRequirementUpsertWithoutPayloadInput
}

input EntityRequirementUpdateWithoutPayloadDataInput {
  template: EntityRequirementTemplateUpdateOneInput
  entityState: StateUpdateOneRequiredInput
}

input EntityRequirementUpsertWithoutPayloadInput {
  update: EntityRequirementUpdateWithoutPayloadDataInput!
  create: EntityRequirementCreateWithoutPayloadInput!
}

input EntityRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  template: EntityRequirementTemplateWhereInput
  entityState: StateWhereInput
  payload: PayloadRequirementWhereInput
}

input EntityRequirementWhereUniqueInput {
  id: ID
}

input EntityScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
}

type EntitySubscriptionPayload {
  mutation: MutationType!
  node: Entity
  updatedFields: [String!]
  previousValues: EntityPreviousValues
}

input EntitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntitySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityWhereInput
}

type EntityTemplate implements Node {
  id: ID!
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
  fields(where: FieldTemplateWhereInput, orderBy: FieldTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldTemplate!]
  states(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate!]
  informationSlots(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlotTemplate!]
  featuredField: FieldTemplate
  defaultState: StateTemplate
}

"""A connection to a list of items."""
type EntityTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityTemplateEdge]!
  aggregate: AggregateEntityTemplate!
}

input EntityTemplateCreateInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
}

input EntityTemplateCreateOneInput {
  create: EntityTemplateCreateInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutFieldsInput {
  create: EntityTemplateCreateWithoutFieldsInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutInformationSlotsInput {
  create: EntityTemplateCreateWithoutInformationSlotsInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutStatesInput {
  create: EntityTemplateCreateWithoutStatesInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateWithoutFieldsInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
}

input EntityTemplateCreateWithoutInformationSlotsInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
}

input EntityTemplateCreateWithoutStatesInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
}

"""An edge in a connection."""
type EntityTemplateEdge {
  """The item at the end of the edge."""
  node: EntityTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isTrigger_ASC
  isTrigger_DESC
  isItem_ASC
  isItem_DESC
  isObject_ASC
  isObject_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EntityTemplatePreviousValues {
  id: ID!
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
}

type EntityTemplateSubscriptionPayload {
  mutation: MutationType!
  node: EntityTemplate
  updatedFields: [String!]
  previousValues: EntityTemplatePreviousValues
}

input EntityTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityTemplateWhereInput
}

input EntityTemplateUpdateDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
}

input EntityTemplateUpdateInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
}

input EntityTemplateUpdateManyMutationInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
}

input EntityTemplateUpdateOneInput {
  create: EntityTemplateCreateInput
  connect: EntityTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityTemplateUpdateDataInput
  upsert: EntityTemplateUpsertNestedInput
}

input EntityTemplateUpdateOneRequiredWithoutFieldsInput {
  create: EntityTemplateCreateWithoutFieldsInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutFieldsDataInput
  upsert: EntityTemplateUpsertWithoutFieldsInput
}

input EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput {
  create: EntityTemplateCreateWithoutInformationSlotsInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutInformationSlotsDataInput
  upsert: EntityTemplateUpsertWithoutInformationSlotsInput
}

input EntityTemplateUpdateOneRequiredWithoutStatesInput {
  create: EntityTemplateCreateWithoutStatesInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutStatesDataInput
  upsert: EntityTemplateUpsertWithoutStatesInput
}

input EntityTemplateUpdateWithoutFieldsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
}

input EntityTemplateUpdateWithoutInformationSlotsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
}

input EntityTemplateUpdateWithoutStatesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
}

input EntityTemplateUpsertNestedInput {
  update: EntityTemplateUpdateDataInput!
  create: EntityTemplateCreateInput!
}

input EntityTemplateUpsertWithoutFieldsInput {
  update: EntityTemplateUpdateWithoutFieldsDataInput!
  create: EntityTemplateCreateWithoutFieldsInput!
}

input EntityTemplateUpsertWithoutInformationSlotsInput {
  update: EntityTemplateUpdateWithoutInformationSlotsDataInput!
  create: EntityTemplateCreateWithoutInformationSlotsInput!
}

input EntityTemplateUpsertWithoutStatesInput {
  update: EntityTemplateUpdateWithoutStatesDataInput!
  create: EntityTemplateCreateWithoutStatesInput!
}

input EntityTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
  fields_every: FieldTemplateWhereInput
  fields_some: FieldTemplateWhereInput
  fields_none: FieldTemplateWhereInput
  states_every: StateTemplateWhereInput
  states_some: StateTemplateWhereInput
  states_none: StateTemplateWhereInput
  informationSlots_every: InformationSlotTemplateWhereInput
  informationSlots_some: InformationSlotTemplateWhereInput
  informationSlots_none: InformationSlotTemplateWhereInput
  featuredField: FieldTemplateWhereInput
  defaultState: StateTemplateWhereInput
}

input EntityTemplateWhereUniqueInput {
  id: ID
}

input EntityUpdateInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateManyDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
}

input EntityUpdateManyMutationInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
}

input EntityUpdateManyWithoutGameInput {
  create: [EntityCreateWithoutGameInput!]
  connect: [EntityWhereUniqueInput!]
  disconnect: [EntityWhereUniqueInput!]
  delete: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutGameInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityScalarWhereInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutGameInput!]
}

input EntityUpdateManyWithWhereNestedInput {
  where: EntityScalarWhereInput!
  data: EntityUpdateManyDataInput!
}

input EntityUpdateOneRequiredWithoutFieldsInput {
  create: EntityCreateWithoutFieldsInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutFieldsDataInput
  upsert: EntityUpsertWithoutFieldsInput
}

input EntityUpdateOneRequiredWithoutInformationSlotsInput {
  create: EntityCreateWithoutInformationSlotsInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutInformationSlotsDataInput
  upsert: EntityUpsertWithoutInformationSlotsInput
}

input EntityUpdateOneRequiredWithoutStatesInput {
  create: EntityCreateWithoutStatesInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutStatesDataInput
  upsert: EntityUpsertWithoutStatesInput
}

input EntityUpdateWithoutFieldsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateUpdateOneInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutGameDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
}

input EntityUpdateWithoutInformationSlotsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutStatesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithWhereUniqueWithoutGameInput {
  where: EntityWhereUniqueInput!
  data: EntityUpdateWithoutGameDataInput!
}

input EntityUpsertWithoutFieldsInput {
  update: EntityUpdateWithoutFieldsDataInput!
  create: EntityCreateWithoutFieldsInput!
}

input EntityUpsertWithoutInformationSlotsInput {
  update: EntityUpdateWithoutInformationSlotsDataInput!
  create: EntityCreateWithoutInformationSlotsInput!
}

input EntityUpsertWithoutStatesInput {
  update: EntityUpdateWithoutStatesDataInput!
  create: EntityCreateWithoutStatesInput!
}

input EntityUpsertWithWhereUniqueWithoutGameInput {
  where: EntityWhereUniqueInput!
  update: EntityUpdateWithoutGameDataInput!
  create: EntityCreateWithoutGameInput!
}

input EntityWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
  template: EntityTemplateWhereInput
  fields_every: FieldWhereInput
  fields_some: FieldWhereInput
  fields_none: FieldWhereInput
  states_every: StateWhereInput
  states_some: StateWhereInput
  states_none: StateWhereInput
  informationSlots_every: InformationSlotWhereInput
  informationSlots_some: InformationSlotWhereInput
  informationSlots_none: InformationSlotWhereInput
  featuredField: FieldWhereInput
  defaultState: StateWhereInput
  game: GameWhereInput
}

input EntityWhereUniqueInput {
  id: ID
}

type Field implements Node {
  id: ID!
  template: FieldTemplate
  name: String
  description: String
  type: FieldType!
  isSecret: Boolean!
  value: String
  entity: Entity!
  informationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot!]
}

"""A connection to a list of items."""
type FieldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldEdge]!
  aggregate: AggregateField!
}

input FieldCreateInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateCreateOneInput
  type: FieldTypeCreateOneInput!
  entity: EntityCreateOneWithoutFieldsInput!
  informationSlots: InformationSlotCreateManyWithoutFieldInput
}

input FieldCreateManyWithoutEntityInput {
  create: [FieldCreateWithoutEntityInput!]
  connect: [FieldWhereUniqueInput!]
}

input FieldCreateOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
}

input FieldCreateOneWithoutInformationSlotsInput {
  create: FieldCreateWithoutInformationSlotsInput
  connect: FieldWhereUniqueInput
}

input FieldCreateWithoutEntityInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateCreateOneInput
  type: FieldTypeCreateOneInput!
  informationSlots: InformationSlotCreateManyWithoutFieldInput
}

input FieldCreateWithoutInformationSlotsInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateCreateOneInput
  type: FieldTypeCreateOneInput!
  entity: EntityCreateOneWithoutFieldsInput!
}

"""An edge in a connection."""
type FieldEdge {
  """The item at the end of the edge."""
  node: Field!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isSecret_ASC
  isSecret_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FieldPreviousValues {
  id: ID!
  name: String
  description: String
  isSecret: Boolean!
  value: String
}

input FieldScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type FieldSubscriptionPayload {
  mutation: MutationType!
  node: Field
  updatedFields: [String!]
  previousValues: FieldPreviousValues
}

input FieldSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldWhereInput
}

type FieldTemplate implements Node {
  id: ID!
  name: String
  description: String
  type: FieldType!
  isSecret: Boolean!
  entity: EntityTemplate!
}

"""A connection to a list of items."""
type FieldTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldTemplateEdge]!
  aggregate: AggregateFieldTemplate!
}

input FieldTemplateCreateInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeCreateOneInput!
  entity: EntityTemplateCreateOneWithoutFieldsInput!
}

input FieldTemplateCreateManyWithoutEntityInput {
  create: [FieldTemplateCreateWithoutEntityInput!]
  connect: [FieldTemplateWhereUniqueInput!]
}

input FieldTemplateCreateOneInput {
  create: FieldTemplateCreateInput
  connect: FieldTemplateWhereUniqueInput
}

input FieldTemplateCreateWithoutEntityInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeCreateOneInput!
}

"""An edge in a connection."""
type FieldTemplateEdge {
  """The item at the end of the edge."""
  node: FieldTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isSecret_ASC
  isSecret_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FieldTemplatePreviousValues {
  id: ID!
  name: String
  description: String
  isSecret: Boolean!
}

input FieldTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
}

type FieldTemplateSubscriptionPayload {
  mutation: MutationType!
  node: FieldTemplate
  updatedFields: [String!]
  previousValues: FieldTemplatePreviousValues
}

input FieldTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldTemplateWhereInput
}

input FieldTemplateUpdateDataInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityTemplateUpdateOneRequiredWithoutFieldsInput
}

input FieldTemplateUpdateInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityTemplateUpdateOneRequiredWithoutFieldsInput
}

input FieldTemplateUpdateManyDataInput {
  name: String
  description: String
  isSecret: Boolean
}

input FieldTemplateUpdateManyMutationInput {
  name: String
  description: String
  isSecret: Boolean
}

input FieldTemplateUpdateManyWithoutEntityInput {
  create: [FieldTemplateCreateWithoutEntityInput!]
  connect: [FieldTemplateWhereUniqueInput!]
  disconnect: [FieldTemplateWhereUniqueInput!]
  delete: [FieldTemplateWhereUniqueInput!]
  update: [FieldTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [FieldTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [FieldTemplateScalarWhereInput!]
  upsert: [FieldTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input FieldTemplateUpdateManyWithWhereNestedInput {
  where: FieldTemplateScalarWhereInput!
  data: FieldTemplateUpdateManyDataInput!
}

input FieldTemplateUpdateOneInput {
  create: FieldTemplateCreateInput
  connect: FieldTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldTemplateUpdateDataInput
  upsert: FieldTemplateUpsertNestedInput
}

input FieldTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeUpdateOneRequiredInput
}

input FieldTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: FieldTemplateWhereUniqueInput!
  data: FieldTemplateUpdateWithoutEntityDataInput!
}

input FieldTemplateUpsertNestedInput {
  update: FieldTemplateUpdateDataInput!
  create: FieldTemplateCreateInput!
}

input FieldTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: FieldTemplateWhereUniqueInput!
  update: FieldTemplateUpdateWithoutEntityDataInput!
  create: FieldTemplateCreateWithoutEntityInput!
}

input FieldTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
  type: FieldTypeWhereInput
  entity: EntityTemplateWhereInput
}

input FieldTemplateWhereUniqueInput {
  id: ID
}

type FieldType implements Node {
  id: ID!
  type: ValueType!
  isMulti: Boolean!
}

"""A connection to a list of items."""
type FieldTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldTypeEdge]!
  aggregate: AggregateFieldType!
}

input FieldTypeCreateInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeCreateManyInput {
  create: [FieldTypeCreateInput!]
  connect: [FieldTypeWhereUniqueInput!]
}

input FieldTypeCreateOneInput {
  create: FieldTypeCreateInput
  connect: FieldTypeWhereUniqueInput
}

"""An edge in a connection."""
type FieldTypeEdge {
  """The item at the end of the edge."""
  node: FieldType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldTypeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  isMulti_ASC
  isMulti_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FieldTypePreviousValues {
  id: ID!
  type: ValueType!
  isMulti: Boolean!
}

input FieldTypeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTypeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTypeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTypeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: ValueType

  """All values that are not equal to given value."""
  type_not: ValueType

  """All values that are contained in given list."""
  type_in: [ValueType!]

  """All values that are not contained in given list."""
  type_not_in: [ValueType!]
  isMulti: Boolean

  """All values that are not equal to given value."""
  isMulti_not: Boolean
}

type FieldTypeSubscriptionPayload {
  mutation: MutationType!
  node: FieldType
  updatedFields: [String!]
  previousValues: FieldTypePreviousValues
}

input FieldTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTypeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldTypeWhereInput
}

input FieldTypeUpdateDataInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateManyDataInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateManyInput {
  create: [FieldTypeCreateInput!]
  connect: [FieldTypeWhereUniqueInput!]
  disconnect: [FieldTypeWhereUniqueInput!]
  delete: [FieldTypeWhereUniqueInput!]
  update: [FieldTypeUpdateWithWhereUniqueNestedInput!]
  updateMany: [FieldTypeUpdateManyWithWhereNestedInput!]
  deleteMany: [FieldTypeScalarWhereInput!]
  upsert: [FieldTypeUpsertWithWhereUniqueNestedInput!]
}

input FieldTypeUpdateManyMutationInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateManyWithWhereNestedInput {
  where: FieldTypeScalarWhereInput!
  data: FieldTypeUpdateManyDataInput!
}

input FieldTypeUpdateOneRequiredInput {
  create: FieldTypeCreateInput
  connect: FieldTypeWhereUniqueInput
  update: FieldTypeUpdateDataInput
  upsert: FieldTypeUpsertNestedInput
}

input FieldTypeUpdateWithWhereUniqueNestedInput {
  where: FieldTypeWhereUniqueInput!
  data: FieldTypeUpdateDataInput!
}

input FieldTypeUpsertNestedInput {
  update: FieldTypeUpdateDataInput!
  create: FieldTypeCreateInput!
}

input FieldTypeUpsertWithWhereUniqueNestedInput {
  where: FieldTypeWhereUniqueInput!
  update: FieldTypeUpdateDataInput!
  create: FieldTypeCreateInput!
}

input FieldTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: ValueType

  """All values that are not equal to given value."""
  type_not: ValueType

  """All values that are contained in given list."""
  type_in: [ValueType!]

  """All values that are not contained in given list."""
  type_not_in: [ValueType!]
  isMulti: Boolean

  """All values that are not equal to given value."""
  isMulti_not: Boolean
}

input FieldTypeWhereUniqueInput {
  id: ID
}

input FieldUpdateDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityUpdateOneRequiredWithoutFieldsInput
  informationSlots: InformationSlotUpdateManyWithoutFieldInput
}

input FieldUpdateInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityUpdateOneRequiredWithoutFieldsInput
  informationSlots: InformationSlotUpdateManyWithoutFieldInput
}

input FieldUpdateManyDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
}

input FieldUpdateManyMutationInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
}

input FieldUpdateManyWithoutEntityInput {
  create: [FieldCreateWithoutEntityInput!]
  connect: [FieldWhereUniqueInput!]
  disconnect: [FieldWhereUniqueInput!]
  delete: [FieldWhereUniqueInput!]
  update: [FieldUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [FieldUpdateManyWithWhereNestedInput!]
  deleteMany: [FieldScalarWhereInput!]
  upsert: [FieldUpsertWithWhereUniqueWithoutEntityInput!]
}

input FieldUpdateManyWithWhereNestedInput {
  where: FieldScalarWhereInput!
  data: FieldUpdateManyDataInput!
}

input FieldUpdateOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldUpdateDataInput
  upsert: FieldUpsertNestedInput
}

input FieldUpdateOneWithoutInformationSlotsInput {
  create: FieldCreateWithoutInformationSlotsInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldUpdateWithoutInformationSlotsDataInput
  upsert: FieldUpsertWithoutInformationSlotsInput
}

input FieldUpdateWithoutEntityDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  informationSlots: InformationSlotUpdateManyWithoutFieldInput
}

input FieldUpdateWithoutInformationSlotsDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityUpdateOneRequiredWithoutFieldsInput
}

input FieldUpdateWithWhereUniqueWithoutEntityInput {
  where: FieldWhereUniqueInput!
  data: FieldUpdateWithoutEntityDataInput!
}

input FieldUpsertNestedInput {
  update: FieldUpdateDataInput!
  create: FieldCreateInput!
}

input FieldUpsertWithoutInformationSlotsInput {
  update: FieldUpdateWithoutInformationSlotsDataInput!
  create: FieldCreateWithoutInformationSlotsInput!
}

input FieldUpsertWithWhereUniqueWithoutEntityInput {
  where: FieldWhereUniqueInput!
  update: FieldUpdateWithoutEntityDataInput!
  create: FieldCreateWithoutEntityInput!
}

input FieldWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  template: FieldTemplateWhereInput
  type: FieldTypeWhereInput
  entity: EntityWhereInput
  informationSlots_every: InformationSlotWhereInput
  informationSlots_some: InformationSlotWhereInput
  informationSlots_none: InformationSlotWhereInput
}

input FieldWhereUniqueInput {
  id: ID
}

type Game implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  creator: User
  cooperators(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity!]
  plays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay!]
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  entities: EntityCreateManyWithoutGameInput
  plays: GamePlayCreateManyWithoutGameInput
}

input GameCreateManyWithoutCooperatorsInput {
  create: [GameCreateWithoutCooperatorsInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutCreatorInput {
  create: [GameCreateWithoutCreatorInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneWithoutEntitiesInput {
  create: GameCreateWithoutEntitiesInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutPlaysInput {
  create: GameCreateWithoutPlaysInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutCooperatorsInput {
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  creator: UserCreateOneWithoutGamesCreatedInput
  entities: EntityCreateManyWithoutGameInput
  plays: GamePlayCreateManyWithoutGameInput
}

input GameCreateWithoutCreatorInput {
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  cooperators: UserCreateManyWithoutGamesInput
  entities: EntityCreateManyWithoutGameInput
  plays: GamePlayCreateManyWithoutGameInput
}

input GameCreateWithoutEntitiesInput {
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  plays: GamePlayCreateManyWithoutGameInput
}

input GameCreateWithoutPlaysInput {
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  entities: EntityCreateManyWithoutGameInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  privacy_ASC
  privacy_DESC
  accessType_ASC
  accessType_DESC
  accessCode_ASC
  accessCode_DESC
}

type GamePlay implements Node {
  id: ID!
  game: Game!
  player: User
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action!]
}

"""A connection to a list of items."""
type GamePlayConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamePlayEdge]!
  aggregate: AggregateGamePlay!
}

input GamePlayCreateInput {
  game: GameCreateOneWithoutPlaysInput!
  player: UserCreateOneWithoutPlaysInput
  actions: ActionCreateManyWithoutGamePlayInput
}

input GamePlayCreateManyWithoutGameInput {
  create: [GamePlayCreateWithoutGameInput!]
  connect: [GamePlayWhereUniqueInput!]
}

input GamePlayCreateManyWithoutPlayerInput {
  create: [GamePlayCreateWithoutPlayerInput!]
  connect: [GamePlayWhereUniqueInput!]
}

input GamePlayCreateOneWithoutActionsInput {
  create: GamePlayCreateWithoutActionsInput
  connect: GamePlayWhereUniqueInput
}

input GamePlayCreateWithoutActionsInput {
  game: GameCreateOneWithoutPlaysInput!
  player: UserCreateOneWithoutPlaysInput
}

input GamePlayCreateWithoutGameInput {
  player: UserCreateOneWithoutPlaysInput
  actions: ActionCreateManyWithoutGamePlayInput
}

input GamePlayCreateWithoutPlayerInput {
  game: GameCreateOneWithoutPlaysInput!
  actions: ActionCreateManyWithoutGamePlayInput
}

"""An edge in a connection."""
type GamePlayEdge {
  """The item at the end of the edge."""
  node: GamePlay!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GamePlayOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamePlayPreviousValues {
  id: ID!
}

input GamePlayScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GamePlayScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamePlayScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamePlayScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type GamePlaySubscriptionPayload {
  mutation: MutationType!
  node: GamePlay
  updatedFields: [String!]
  previousValues: GamePlayPreviousValues
}

input GamePlaySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamePlaySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamePlaySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamePlaySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamePlayWhereInput
}

input GamePlayUpdateInput {
  game: GameUpdateOneRequiredWithoutPlaysInput
  player: UserUpdateOneWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateManyWithoutGameInput {
  create: [GamePlayCreateWithoutGameInput!]
  connect: [GamePlayWhereUniqueInput!]
  disconnect: [GamePlayWhereUniqueInput!]
  delete: [GamePlayWhereUniqueInput!]
  update: [GamePlayUpdateWithWhereUniqueWithoutGameInput!]
  deleteMany: [GamePlayScalarWhereInput!]
  upsert: [GamePlayUpsertWithWhereUniqueWithoutGameInput!]
}

input GamePlayUpdateManyWithoutPlayerInput {
  create: [GamePlayCreateWithoutPlayerInput!]
  connect: [GamePlayWhereUniqueInput!]
  disconnect: [GamePlayWhereUniqueInput!]
  delete: [GamePlayWhereUniqueInput!]
  update: [GamePlayUpdateWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [GamePlayScalarWhereInput!]
  upsert: [GamePlayUpsertWithWhereUniqueWithoutPlayerInput!]
}

input GamePlayUpdateOneRequiredWithoutActionsInput {
  create: GamePlayCreateWithoutActionsInput
  connect: GamePlayWhereUniqueInput
  update: GamePlayUpdateWithoutActionsDataInput
  upsert: GamePlayUpsertWithoutActionsInput
}

input GamePlayUpdateWithoutActionsDataInput {
  game: GameUpdateOneRequiredWithoutPlaysInput
  player: UserUpdateOneWithoutPlaysInput
}

input GamePlayUpdateWithoutGameDataInput {
  player: UserUpdateOneWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateWithoutPlayerDataInput {
  game: GameUpdateOneRequiredWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateWithWhereUniqueWithoutGameInput {
  where: GamePlayWhereUniqueInput!
  data: GamePlayUpdateWithoutGameDataInput!
}

input GamePlayUpdateWithWhereUniqueWithoutPlayerInput {
  where: GamePlayWhereUniqueInput!
  data: GamePlayUpdateWithoutPlayerDataInput!
}

input GamePlayUpsertWithoutActionsInput {
  update: GamePlayUpdateWithoutActionsDataInput!
  create: GamePlayCreateWithoutActionsInput!
}

input GamePlayUpsertWithWhereUniqueWithoutGameInput {
  where: GamePlayWhereUniqueInput!
  update: GamePlayUpdateWithoutGameDataInput!
  create: GamePlayCreateWithoutGameInput!
}

input GamePlayUpsertWithWhereUniqueWithoutPlayerInput {
  where: GamePlayWhereUniqueInput!
  update: GamePlayUpdateWithoutPlayerDataInput!
  create: GamePlayCreateWithoutPlayerInput!
}

input GamePlayWhereInput {
  """Logical AND on all given filters."""
  AND: [GamePlayWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamePlayWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamePlayWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  game: GameWhereInput
  player: UserWhereInput
  actions_every: ActionWhereInput
  actions_some: ActionWhereInput
  actions_none: ActionWhereInput
}

input GamePlayWhereUniqueInput {
  id: ID
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
}

input GameScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GameScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  privacy: PrivacyType

  """All values that are not equal to given value."""
  privacy_not: PrivacyType

  """All values that are contained in given list."""
  privacy_in: [PrivacyType!]

  """All values that are not contained in given list."""
  privacy_not_in: [PrivacyType!]
  accessType: AccessType

  """All values that are not equal to given value."""
  accessType_not: AccessType

  """All values that are contained in given list."""
  accessType_in: [AccessType!]

  """All values that are not contained in given list."""
  accessType_not_in: [AccessType!]
  accessCode: String

  """All values that are not equal to given value."""
  accessCode_not: String

  """All values that are contained in given list."""
  accessCode_in: [String!]

  """All values that are not contained in given list."""
  accessCode_not_in: [String!]

  """All values less than the given value."""
  accessCode_lt: String

  """All values less than or equal the given value."""
  accessCode_lte: String

  """All values greater than the given value."""
  accessCode_gt: String

  """All values greater than or equal the given value."""
  accessCode_gte: String

  """All values containing the given string."""
  accessCode_contains: String

  """All values not containing the given string."""
  accessCode_not_contains: String

  """All values starting with the given string."""
  accessCode_starts_with: String

  """All values not starting with the given string."""
  accessCode_not_starts_with: String

  """All values ending with the given string."""
  accessCode_ends_with: String

  """All values not ending with the given string."""
  accessCode_not_ends_with: String
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  entities: EntityUpdateManyWithoutGameInput
  plays: GamePlayUpdateManyWithoutGameInput
}

input GameUpdateManyDataInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
}

input GameUpdateManyMutationInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
}

input GameUpdateManyWithoutCooperatorsInput {
  create: [GameCreateWithoutCooperatorsInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutCooperatorsInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
  deleteMany: [GameScalarWhereInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutCooperatorsInput!]
}

input GameUpdateManyWithoutCreatorInput {
  create: [GameCreateWithoutCreatorInput!]
  connect: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
  deleteMany: [GameScalarWhereInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutCreatorInput!]
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateOneRequiredWithoutPlaysInput {
  create: GameCreateWithoutPlaysInput
  connect: GameWhereUniqueInput
  update: GameUpdateWithoutPlaysDataInput
  upsert: GameUpsertWithoutPlaysInput
}

input GameUpdateOneWithoutEntitiesInput {
  create: GameCreateWithoutEntitiesInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GameUpdateWithoutEntitiesDataInput
  upsert: GameUpsertWithoutEntitiesInput
}

input GameUpdateWithoutCooperatorsDataInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  creator: UserUpdateOneWithoutGamesCreatedInput
  entities: EntityUpdateManyWithoutGameInput
  plays: GamePlayUpdateManyWithoutGameInput
}

input GameUpdateWithoutCreatorDataInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  cooperators: UserUpdateManyWithoutGamesInput
  entities: EntityUpdateManyWithoutGameInput
  plays: GamePlayUpdateManyWithoutGameInput
}

input GameUpdateWithoutEntitiesDataInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  plays: GamePlayUpdateManyWithoutGameInput
}

input GameUpdateWithoutPlaysDataInput {
  name: String
  slug: String
  description: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  entities: EntityUpdateManyWithoutGameInput
}

input GameUpdateWithWhereUniqueWithoutCooperatorsInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutCooperatorsDataInput!
}

input GameUpdateWithWhereUniqueWithoutCreatorInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutCreatorDataInput!
}

input GameUpsertWithoutEntitiesInput {
  update: GameUpdateWithoutEntitiesDataInput!
  create: GameCreateWithoutEntitiesInput!
}

input GameUpsertWithoutPlaysInput {
  update: GameUpdateWithoutPlaysDataInput!
  create: GameCreateWithoutPlaysInput!
}

input GameUpsertWithWhereUniqueWithoutCooperatorsInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutCooperatorsDataInput!
  create: GameCreateWithoutCooperatorsInput!
}

input GameUpsertWithWhereUniqueWithoutCreatorInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutCreatorDataInput!
  create: GameCreateWithoutCreatorInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  privacy: PrivacyType

  """All values that are not equal to given value."""
  privacy_not: PrivacyType

  """All values that are contained in given list."""
  privacy_in: [PrivacyType!]

  """All values that are not contained in given list."""
  privacy_not_in: [PrivacyType!]
  accessType: AccessType

  """All values that are not equal to given value."""
  accessType_not: AccessType

  """All values that are contained in given list."""
  accessType_in: [AccessType!]

  """All values that are not contained in given list."""
  accessType_not_in: [AccessType!]
  accessCode: String

  """All values that are not equal to given value."""
  accessCode_not: String

  """All values that are contained in given list."""
  accessCode_in: [String!]

  """All values that are not contained in given list."""
  accessCode_not_in: [String!]

  """All values less than the given value."""
  accessCode_lt: String

  """All values less than or equal the given value."""
  accessCode_lte: String

  """All values greater than the given value."""
  accessCode_gt: String

  """All values greater than or equal the given value."""
  accessCode_gte: String

  """All values containing the given string."""
  accessCode_contains: String

  """All values not containing the given string."""
  accessCode_not_contains: String

  """All values starting with the given string."""
  accessCode_starts_with: String

  """All values not starting with the given string."""
  accessCode_not_starts_with: String

  """All values ending with the given string."""
  accessCode_ends_with: String

  """All values not ending with the given string."""
  accessCode_not_ends_with: String
  creator: UserWhereInput
  cooperators_every: UserWhereInput
  cooperators_some: UserWhereInput
  cooperators_none: UserWhereInput
  entities_every: EntityWhereInput
  entities_some: EntityWhereInput
  entities_none: EntityWhereInput
  plays_every: GamePlayWhereInput
  plays_some: GamePlayWhereInput
  plays_none: GamePlayWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

type Hint implements Node {
  id: ID!
  template: HintTemplate
  text: String!
  delay: Int
  actionRequirement: ActionRequirement
}

"""A connection to a list of items."""
type HintConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HintEdge]!
  aggregate: AggregateHint!
}

input HintCreateInput {
  text: String!
  delay: Int
  template: HintTemplateCreateOneInput
  actionRequirement: ActionRequirementCreateOneWithoutHintsInput
}

input HintCreateManyWithoutActionRequirementInput {
  create: [HintCreateWithoutActionRequirementInput!]
  connect: [HintWhereUniqueInput!]
}

input HintCreateWithoutActionRequirementInput {
  text: String!
  delay: Int
  template: HintTemplateCreateOneInput
}

"""An edge in a connection."""
type HintEdge {
  """The item at the end of the edge."""
  node: Hint!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HintOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  delay_ASC
  delay_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HintPreviousValues {
  id: ID!
  text: String!
  delay: Int
}

input HintScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HintScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
}

type HintSubscriptionPayload {
  mutation: MutationType!
  node: Hint
  updatedFields: [String!]
  previousValues: HintPreviousValues
}

input HintSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HintSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HintWhereInput
}

type HintTemplate implements Node {
  id: ID!
  text: String!
  delay: Int
  actionRequirement: ActionRequirementTemplate
}

"""A connection to a list of items."""
type HintTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HintTemplateEdge]!
  aggregate: AggregateHintTemplate!
}

input HintTemplateCreateInput {
  text: String!
  delay: Int
  actionRequirement: ActionRequirementTemplateCreateOneWithoutHintsInput
}

input HintTemplateCreateManyWithoutActionRequirementInput {
  create: [HintTemplateCreateWithoutActionRequirementInput!]
  connect: [HintTemplateWhereUniqueInput!]
}

input HintTemplateCreateOneInput {
  create: HintTemplateCreateInput
  connect: HintTemplateWhereUniqueInput
}

input HintTemplateCreateWithoutActionRequirementInput {
  text: String!
  delay: Int
}

"""An edge in a connection."""
type HintTemplateEdge {
  """The item at the end of the edge."""
  node: HintTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HintTemplateOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  delay_ASC
  delay_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HintTemplatePreviousValues {
  id: ID!
  text: String!
  delay: Int
}

input HintTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HintTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
}

type HintTemplateSubscriptionPayload {
  mutation: MutationType!
  node: HintTemplate
  updatedFields: [String!]
  previousValues: HintTemplatePreviousValues
}

input HintTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HintTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HintTemplateWhereInput
}

input HintTemplateUpdateDataInput {
  text: String
  delay: Int
  actionRequirement: ActionRequirementTemplateUpdateOneWithoutHintsInput
}

input HintTemplateUpdateInput {
  text: String
  delay: Int
  actionRequirement: ActionRequirementTemplateUpdateOneWithoutHintsInput
}

input HintTemplateUpdateManyDataInput {
  text: String
  delay: Int
}

input HintTemplateUpdateManyMutationInput {
  text: String
  delay: Int
}

input HintTemplateUpdateManyWithoutActionRequirementInput {
  create: [HintTemplateCreateWithoutActionRequirementInput!]
  connect: [HintTemplateWhereUniqueInput!]
  disconnect: [HintTemplateWhereUniqueInput!]
  delete: [HintTemplateWhereUniqueInput!]
  update: [HintTemplateUpdateWithWhereUniqueWithoutActionRequirementInput!]
  updateMany: [HintTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [HintTemplateScalarWhereInput!]
  upsert: [HintTemplateUpsertWithWhereUniqueWithoutActionRequirementInput!]
}

input HintTemplateUpdateManyWithWhereNestedInput {
  where: HintTemplateScalarWhereInput!
  data: HintTemplateUpdateManyDataInput!
}

input HintTemplateUpdateOneInput {
  create: HintTemplateCreateInput
  connect: HintTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: HintTemplateUpdateDataInput
  upsert: HintTemplateUpsertNestedInput
}

input HintTemplateUpdateWithoutActionRequirementDataInput {
  text: String
  delay: Int
}

input HintTemplateUpdateWithWhereUniqueWithoutActionRequirementInput {
  where: HintTemplateWhereUniqueInput!
  data: HintTemplateUpdateWithoutActionRequirementDataInput!
}

input HintTemplateUpsertNestedInput {
  update: HintTemplateUpdateDataInput!
  create: HintTemplateCreateInput!
}

input HintTemplateUpsertWithWhereUniqueWithoutActionRequirementInput {
  where: HintTemplateWhereUniqueInput!
  update: HintTemplateUpdateWithoutActionRequirementDataInput!
  create: HintTemplateCreateWithoutActionRequirementInput!
}

input HintTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [HintTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
  actionRequirement: ActionRequirementTemplateWhereInput
}

input HintTemplateWhereUniqueInput {
  id: ID
}

input HintUpdateInput {
  text: String
  delay: Int
  template: HintTemplateUpdateOneInput
  actionRequirement: ActionRequirementUpdateOneWithoutHintsInput
}

input HintUpdateManyDataInput {
  text: String
  delay: Int
}

input HintUpdateManyMutationInput {
  text: String
  delay: Int
}

input HintUpdateManyWithoutActionRequirementInput {
  create: [HintCreateWithoutActionRequirementInput!]
  connect: [HintWhereUniqueInput!]
  disconnect: [HintWhereUniqueInput!]
  delete: [HintWhereUniqueInput!]
  update: [HintUpdateWithWhereUniqueWithoutActionRequirementInput!]
  updateMany: [HintUpdateManyWithWhereNestedInput!]
  deleteMany: [HintScalarWhereInput!]
  upsert: [HintUpsertWithWhereUniqueWithoutActionRequirementInput!]
}

input HintUpdateManyWithWhereNestedInput {
  where: HintScalarWhereInput!
  data: HintUpdateManyDataInput!
}

input HintUpdateWithoutActionRequirementDataInput {
  text: String
  delay: Int
  template: HintTemplateUpdateOneInput
}

input HintUpdateWithWhereUniqueWithoutActionRequirementInput {
  where: HintWhereUniqueInput!
  data: HintUpdateWithoutActionRequirementDataInput!
}

input HintUpsertWithWhereUniqueWithoutActionRequirementInput {
  where: HintWhereUniqueInput!
  update: HintUpdateWithoutActionRequirementDataInput!
  create: HintCreateWithoutActionRequirementInput!
}

input HintWhereInput {
  """Logical AND on all given filters."""
  AND: [HintWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
  template: HintTemplateWhereInput
  actionRequirement: ActionRequirementWhereInput
}

input HintWhereUniqueInput {
  id: ID
}

type InformationSlot implements Node {
  id: ID!
  template: InformationSlotTemplate
  name: String
  description: String
  allowedTypes(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldType!]
  field: Field
  entity: Entity!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
}

"""A connection to a list of items."""
type InformationSlotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InformationSlotEdge]!
  aggregate: AggregateInformationSlot!
}

input InformationSlotCreateInput {
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  field: FieldCreateOneWithoutInformationSlotsInput
  entity: EntityCreateOneWithoutInformationSlotsInput!
  states: StateCreateManyInput
}

input InformationSlotCreateManyInput {
  create: [InformationSlotCreateInput!]
  connect: [InformationSlotWhereUniqueInput!]
}

input InformationSlotCreateManyWithoutEntityInput {
  create: [InformationSlotCreateWithoutEntityInput!]
  connect: [InformationSlotWhereUniqueInput!]
}

input InformationSlotCreateManyWithoutFieldInput {
  create: [InformationSlotCreateWithoutFieldInput!]
  connect: [InformationSlotWhereUniqueInput!]
}

input InformationSlotCreateWithoutEntityInput {
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  field: FieldCreateOneWithoutInformationSlotsInput
  states: StateCreateManyInput
}

input InformationSlotCreateWithoutFieldInput {
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  entity: EntityCreateOneWithoutInformationSlotsInput!
  states: StateCreateManyInput
}

"""An edge in a connection."""
type InformationSlotEdge {
  """The item at the end of the edge."""
  node: InformationSlot!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InformationSlotOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InformationSlotPreviousValues {
  id: ID!
  name: String
  description: String
}

input InformationSlotScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type InformationSlotSubscriptionPayload {
  mutation: MutationType!
  node: InformationSlot
  updatedFields: [String!]
  previousValues: InformationSlotPreviousValues
}

input InformationSlotSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InformationSlotWhereInput
}

type InformationSlotTemplate implements Node {
  id: ID!
  name: String
  description: String
  allowedTypes(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldType!]
  entity: EntityTemplate!
  states(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate!]
}

"""A connection to a list of items."""
type InformationSlotTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InformationSlotTemplateEdge]!
  aggregate: AggregateInformationSlotTemplate!
}

input InformationSlotTemplateCreateInput {
  name: String
  description: String
  allowedTypes: FieldTypeCreateManyInput
  entity: EntityTemplateCreateOneWithoutInformationSlotsInput!
  states: StateTemplateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateCreateManyWithoutEntityInput {
  create: [InformationSlotTemplateCreateWithoutEntityInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
}

input InformationSlotTemplateCreateManyWithoutStatesInput {
  create: [InformationSlotTemplateCreateWithoutStatesInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
}

input InformationSlotTemplateCreateOneInput {
  create: InformationSlotTemplateCreateInput
  connect: InformationSlotTemplateWhereUniqueInput
}

input InformationSlotTemplateCreateWithoutEntityInput {
  name: String
  description: String
  allowedTypes: FieldTypeCreateManyInput
  states: StateTemplateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateCreateWithoutStatesInput {
  name: String
  description: String
  allowedTypes: FieldTypeCreateManyInput
  entity: EntityTemplateCreateOneWithoutInformationSlotsInput!
}

"""An edge in a connection."""
type InformationSlotTemplateEdge {
  """The item at the end of the edge."""
  node: InformationSlotTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InformationSlotTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InformationSlotTemplatePreviousValues {
  id: ID!
  name: String
  description: String
}

input InformationSlotTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type InformationSlotTemplateSubscriptionPayload {
  mutation: MutationType!
  node: InformationSlotTemplate
  updatedFields: [String!]
  previousValues: InformationSlotTemplatePreviousValues
}

input InformationSlotTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InformationSlotTemplateWhereInput
}

input InformationSlotTemplateUpdateDataInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput
  states: StateTemplateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateUpdateInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput
  states: StateTemplateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateUpdateManyDataInput {
  name: String
  description: String
}

input InformationSlotTemplateUpdateManyMutationInput {
  name: String
  description: String
}

input InformationSlotTemplateUpdateManyWithoutEntityInput {
  create: [InformationSlotTemplateCreateWithoutEntityInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
  disconnect: [InformationSlotTemplateWhereUniqueInput!]
  delete: [InformationSlotTemplateWhereUniqueInput!]
  update: [InformationSlotTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [InformationSlotTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotTemplateScalarWhereInput!]
  upsert: [InformationSlotTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input InformationSlotTemplateUpdateManyWithoutStatesInput {
  create: [InformationSlotTemplateCreateWithoutStatesInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
  disconnect: [InformationSlotTemplateWhereUniqueInput!]
  delete: [InformationSlotTemplateWhereUniqueInput!]
  update: [InformationSlotTemplateUpdateWithWhereUniqueWithoutStatesInput!]
  updateMany: [InformationSlotTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotTemplateScalarWhereInput!]
  upsert: [InformationSlotTemplateUpsertWithWhereUniqueWithoutStatesInput!]
}

input InformationSlotTemplateUpdateManyWithWhereNestedInput {
  where: InformationSlotTemplateScalarWhereInput!
  data: InformationSlotTemplateUpdateManyDataInput!
}

input InformationSlotTemplateUpdateOneInput {
  create: InformationSlotTemplateCreateInput
  connect: InformationSlotTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InformationSlotTemplateUpdateDataInput
  upsert: InformationSlotTemplateUpsertNestedInput
}

input InformationSlotTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  states: StateTemplateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateUpdateWithoutStatesDataInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput
}

input InformationSlotTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: InformationSlotTemplateWhereUniqueInput!
  data: InformationSlotTemplateUpdateWithoutEntityDataInput!
}

input InformationSlotTemplateUpdateWithWhereUniqueWithoutStatesInput {
  where: InformationSlotTemplateWhereUniqueInput!
  data: InformationSlotTemplateUpdateWithoutStatesDataInput!
}

input InformationSlotTemplateUpsertNestedInput {
  update: InformationSlotTemplateUpdateDataInput!
  create: InformationSlotTemplateCreateInput!
}

input InformationSlotTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: InformationSlotTemplateWhereUniqueInput!
  update: InformationSlotTemplateUpdateWithoutEntityDataInput!
  create: InformationSlotTemplateCreateWithoutEntityInput!
}

input InformationSlotTemplateUpsertWithWhereUniqueWithoutStatesInput {
  where: InformationSlotTemplateWhereUniqueInput!
  update: InformationSlotTemplateUpdateWithoutStatesDataInput!
  create: InformationSlotTemplateCreateWithoutStatesInput!
}

input InformationSlotTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  allowedTypes_every: FieldTypeWhereInput
  allowedTypes_some: FieldTypeWhereInput
  allowedTypes_none: FieldTypeWhereInput
  entity: EntityTemplateWhereInput
  states_every: StateTemplateWhereInput
  states_some: StateTemplateWhereInput
  states_none: StateTemplateWhereInput
}

input InformationSlotTemplateWhereUniqueInput {
  id: ID
}

input InformationSlotUpdateDataInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  field: FieldUpdateOneWithoutInformationSlotsInput
  entity: EntityUpdateOneRequiredWithoutInformationSlotsInput
  states: StateUpdateManyInput
}

input InformationSlotUpdateInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  field: FieldUpdateOneWithoutInformationSlotsInput
  entity: EntityUpdateOneRequiredWithoutInformationSlotsInput
  states: StateUpdateManyInput
}

input InformationSlotUpdateManyDataInput {
  name: String
  description: String
}

input InformationSlotUpdateManyInput {
  create: [InformationSlotCreateInput!]
  connect: [InformationSlotWhereUniqueInput!]
  disconnect: [InformationSlotWhereUniqueInput!]
  delete: [InformationSlotWhereUniqueInput!]
  update: [InformationSlotUpdateWithWhereUniqueNestedInput!]
  updateMany: [InformationSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotScalarWhereInput!]
  upsert: [InformationSlotUpsertWithWhereUniqueNestedInput!]
}

input InformationSlotUpdateManyMutationInput {
  name: String
  description: String
}

input InformationSlotUpdateManyWithoutEntityInput {
  create: [InformationSlotCreateWithoutEntityInput!]
  connect: [InformationSlotWhereUniqueInput!]
  disconnect: [InformationSlotWhereUniqueInput!]
  delete: [InformationSlotWhereUniqueInput!]
  update: [InformationSlotUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [InformationSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotScalarWhereInput!]
  upsert: [InformationSlotUpsertWithWhereUniqueWithoutEntityInput!]
}

input InformationSlotUpdateManyWithoutFieldInput {
  create: [InformationSlotCreateWithoutFieldInput!]
  connect: [InformationSlotWhereUniqueInput!]
  disconnect: [InformationSlotWhereUniqueInput!]
  delete: [InformationSlotWhereUniqueInput!]
  update: [InformationSlotUpdateWithWhereUniqueWithoutFieldInput!]
  updateMany: [InformationSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotScalarWhereInput!]
  upsert: [InformationSlotUpsertWithWhereUniqueWithoutFieldInput!]
}

input InformationSlotUpdateManyWithWhereNestedInput {
  where: InformationSlotScalarWhereInput!
  data: InformationSlotUpdateManyDataInput!
}

input InformationSlotUpdateWithoutEntityDataInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  field: FieldUpdateOneWithoutInformationSlotsInput
  states: StateUpdateManyInput
}

input InformationSlotUpdateWithoutFieldDataInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityUpdateOneRequiredWithoutInformationSlotsInput
  states: StateUpdateManyInput
}

input InformationSlotUpdateWithWhereUniqueNestedInput {
  where: InformationSlotWhereUniqueInput!
  data: InformationSlotUpdateDataInput!
}

input InformationSlotUpdateWithWhereUniqueWithoutEntityInput {
  where: InformationSlotWhereUniqueInput!
  data: InformationSlotUpdateWithoutEntityDataInput!
}

input InformationSlotUpdateWithWhereUniqueWithoutFieldInput {
  where: InformationSlotWhereUniqueInput!
  data: InformationSlotUpdateWithoutFieldDataInput!
}

input InformationSlotUpsertWithWhereUniqueNestedInput {
  where: InformationSlotWhereUniqueInput!
  update: InformationSlotUpdateDataInput!
  create: InformationSlotCreateInput!
}

input InformationSlotUpsertWithWhereUniqueWithoutEntityInput {
  where: InformationSlotWhereUniqueInput!
  update: InformationSlotUpdateWithoutEntityDataInput!
  create: InformationSlotCreateWithoutEntityInput!
}

input InformationSlotUpsertWithWhereUniqueWithoutFieldInput {
  where: InformationSlotWhereUniqueInput!
  update: InformationSlotUpdateWithoutFieldDataInput!
  create: InformationSlotCreateWithoutFieldInput!
}

input InformationSlotWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  template: InformationSlotTemplateWhereInput
  allowedTypes_every: FieldTypeWhereInput
  allowedTypes_some: FieldTypeWhereInput
  allowedTypes_none: FieldTypeWhereInput
  field: FieldWhereInput
  entity: EntityWhereInput
  states_every: StateWhereInput
  states_some: StateWhereInput
  states_none: StateWhereInput
}

input InformationSlotWhereUniqueInput {
  id: ID
}

type InputRequirement implements Node {
  id: ID!
  template: InputRequirementTemplate
  key: String!
  field: Field
  value: String
  not: Boolean!
  comparator: ComparatorType!
  payload: PayloadRequirement!
}

"""A connection to a list of items."""
type InputRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InputRequirementEdge]!
  aggregate: AggregateInputRequirement!
}

input InputRequirementCreateInput {
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateCreateOneInput
  field: FieldCreateOneInput
  payload: PayloadRequirementCreateOneWithoutRequiredInputsInput!
}

input InputRequirementCreateManyWithoutPayloadInput {
  create: [InputRequirementCreateWithoutPayloadInput!]
  connect: [InputRequirementWhereUniqueInput!]
}

input InputRequirementCreateWithoutPayloadInput {
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateCreateOneInput
  field: FieldCreateOneInput
}

"""An edge in a connection."""
type InputRequirementEdge {
  """The item at the end of the edge."""
  node: InputRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InputRequirementOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  not_ASC
  not_DESC
  comparator_ASC
  comparator_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InputRequirementPreviousValues {
  id: ID!
  key: String!
  value: String
  not: Boolean!
  comparator: ComparatorType!
}

input InputRequirementScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  comparator: ComparatorType

  """All values that are not equal to given value."""
  comparator_not: ComparatorType

  """All values that are contained in given list."""
  comparator_in: [ComparatorType!]

  """All values that are not contained in given list."""
  comparator_not_in: [ComparatorType!]
}

type InputRequirementSubscriptionPayload {
  mutation: MutationType!
  node: InputRequirement
  updatedFields: [String!]
  previousValues: InputRequirementPreviousValues
}

input InputRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InputRequirementWhereInput
}

type InputRequirementTemplate implements Node {
  id: ID!
  key: String!
  field: FieldTemplate
  value: String
  not: Boolean!
  comparator: ComparatorType!
  payload: PayloadRequirementTemplate!
}

"""A connection to a list of items."""
type InputRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InputRequirementTemplateEdge]!
  aggregate: AggregateInputRequirementTemplate!
}

input InputRequirementTemplateCreateInput {
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateCreateOneInput
  payload: PayloadRequirementTemplateCreateOneWithoutRequiredInputsInput!
}

input InputRequirementTemplateCreateManyWithoutPayloadInput {
  create: [InputRequirementTemplateCreateWithoutPayloadInput!]
  connect: [InputRequirementTemplateWhereUniqueInput!]
}

input InputRequirementTemplateCreateOneInput {
  create: InputRequirementTemplateCreateInput
  connect: InputRequirementTemplateWhereUniqueInput
}

input InputRequirementTemplateCreateWithoutPayloadInput {
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateCreateOneInput
}

"""An edge in a connection."""
type InputRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: InputRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InputRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  not_ASC
  not_DESC
  comparator_ASC
  comparator_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InputRequirementTemplatePreviousValues {
  id: ID!
  key: String!
  value: String
  not: Boolean!
  comparator: ComparatorType!
}

input InputRequirementTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  comparator: ComparatorType

  """All values that are not equal to given value."""
  comparator_not: ComparatorType

  """All values that are contained in given list."""
  comparator_in: [ComparatorType!]

  """All values that are not contained in given list."""
  comparator_not_in: [ComparatorType!]
}

type InputRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: InputRequirementTemplate
  updatedFields: [String!]
  previousValues: InputRequirementTemplatePreviousValues
}

input InputRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InputRequirementTemplateWhereInput
}

input InputRequirementTemplateUpdateDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateUpdateOneInput
  payload: PayloadRequirementTemplateUpdateOneRequiredWithoutRequiredInputsInput
}

input InputRequirementTemplateUpdateInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateUpdateOneInput
  payload: PayloadRequirementTemplateUpdateOneRequiredWithoutRequiredInputsInput
}

input InputRequirementTemplateUpdateManyDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
}

input InputRequirementTemplateUpdateManyMutationInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
}

input InputRequirementTemplateUpdateManyWithoutPayloadInput {
  create: [InputRequirementTemplateCreateWithoutPayloadInput!]
  connect: [InputRequirementTemplateWhereUniqueInput!]
  disconnect: [InputRequirementTemplateWhereUniqueInput!]
  delete: [InputRequirementTemplateWhereUniqueInput!]
  update: [InputRequirementTemplateUpdateWithWhereUniqueWithoutPayloadInput!]
  updateMany: [InputRequirementTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [InputRequirementTemplateScalarWhereInput!]
  upsert: [InputRequirementTemplateUpsertWithWhereUniqueWithoutPayloadInput!]
}

input InputRequirementTemplateUpdateManyWithWhereNestedInput {
  where: InputRequirementTemplateScalarWhereInput!
  data: InputRequirementTemplateUpdateManyDataInput!
}

input InputRequirementTemplateUpdateOneInput {
  create: InputRequirementTemplateCreateInput
  connect: InputRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InputRequirementTemplateUpdateDataInput
  upsert: InputRequirementTemplateUpsertNestedInput
}

input InputRequirementTemplateUpdateWithoutPayloadDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateUpdateOneInput
}

input InputRequirementTemplateUpdateWithWhereUniqueWithoutPayloadInput {
  where: InputRequirementTemplateWhereUniqueInput!
  data: InputRequirementTemplateUpdateWithoutPayloadDataInput!
}

input InputRequirementTemplateUpsertNestedInput {
  update: InputRequirementTemplateUpdateDataInput!
  create: InputRequirementTemplateCreateInput!
}

input InputRequirementTemplateUpsertWithWhereUniqueWithoutPayloadInput {
  where: InputRequirementTemplateWhereUniqueInput!
  update: InputRequirementTemplateUpdateWithoutPayloadDataInput!
  create: InputRequirementTemplateCreateWithoutPayloadInput!
}

input InputRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  comparator: ComparatorType

  """All values that are not equal to given value."""
  comparator_not: ComparatorType

  """All values that are contained in given list."""
  comparator_in: [ComparatorType!]

  """All values that are not contained in given list."""
  comparator_not_in: [ComparatorType!]
  field: FieldTemplateWhereInput
  payload: PayloadRequirementTemplateWhereInput
}

input InputRequirementTemplateWhereUniqueInput {
  id: ID
}

input InputRequirementUpdateInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateUpdateOneInput
  field: FieldUpdateOneInput
  payload: PayloadRequirementUpdateOneRequiredWithoutRequiredInputsInput
}

input InputRequirementUpdateManyDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
}

input InputRequirementUpdateManyMutationInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
}

input InputRequirementUpdateManyWithoutPayloadInput {
  create: [InputRequirementCreateWithoutPayloadInput!]
  connect: [InputRequirementWhereUniqueInput!]
  disconnect: [InputRequirementWhereUniqueInput!]
  delete: [InputRequirementWhereUniqueInput!]
  update: [InputRequirementUpdateWithWhereUniqueWithoutPayloadInput!]
  updateMany: [InputRequirementUpdateManyWithWhereNestedInput!]
  deleteMany: [InputRequirementScalarWhereInput!]
  upsert: [InputRequirementUpsertWithWhereUniqueWithoutPayloadInput!]
}

input InputRequirementUpdateManyWithWhereNestedInput {
  where: InputRequirementScalarWhereInput!
  data: InputRequirementUpdateManyDataInput!
}

input InputRequirementUpdateWithoutPayloadDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateUpdateOneInput
  field: FieldUpdateOneInput
}

input InputRequirementUpdateWithWhereUniqueWithoutPayloadInput {
  where: InputRequirementWhereUniqueInput!
  data: InputRequirementUpdateWithoutPayloadDataInput!
}

input InputRequirementUpsertWithWhereUniqueWithoutPayloadInput {
  where: InputRequirementWhereUniqueInput!
  update: InputRequirementUpdateWithoutPayloadDataInput!
  create: InputRequirementCreateWithoutPayloadInput!
}

input InputRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  comparator: ComparatorType

  """All values that are not equal to given value."""
  comparator_not: ComparatorType

  """All values that are contained in given list."""
  comparator_in: [ComparatorType!]

  """All values that are not contained in given list."""
  comparator_not_in: [ComparatorType!]
  template: InputRequirementTemplateWhereInput
  field: FieldWhereInput
  payload: PayloadRequirementWhereInput
}

input InputRequirementWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEntity(data: EntityCreateInput!): Entity!
  createStateTransition(data: StateTransitionCreateInput!): StateTransition!
  createActionRequirement(data: ActionRequirementCreateInput!): ActionRequirement!
  createHint(data: HintCreateInput!): Hint!
  createPayloadRequirement(data: PayloadRequirementCreateInput!): PayloadRequirement!
  createEntityRequirement(data: EntityRequirementCreateInput!): EntityRequirement!
  createInputRequirement(data: InputRequirementCreateInput!): InputRequirement!
  createGame(data: GameCreateInput!): Game!
  createGamePlay(data: GamePlayCreateInput!): GamePlay!
  createUser(data: UserCreateInput!): User!
  createAction(data: ActionCreateInput!): Action!
  createActionPayload(data: ActionPayloadCreateInput!): ActionPayload!
  createActionRequirementTemplate(data: ActionRequirementTemplateCreateInput!): ActionRequirementTemplate!
  createPayloadRequirementTemplate(data: PayloadRequirementTemplateCreateInput!): PayloadRequirementTemplate!
  createInformationSlot(data: InformationSlotCreateInput!): InformationSlot!
  createEntityRequirementTemplate(data: EntityRequirementTemplateCreateInput!): EntityRequirementTemplate!
  createInputRequirementTemplate(data: InputRequirementTemplateCreateInput!): InputRequirementTemplate!
  createHintTemplate(data: HintTemplateCreateInput!): HintTemplate!
  createActionPayloadInputValue(data: ActionPayloadInputValueCreateInput!): ActionPayloadInputValue!
  createStateTemplate(data: StateTemplateCreateInput!): StateTemplate!
  createFieldTemplate(data: FieldTemplateCreateInput!): FieldTemplate!
  createStateTransitionTemplate(data: StateTransitionTemplateCreateInput!): StateTransitionTemplate!
  createEntityTemplate(data: EntityTemplateCreateInput!): EntityTemplate!
  createInformationSlotTemplate(data: InformationSlotTemplateCreateInput!): InformationSlotTemplate!
  createFieldType(data: FieldTypeCreateInput!): FieldType!
  createState(data: StateCreateInput!): State!
  createField(data: FieldCreateInput!): Field!
  updateEntity(data: EntityUpdateInput!, where: EntityWhereUniqueInput!): Entity
  updateStateTransition(data: StateTransitionUpdateInput!, where: StateTransitionWhereUniqueInput!): StateTransition
  updateActionRequirement(data: ActionRequirementUpdateInput!, where: ActionRequirementWhereUniqueInput!): ActionRequirement
  updateHint(data: HintUpdateInput!, where: HintWhereUniqueInput!): Hint
  updatePayloadRequirement(data: PayloadRequirementUpdateInput!, where: PayloadRequirementWhereUniqueInput!): PayloadRequirement
  updateEntityRequirement(data: EntityRequirementUpdateInput!, where: EntityRequirementWhereUniqueInput!): EntityRequirement
  updateInputRequirement(data: InputRequirementUpdateInput!, where: InputRequirementWhereUniqueInput!): InputRequirement
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateGamePlay(data: GamePlayUpdateInput!, where: GamePlayWhereUniqueInput!): GamePlay
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateActionPayload(data: ActionPayloadUpdateInput!, where: ActionPayloadWhereUniqueInput!): ActionPayload
  updateActionRequirementTemplate(data: ActionRequirementTemplateUpdateInput!, where: ActionRequirementTemplateWhereUniqueInput!): ActionRequirementTemplate
  updatePayloadRequirementTemplate(data: PayloadRequirementTemplateUpdateInput!, where: PayloadRequirementTemplateWhereUniqueInput!): PayloadRequirementTemplate
  updateInformationSlot(data: InformationSlotUpdateInput!, where: InformationSlotWhereUniqueInput!): InformationSlot
  updateEntityRequirementTemplate(data: EntityRequirementTemplateUpdateInput!, where: EntityRequirementTemplateWhereUniqueInput!): EntityRequirementTemplate
  updateInputRequirementTemplate(data: InputRequirementTemplateUpdateInput!, where: InputRequirementTemplateWhereUniqueInput!): InputRequirementTemplate
  updateHintTemplate(data: HintTemplateUpdateInput!, where: HintTemplateWhereUniqueInput!): HintTemplate
  updateActionPayloadInputValue(data: ActionPayloadInputValueUpdateInput!, where: ActionPayloadInputValueWhereUniqueInput!): ActionPayloadInputValue
  updateStateTemplate(data: StateTemplateUpdateInput!, where: StateTemplateWhereUniqueInput!): StateTemplate
  updateFieldTemplate(data: FieldTemplateUpdateInput!, where: FieldTemplateWhereUniqueInput!): FieldTemplate
  updateStateTransitionTemplate(data: StateTransitionTemplateUpdateInput!, where: StateTransitionTemplateWhereUniqueInput!): StateTransitionTemplate
  updateEntityTemplate(data: EntityTemplateUpdateInput!, where: EntityTemplateWhereUniqueInput!): EntityTemplate
  updateInformationSlotTemplate(data: InformationSlotTemplateUpdateInput!, where: InformationSlotTemplateWhereUniqueInput!): InformationSlotTemplate
  updateFieldType(data: FieldTypeUpdateInput!, where: FieldTypeWhereUniqueInput!): FieldType
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateField(data: FieldUpdateInput!, where: FieldWhereUniqueInput!): Field
  deleteEntity(where: EntityWhereUniqueInput!): Entity
  deleteStateTransition(where: StateTransitionWhereUniqueInput!): StateTransition
  deleteActionRequirement(where: ActionRequirementWhereUniqueInput!): ActionRequirement
  deleteHint(where: HintWhereUniqueInput!): Hint
  deletePayloadRequirement(where: PayloadRequirementWhereUniqueInput!): PayloadRequirement
  deleteEntityRequirement(where: EntityRequirementWhereUniqueInput!): EntityRequirement
  deleteInputRequirement(where: InputRequirementWhereUniqueInput!): InputRequirement
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGamePlay(where: GamePlayWhereUniqueInput!): GamePlay
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActionPayload(where: ActionPayloadWhereUniqueInput!): ActionPayload
  deleteActionRequirementTemplate(where: ActionRequirementTemplateWhereUniqueInput!): ActionRequirementTemplate
  deletePayloadRequirementTemplate(where: PayloadRequirementTemplateWhereUniqueInput!): PayloadRequirementTemplate
  deleteInformationSlot(where: InformationSlotWhereUniqueInput!): InformationSlot
  deleteEntityRequirementTemplate(where: EntityRequirementTemplateWhereUniqueInput!): EntityRequirementTemplate
  deleteInputRequirementTemplate(where: InputRequirementTemplateWhereUniqueInput!): InputRequirementTemplate
  deleteHintTemplate(where: HintTemplateWhereUniqueInput!): HintTemplate
  deleteActionPayloadInputValue(where: ActionPayloadInputValueWhereUniqueInput!): ActionPayloadInputValue
  deleteStateTemplate(where: StateTemplateWhereUniqueInput!): StateTemplate
  deleteFieldTemplate(where: FieldTemplateWhereUniqueInput!): FieldTemplate
  deleteStateTransitionTemplate(where: StateTransitionTemplateWhereUniqueInput!): StateTransitionTemplate
  deleteEntityTemplate(where: EntityTemplateWhereUniqueInput!): EntityTemplate
  deleteInformationSlotTemplate(where: InformationSlotTemplateWhereUniqueInput!): InformationSlotTemplate
  deleteFieldType(where: FieldTypeWhereUniqueInput!): FieldType
  deleteState(where: StateWhereUniqueInput!): State
  deleteField(where: FieldWhereUniqueInput!): Field
  upsertEntity(where: EntityWhereUniqueInput!, create: EntityCreateInput!, update: EntityUpdateInput!): Entity!
  upsertStateTransition(where: StateTransitionWhereUniqueInput!, create: StateTransitionCreateInput!, update: StateTransitionUpdateInput!): StateTransition!
  upsertActionRequirement(where: ActionRequirementWhereUniqueInput!, create: ActionRequirementCreateInput!, update: ActionRequirementUpdateInput!): ActionRequirement!
  upsertHint(where: HintWhereUniqueInput!, create: HintCreateInput!, update: HintUpdateInput!): Hint!
  upsertPayloadRequirement(where: PayloadRequirementWhereUniqueInput!, create: PayloadRequirementCreateInput!, update: PayloadRequirementUpdateInput!): PayloadRequirement!
  upsertEntityRequirement(where: EntityRequirementWhereUniqueInput!, create: EntityRequirementCreateInput!, update: EntityRequirementUpdateInput!): EntityRequirement!
  upsertInputRequirement(where: InputRequirementWhereUniqueInput!, create: InputRequirementCreateInput!, update: InputRequirementUpdateInput!): InputRequirement!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertGamePlay(where: GamePlayWhereUniqueInput!, create: GamePlayCreateInput!, update: GamePlayUpdateInput!): GamePlay!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAction(where: ActionWhereUniqueInput!, create: ActionCreateInput!, update: ActionUpdateInput!): Action!
  upsertActionPayload(where: ActionPayloadWhereUniqueInput!, create: ActionPayloadCreateInput!, update: ActionPayloadUpdateInput!): ActionPayload!
  upsertActionRequirementTemplate(where: ActionRequirementTemplateWhereUniqueInput!, create: ActionRequirementTemplateCreateInput!, update: ActionRequirementTemplateUpdateInput!): ActionRequirementTemplate!
  upsertPayloadRequirementTemplate(where: PayloadRequirementTemplateWhereUniqueInput!, create: PayloadRequirementTemplateCreateInput!, update: PayloadRequirementTemplateUpdateInput!): PayloadRequirementTemplate!
  upsertInformationSlot(where: InformationSlotWhereUniqueInput!, create: InformationSlotCreateInput!, update: InformationSlotUpdateInput!): InformationSlot!
  upsertEntityRequirementTemplate(where: EntityRequirementTemplateWhereUniqueInput!, create: EntityRequirementTemplateCreateInput!, update: EntityRequirementTemplateUpdateInput!): EntityRequirementTemplate!
  upsertInputRequirementTemplate(where: InputRequirementTemplateWhereUniqueInput!, create: InputRequirementTemplateCreateInput!, update: InputRequirementTemplateUpdateInput!): InputRequirementTemplate!
  upsertHintTemplate(where: HintTemplateWhereUniqueInput!, create: HintTemplateCreateInput!, update: HintTemplateUpdateInput!): HintTemplate!
  upsertActionPayloadInputValue(where: ActionPayloadInputValueWhereUniqueInput!, create: ActionPayloadInputValueCreateInput!, update: ActionPayloadInputValueUpdateInput!): ActionPayloadInputValue!
  upsertStateTemplate(where: StateTemplateWhereUniqueInput!, create: StateTemplateCreateInput!, update: StateTemplateUpdateInput!): StateTemplate!
  upsertFieldTemplate(where: FieldTemplateWhereUniqueInput!, create: FieldTemplateCreateInput!, update: FieldTemplateUpdateInput!): FieldTemplate!
  upsertStateTransitionTemplate(where: StateTransitionTemplateWhereUniqueInput!, create: StateTransitionTemplateCreateInput!, update: StateTransitionTemplateUpdateInput!): StateTransitionTemplate!
  upsertEntityTemplate(where: EntityTemplateWhereUniqueInput!, create: EntityTemplateCreateInput!, update: EntityTemplateUpdateInput!): EntityTemplate!
  upsertInformationSlotTemplate(where: InformationSlotTemplateWhereUniqueInput!, create: InformationSlotTemplateCreateInput!, update: InformationSlotTemplateUpdateInput!): InformationSlotTemplate!
  upsertFieldType(where: FieldTypeWhereUniqueInput!, create: FieldTypeCreateInput!, update: FieldTypeUpdateInput!): FieldType!
  upsertState(where: StateWhereUniqueInput!, create: StateCreateInput!, update: StateUpdateInput!): State!
  upsertField(where: FieldWhereUniqueInput!, create: FieldCreateInput!, update: FieldUpdateInput!): Field!
  updateManyEntities(data: EntityUpdateManyMutationInput!, where: EntityWhereInput): BatchPayload!
  updateManyActionRequirements(data: ActionRequirementUpdateManyMutationInput!, where: ActionRequirementWhereInput): BatchPayload!
  updateManyHints(data: HintUpdateManyMutationInput!, where: HintWhereInput): BatchPayload!
  updateManyInputRequirements(data: InputRequirementUpdateManyMutationInput!, where: InputRequirementWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyActions(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): BatchPayload!
  updateManyActionRequirementTemplates(data: ActionRequirementTemplateUpdateManyMutationInput!, where: ActionRequirementTemplateWhereInput): BatchPayload!
  updateManyInformationSlots(data: InformationSlotUpdateManyMutationInput!, where: InformationSlotWhereInput): BatchPayload!
  updateManyInputRequirementTemplates(data: InputRequirementTemplateUpdateManyMutationInput!, where: InputRequirementTemplateWhereInput): BatchPayload!
  updateManyHintTemplates(data: HintTemplateUpdateManyMutationInput!, where: HintTemplateWhereInput): BatchPayload!
  updateManyActionPayloadInputValues(data: ActionPayloadInputValueUpdateManyMutationInput!, where: ActionPayloadInputValueWhereInput): BatchPayload!
  updateManyStateTemplates(data: StateTemplateUpdateManyMutationInput!, where: StateTemplateWhereInput): BatchPayload!
  updateManyFieldTemplates(data: FieldTemplateUpdateManyMutationInput!, where: FieldTemplateWhereInput): BatchPayload!
  updateManyEntityTemplates(data: EntityTemplateUpdateManyMutationInput!, where: EntityTemplateWhereInput): BatchPayload!
  updateManyInformationSlotTemplates(data: InformationSlotTemplateUpdateManyMutationInput!, where: InformationSlotTemplateWhereInput): BatchPayload!
  updateManyFieldTypes(data: FieldTypeUpdateManyMutationInput!, where: FieldTypeWhereInput): BatchPayload!
  updateManyStates(data: StateUpdateManyMutationInput!, where: StateWhereInput): BatchPayload!
  updateManyFields(data: FieldUpdateManyMutationInput!, where: FieldWhereInput): BatchPayload!
  deleteManyEntities(where: EntityWhereInput): BatchPayload!
  deleteManyStateTransitions(where: StateTransitionWhereInput): BatchPayload!
  deleteManyActionRequirements(where: ActionRequirementWhereInput): BatchPayload!
  deleteManyHints(where: HintWhereInput): BatchPayload!
  deleteManyPayloadRequirements(where: PayloadRequirementWhereInput): BatchPayload!
  deleteManyEntityRequirements(where: EntityRequirementWhereInput): BatchPayload!
  deleteManyInputRequirements(where: InputRequirementWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyGamePlays(where: GamePlayWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyActions(where: ActionWhereInput): BatchPayload!
  deleteManyActionPayloads(where: ActionPayloadWhereInput): BatchPayload!
  deleteManyActionRequirementTemplates(where: ActionRequirementTemplateWhereInput): BatchPayload!
  deleteManyPayloadRequirementTemplates(where: PayloadRequirementTemplateWhereInput): BatchPayload!
  deleteManyInformationSlots(where: InformationSlotWhereInput): BatchPayload!
  deleteManyEntityRequirementTemplates(where: EntityRequirementTemplateWhereInput): BatchPayload!
  deleteManyInputRequirementTemplates(where: InputRequirementTemplateWhereInput): BatchPayload!
  deleteManyHintTemplates(where: HintTemplateWhereInput): BatchPayload!
  deleteManyActionPayloadInputValues(where: ActionPayloadInputValueWhereInput): BatchPayload!
  deleteManyStateTemplates(where: StateTemplateWhereInput): BatchPayload!
  deleteManyFieldTemplates(where: FieldTemplateWhereInput): BatchPayload!
  deleteManyStateTransitionTemplates(where: StateTransitionTemplateWhereInput): BatchPayload!
  deleteManyEntityTemplates(where: EntityTemplateWhereInput): BatchPayload!
  deleteManyInformationSlotTemplates(where: InformationSlotTemplateWhereInput): BatchPayload!
  deleteManyFieldTypes(where: FieldTypeWhereInput): BatchPayload!
  deleteManyStates(where: StateWhereInput): BatchPayload!
  deleteManyFields(where: FieldWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PayloadRequirement implements Node {
  id: ID!
  template: PayloadRequirementTemplate
  requiredEntity: EntityRequirement
  requiredInputs(where: InputRequirementWhereInput, orderBy: InputRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InputRequirement!]
  actionRequirement: ActionRequirement!
}

"""A connection to a list of items."""
type PayloadRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayloadRequirementEdge]!
  aggregate: AggregatePayloadRequirement!
}

input PayloadRequirementCreateInput {
  template: PayloadRequirementTemplateCreateOneInput
  requiredEntity: EntityRequirementCreateOneWithoutPayloadInput
  requiredInputs: InputRequirementCreateManyWithoutPayloadInput
  actionRequirement: ActionRequirementCreateOneWithoutPayloadInput!
}

input PayloadRequirementCreateOneWithoutActionRequirementInput {
  create: PayloadRequirementCreateWithoutActionRequirementInput
  connect: PayloadRequirementWhereUniqueInput
}

input PayloadRequirementCreateOneWithoutRequiredEntityInput {
  create: PayloadRequirementCreateWithoutRequiredEntityInput
  connect: PayloadRequirementWhereUniqueInput
}

input PayloadRequirementCreateOneWithoutRequiredInputsInput {
  create: PayloadRequirementCreateWithoutRequiredInputsInput
  connect: PayloadRequirementWhereUniqueInput
}

input PayloadRequirementCreateWithoutActionRequirementInput {
  template: PayloadRequirementTemplateCreateOneInput
  requiredEntity: EntityRequirementCreateOneWithoutPayloadInput
  requiredInputs: InputRequirementCreateManyWithoutPayloadInput
}

input PayloadRequirementCreateWithoutRequiredEntityInput {
  template: PayloadRequirementTemplateCreateOneInput
  requiredInputs: InputRequirementCreateManyWithoutPayloadInput
  actionRequirement: ActionRequirementCreateOneWithoutPayloadInput!
}

input PayloadRequirementCreateWithoutRequiredInputsInput {
  template: PayloadRequirementTemplateCreateOneInput
  requiredEntity: EntityRequirementCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementCreateOneWithoutPayloadInput!
}

"""An edge in a connection."""
type PayloadRequirementEdge {
  """The item at the end of the edge."""
  node: PayloadRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PayloadRequirementOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PayloadRequirementPreviousValues {
  id: ID!
}

type PayloadRequirementSubscriptionPayload {
  mutation: MutationType!
  node: PayloadRequirement
  updatedFields: [String!]
  previousValues: PayloadRequirementPreviousValues
}

input PayloadRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayloadRequirementWhereInput
}

type PayloadRequirementTemplate implements Node {
  id: ID!
  requiredEntity: EntityRequirementTemplate
  requiredInputs(where: InputRequirementTemplateWhereInput, orderBy: InputRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InputRequirementTemplate!]
  actionRequirement: ActionRequirementTemplate!
}

"""A connection to a list of items."""
type PayloadRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayloadRequirementTemplateEdge]!
  aggregate: AggregatePayloadRequirementTemplate!
}

input PayloadRequirementTemplateCreateInput {
  requiredEntity: EntityRequirementTemplateCreateOneWithoutPayloadInput
  requiredInputs: InputRequirementTemplateCreateManyWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateCreateOneWithoutPayloadInput!
}

input PayloadRequirementTemplateCreateOneInput {
  create: PayloadRequirementTemplateCreateInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateOneWithoutActionRequirementInput {
  create: PayloadRequirementTemplateCreateWithoutActionRequirementInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateOneWithoutRequiredEntityInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredEntityInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateOneWithoutRequiredInputsInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredInputsInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateWithoutActionRequirementInput {
  requiredEntity: EntityRequirementTemplateCreateOneWithoutPayloadInput
  requiredInputs: InputRequirementTemplateCreateManyWithoutPayloadInput
}

input PayloadRequirementTemplateCreateWithoutRequiredEntityInput {
  requiredInputs: InputRequirementTemplateCreateManyWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateCreateOneWithoutPayloadInput!
}

input PayloadRequirementTemplateCreateWithoutRequiredInputsInput {
  requiredEntity: EntityRequirementTemplateCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateCreateOneWithoutPayloadInput!
}

"""An edge in a connection."""
type PayloadRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: PayloadRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PayloadRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PayloadRequirementTemplatePreviousValues {
  id: ID!
}

type PayloadRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: PayloadRequirementTemplate
  updatedFields: [String!]
  previousValues: PayloadRequirementTemplatePreviousValues
}

input PayloadRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayloadRequirementTemplateWhereInput
}

input PayloadRequirementTemplateUpdateDataInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  requiredInputs: InputRequirementTemplateUpdateManyWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  requiredInputs: InputRequirementTemplateUpdateManyWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateOneInput {
  create: PayloadRequirementTemplateCreateInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementTemplateUpdateDataInput
  upsert: PayloadRequirementTemplateUpsertNestedInput
}

input PayloadRequirementTemplateUpdateOneRequiredWithoutRequiredEntityInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredEntityInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  update: PayloadRequirementTemplateUpdateWithoutRequiredEntityDataInput
  upsert: PayloadRequirementTemplateUpsertWithoutRequiredEntityInput
}

input PayloadRequirementTemplateUpdateOneRequiredWithoutRequiredInputsInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredInputsInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  update: PayloadRequirementTemplateUpdateWithoutRequiredInputsDataInput
  upsert: PayloadRequirementTemplateUpsertWithoutRequiredInputsInput
}

input PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput {
  create: PayloadRequirementTemplateCreateWithoutActionRequirementInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementTemplateUpdateWithoutActionRequirementDataInput
  upsert: PayloadRequirementTemplateUpsertWithoutActionRequirementInput
}

input PayloadRequirementTemplateUpdateWithoutActionRequirementDataInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  requiredInputs: InputRequirementTemplateUpdateManyWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateWithoutRequiredEntityDataInput {
  requiredInputs: InputRequirementTemplateUpdateManyWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateWithoutRequiredInputsDataInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpsertNestedInput {
  update: PayloadRequirementTemplateUpdateDataInput!
  create: PayloadRequirementTemplateCreateInput!
}

input PayloadRequirementTemplateUpsertWithoutActionRequirementInput {
  update: PayloadRequirementTemplateUpdateWithoutActionRequirementDataInput!
  create: PayloadRequirementTemplateCreateWithoutActionRequirementInput!
}

input PayloadRequirementTemplateUpsertWithoutRequiredEntityInput {
  update: PayloadRequirementTemplateUpdateWithoutRequiredEntityDataInput!
  create: PayloadRequirementTemplateCreateWithoutRequiredEntityInput!
}

input PayloadRequirementTemplateUpsertWithoutRequiredInputsInput {
  update: PayloadRequirementTemplateUpdateWithoutRequiredInputsDataInput!
  create: PayloadRequirementTemplateCreateWithoutRequiredInputsInput!
}

input PayloadRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  requiredEntity: EntityRequirementTemplateWhereInput
  requiredInputs_every: InputRequirementTemplateWhereInput
  requiredInputs_some: InputRequirementTemplateWhereInput
  requiredInputs_none: InputRequirementTemplateWhereInput
  actionRequirement: ActionRequirementTemplateWhereInput
}

input PayloadRequirementTemplateWhereUniqueInput {
  id: ID
}

input PayloadRequirementUpdateInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredEntity: EntityRequirementUpdateOneWithoutPayloadInput
  requiredInputs: InputRequirementUpdateManyWithoutPayloadInput
  actionRequirement: ActionRequirementUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementUpdateOneRequiredWithoutRequiredEntityInput {
  create: PayloadRequirementCreateWithoutRequiredEntityInput
  connect: PayloadRequirementWhereUniqueInput
  update: PayloadRequirementUpdateWithoutRequiredEntityDataInput
  upsert: PayloadRequirementUpsertWithoutRequiredEntityInput
}

input PayloadRequirementUpdateOneRequiredWithoutRequiredInputsInput {
  create: PayloadRequirementCreateWithoutRequiredInputsInput
  connect: PayloadRequirementWhereUniqueInput
  update: PayloadRequirementUpdateWithoutRequiredInputsDataInput
  upsert: PayloadRequirementUpsertWithoutRequiredInputsInput
}

input PayloadRequirementUpdateOneWithoutActionRequirementInput {
  create: PayloadRequirementCreateWithoutActionRequirementInput
  connect: PayloadRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementUpdateWithoutActionRequirementDataInput
  upsert: PayloadRequirementUpsertWithoutActionRequirementInput
}

input PayloadRequirementUpdateWithoutActionRequirementDataInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredEntity: EntityRequirementUpdateOneWithoutPayloadInput
  requiredInputs: InputRequirementUpdateManyWithoutPayloadInput
}

input PayloadRequirementUpdateWithoutRequiredEntityDataInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredInputs: InputRequirementUpdateManyWithoutPayloadInput
  actionRequirement: ActionRequirementUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementUpdateWithoutRequiredInputsDataInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredEntity: EntityRequirementUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementUpsertWithoutActionRequirementInput {
  update: PayloadRequirementUpdateWithoutActionRequirementDataInput!
  create: PayloadRequirementCreateWithoutActionRequirementInput!
}

input PayloadRequirementUpsertWithoutRequiredEntityInput {
  update: PayloadRequirementUpdateWithoutRequiredEntityDataInput!
  create: PayloadRequirementCreateWithoutRequiredEntityInput!
}

input PayloadRequirementUpsertWithoutRequiredInputsInput {
  update: PayloadRequirementUpdateWithoutRequiredInputsDataInput!
  create: PayloadRequirementCreateWithoutRequiredInputsInput!
}

input PayloadRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  template: PayloadRequirementTemplateWhereInput
  requiredEntity: EntityRequirementWhereInput
  requiredInputs_every: InputRequirementWhereInput
  requiredInputs_some: InputRequirementWhereInput
  requiredInputs_none: InputRequirementWhereInput
  actionRequirement: ActionRequirementWhereInput
}

input PayloadRequirementWhereUniqueInput {
  id: ID
}

enum PrivacyType {
  PRIVATE
  PUBLIC
}

type Query {
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity]!
  stateTransitions(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition]!
  actionRequirements(where: ActionRequirementWhereInput, orderBy: ActionRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirement]!
  hints(where: HintWhereInput, orderBy: HintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hint]!
  payloadRequirements(where: PayloadRequirementWhereInput, orderBy: PayloadRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayloadRequirement]!
  entityRequirements(where: EntityRequirementWhereInput, orderBy: EntityRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityRequirement]!
  inputRequirements(where: InputRequirementWhereInput, orderBy: InputRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InputRequirement]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamePlays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action]!
  actionPayloads(where: ActionPayloadWhereInput, orderBy: ActionPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionPayload]!
  actionRequirementTemplates(where: ActionRequirementTemplateWhereInput, orderBy: ActionRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirementTemplate]!
  payloadRequirementTemplates(where: PayloadRequirementTemplateWhereInput, orderBy: PayloadRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayloadRequirementTemplate]!
  informationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot]!
  entityRequirementTemplates(where: EntityRequirementTemplateWhereInput, orderBy: EntityRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityRequirementTemplate]!
  inputRequirementTemplates(where: InputRequirementTemplateWhereInput, orderBy: InputRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InputRequirementTemplate]!
  hintTemplates(where: HintTemplateWhereInput, orderBy: HintTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HintTemplate]!
  actionPayloadInputValues(where: ActionPayloadInputValueWhereInput, orderBy: ActionPayloadInputValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionPayloadInputValue]!
  stateTemplates(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate]!
  fieldTemplates(where: FieldTemplateWhereInput, orderBy: FieldTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldTemplate]!
  stateTransitionTemplates(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransitionTemplate]!
  entityTemplates(where: EntityTemplateWhereInput, orderBy: EntityTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityTemplate]!
  informationSlotTemplates(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlotTemplate]!
  fieldTypes(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldType]!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State]!
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Field]!
  entity(where: EntityWhereUniqueInput!): Entity
  stateTransition(where: StateTransitionWhereUniqueInput!): StateTransition
  actionRequirement(where: ActionRequirementWhereUniqueInput!): ActionRequirement
  hint(where: HintWhereUniqueInput!): Hint
  payloadRequirement(where: PayloadRequirementWhereUniqueInput!): PayloadRequirement
  entityRequirement(where: EntityRequirementWhereUniqueInput!): EntityRequirement
  inputRequirement(where: InputRequirementWhereUniqueInput!): InputRequirement
  game(where: GameWhereUniqueInput!): Game
  gamePlay(where: GamePlayWhereUniqueInput!): GamePlay
  user(where: UserWhereUniqueInput!): User
  action(where: ActionWhereUniqueInput!): Action
  actionPayload(where: ActionPayloadWhereUniqueInput!): ActionPayload
  actionRequirementTemplate(where: ActionRequirementTemplateWhereUniqueInput!): ActionRequirementTemplate
  payloadRequirementTemplate(where: PayloadRequirementTemplateWhereUniqueInput!): PayloadRequirementTemplate
  informationSlot(where: InformationSlotWhereUniqueInput!): InformationSlot
  entityRequirementTemplate(where: EntityRequirementTemplateWhereUniqueInput!): EntityRequirementTemplate
  inputRequirementTemplate(where: InputRequirementTemplateWhereUniqueInput!): InputRequirementTemplate
  hintTemplate(where: HintTemplateWhereUniqueInput!): HintTemplate
  actionPayloadInputValue(where: ActionPayloadInputValueWhereUniqueInput!): ActionPayloadInputValue
  stateTemplate(where: StateTemplateWhereUniqueInput!): StateTemplate
  fieldTemplate(where: FieldTemplateWhereUniqueInput!): FieldTemplate
  stateTransitionTemplate(where: StateTransitionTemplateWhereUniqueInput!): StateTransitionTemplate
  entityTemplate(where: EntityTemplateWhereUniqueInput!): EntityTemplate
  informationSlotTemplate(where: InformationSlotTemplateWhereUniqueInput!): InformationSlotTemplate
  fieldType(where: FieldTypeWhereUniqueInput!): FieldType
  state(where: StateWhereUniqueInput!): State
  field(where: FieldWhereUniqueInput!): Field
  entitiesConnection(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityConnection!
  stateTransitionsConnection(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateTransitionConnection!
  actionRequirementsConnection(where: ActionRequirementWhereInput, orderBy: ActionRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionRequirementConnection!
  hintsConnection(where: HintWhereInput, orderBy: HintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HintConnection!
  payloadRequirementsConnection(where: PayloadRequirementWhereInput, orderBy: PayloadRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayloadRequirementConnection!
  entityRequirementsConnection(where: EntityRequirementWhereInput, orderBy: EntityRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityRequirementConnection!
  inputRequirementsConnection(where: InputRequirementWhereInput, orderBy: InputRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InputRequirementConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  gamePlaysConnection(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamePlayConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  actionsConnection(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionConnection!
  actionPayloadsConnection(where: ActionPayloadWhereInput, orderBy: ActionPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionPayloadConnection!
  actionRequirementTemplatesConnection(where: ActionRequirementTemplateWhereInput, orderBy: ActionRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionRequirementTemplateConnection!
  payloadRequirementTemplatesConnection(where: PayloadRequirementTemplateWhereInput, orderBy: PayloadRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayloadRequirementTemplateConnection!
  informationSlotsConnection(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InformationSlotConnection!
  entityRequirementTemplatesConnection(where: EntityRequirementTemplateWhereInput, orderBy: EntityRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityRequirementTemplateConnection!
  inputRequirementTemplatesConnection(where: InputRequirementTemplateWhereInput, orderBy: InputRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InputRequirementTemplateConnection!
  hintTemplatesConnection(where: HintTemplateWhereInput, orderBy: HintTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HintTemplateConnection!
  actionPayloadInputValuesConnection(where: ActionPayloadInputValueWhereInput, orderBy: ActionPayloadInputValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionPayloadInputValueConnection!
  stateTemplatesConnection(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateTemplateConnection!
  fieldTemplatesConnection(where: FieldTemplateWhereInput, orderBy: FieldTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldTemplateConnection!
  stateTransitionTemplatesConnection(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateTransitionTemplateConnection!
  entityTemplatesConnection(where: EntityTemplateWhereInput, orderBy: EntityTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityTemplateConnection!
  informationSlotTemplatesConnection(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InformationSlotTemplateConnection!
  fieldTypesConnection(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldTypeConnection!
  statesConnection(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateConnection!
  fieldsConnection(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type State implements Node {
  id: ID!
  template: StateTemplate
  name: String
  description: String
  availableInformationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot!]
  outgoingTransitions(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition!]
  incomingTransitions(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition!]
  unlockedBy(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition!]
  entity: Entity!
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]!
  aggregate: AggregateState!
}

input StateCreateInput {
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateManyInput {
  create: [StateCreateInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateManyWithoutEntityInput {
  create: [StateCreateWithoutEntityInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateManyWithoutUnlockedByInput {
  create: [StateCreateWithoutUnlockedByInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateOneInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

input StateCreateOneWithoutIncomingTransitionsInput {
  create: StateCreateWithoutIncomingTransitionsInput
  connect: StateWhereUniqueInput
}

input StateCreateOneWithoutOutgoingTransitionsInput {
  create: StateCreateWithoutOutgoingTransitionsInput
  connect: StateWhereUniqueInput
}

input StateCreateWithoutEntityInput {
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
}

input StateCreateWithoutIncomingTransitionsInput {
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutOutgoingTransitionsInput {
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutUnlockedByInput {
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  entity: EntityCreateOneWithoutStatesInput!
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge."""
  node: State!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatePreviousValues {
  id: ID!
  name: String
  description: String
}

input StateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type StateSubscriptionPayload {
  mutation: MutationType!
  node: State
  updatedFields: [String!]
  previousValues: StatePreviousValues
}

input StateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateWhereInput
}

type StateTemplate implements Node {
  id: ID!
  name: String
  description: String
  availableInformationSlots(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlotTemplate!]
  outgoingTransitions(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransitionTemplate!]
  incomingTransitions(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransitionTemplate!]
  entity: EntityTemplate!
}

"""A connection to a list of items."""
type StateTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateTemplateEdge]!
  aggregate: AggregateStateTemplate!
}

input StateTemplateCreateInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateManyWithoutAvailableInformationSlotsInput {
  create: [StateTemplateCreateWithoutAvailableInformationSlotsInput!]
  connect: [StateTemplateWhereUniqueInput!]
}

input StateTemplateCreateManyWithoutEntityInput {
  create: [StateTemplateCreateWithoutEntityInput!]
  connect: [StateTemplateWhereUniqueInput!]
}

input StateTemplateCreateOneInput {
  create: StateTemplateCreateInput
  connect: StateTemplateWhereUniqueInput
}

input StateTemplateCreateOneWithoutIncomingTransitionsInput {
  create: StateTemplateCreateWithoutIncomingTransitionsInput
  connect: StateTemplateWhereUniqueInput
}

input StateTemplateCreateOneWithoutOutgoingTransitionsInput {
  create: StateTemplateCreateWithoutOutgoingTransitionsInput
  connect: StateTemplateWhereUniqueInput
}

input StateTemplateCreateWithoutAvailableInformationSlotsInput {
  name: String
  description: String
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateWithoutEntityInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
}

input StateTemplateCreateWithoutIncomingTransitionsInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateWithoutOutgoingTransitionsInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

"""An edge in a connection."""
type StateTemplateEdge {
  """The item at the end of the edge."""
  node: StateTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StateTemplatePreviousValues {
  id: ID!
  name: String
  description: String
}

input StateTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type StateTemplateSubscriptionPayload {
  mutation: MutationType!
  node: StateTemplate
  updatedFields: [String!]
  previousValues: StateTemplatePreviousValues
}

input StateTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateTemplateWhereInput
}

input StateTemplateUpdateDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateManyDataInput {
  name: String
  description: String
}

input StateTemplateUpdateManyMutationInput {
  name: String
  description: String
}

input StateTemplateUpdateManyWithoutAvailableInformationSlotsInput {
  create: [StateTemplateCreateWithoutAvailableInformationSlotsInput!]
  connect: [StateTemplateWhereUniqueInput!]
  disconnect: [StateTemplateWhereUniqueInput!]
  delete: [StateTemplateWhereUniqueInput!]
  update: [StateTemplateUpdateWithWhereUniqueWithoutAvailableInformationSlotsInput!]
  updateMany: [StateTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateTemplateScalarWhereInput!]
  upsert: [StateTemplateUpsertWithWhereUniqueWithoutAvailableInformationSlotsInput!]
}

input StateTemplateUpdateManyWithoutEntityInput {
  create: [StateTemplateCreateWithoutEntityInput!]
  connect: [StateTemplateWhereUniqueInput!]
  disconnect: [StateTemplateWhereUniqueInput!]
  delete: [StateTemplateWhereUniqueInput!]
  update: [StateTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [StateTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateTemplateScalarWhereInput!]
  upsert: [StateTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input StateTemplateUpdateManyWithWhereNestedInput {
  where: StateTemplateScalarWhereInput!
  data: StateTemplateUpdateManyDataInput!
}

input StateTemplateUpdateOneInput {
  create: StateTemplateCreateInput
  connect: StateTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateTemplateUpdateDataInput
  upsert: StateTemplateUpsertNestedInput
}

input StateTemplateUpdateOneRequiredInput {
  create: StateTemplateCreateInput
  connect: StateTemplateWhereUniqueInput
  update: StateTemplateUpdateDataInput
  upsert: StateTemplateUpsertNestedInput
}

input StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput {
  create: StateTemplateCreateWithoutOutgoingTransitionsInput
  connect: StateTemplateWhereUniqueInput
  update: StateTemplateUpdateWithoutOutgoingTransitionsDataInput
  upsert: StateTemplateUpsertWithoutOutgoingTransitionsInput
}

input StateTemplateUpdateOneWithoutIncomingTransitionsInput {
  create: StateTemplateCreateWithoutIncomingTransitionsInput
  connect: StateTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateTemplateUpdateWithoutIncomingTransitionsDataInput
  upsert: StateTemplateUpsertWithoutIncomingTransitionsInput
}

input StateTemplateUpdateWithoutAvailableInformationSlotsDataInput {
  name: String
  description: String
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
}

input StateTemplateUpdateWithoutIncomingTransitionsDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithoutOutgoingTransitionsDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithWhereUniqueWithoutAvailableInformationSlotsInput {
  where: StateTemplateWhereUniqueInput!
  data: StateTemplateUpdateWithoutAvailableInformationSlotsDataInput!
}

input StateTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: StateTemplateWhereUniqueInput!
  data: StateTemplateUpdateWithoutEntityDataInput!
}

input StateTemplateUpsertNestedInput {
  update: StateTemplateUpdateDataInput!
  create: StateTemplateCreateInput!
}

input StateTemplateUpsertWithoutIncomingTransitionsInput {
  update: StateTemplateUpdateWithoutIncomingTransitionsDataInput!
  create: StateTemplateCreateWithoutIncomingTransitionsInput!
}

input StateTemplateUpsertWithoutOutgoingTransitionsInput {
  update: StateTemplateUpdateWithoutOutgoingTransitionsDataInput!
  create: StateTemplateCreateWithoutOutgoingTransitionsInput!
}

input StateTemplateUpsertWithWhereUniqueWithoutAvailableInformationSlotsInput {
  where: StateTemplateWhereUniqueInput!
  update: StateTemplateUpdateWithoutAvailableInformationSlotsDataInput!
  create: StateTemplateCreateWithoutAvailableInformationSlotsInput!
}

input StateTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: StateTemplateWhereUniqueInput!
  update: StateTemplateUpdateWithoutEntityDataInput!
  create: StateTemplateCreateWithoutEntityInput!
}

input StateTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  availableInformationSlots_every: InformationSlotTemplateWhereInput
  availableInformationSlots_some: InformationSlotTemplateWhereInput
  availableInformationSlots_none: InformationSlotTemplateWhereInput
  outgoingTransitions_every: StateTransitionTemplateWhereInput
  outgoingTransitions_some: StateTransitionTemplateWhereInput
  outgoingTransitions_none: StateTransitionTemplateWhereInput
  incomingTransitions_every: StateTransitionTemplateWhereInput
  incomingTransitions_some: StateTransitionTemplateWhereInput
  incomingTransitions_none: StateTransitionTemplateWhereInput
  entity: EntityTemplateWhereInput
}

input StateTemplateWhereUniqueInput {
  id: ID
}

type StateTransition implements Node {
  id: ID!
  template: StateTransitionTemplate
  from: State!
  to: State
  unlocks(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
  requiredActions(where: ActionRequirementWhereInput, orderBy: ActionRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirement!]
}

"""A connection to a list of items."""
type StateTransitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateTransitionEdge]!
  aggregate: AggregateStateTransition!
}

input StateTransitionCreateInput {
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  to: StateCreateOneWithoutIncomingTransitionsInput
  unlocks: StateCreateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

input StateTransitionCreateManyWithoutFromInput {
  create: [StateTransitionCreateWithoutFromInput!]
  connect: [StateTransitionWhereUniqueInput!]
}

input StateTransitionCreateManyWithoutToInput {
  create: [StateTransitionCreateWithoutToInput!]
  connect: [StateTransitionWhereUniqueInput!]
}

input StateTransitionCreateManyWithoutUnlocksInput {
  create: [StateTransitionCreateWithoutUnlocksInput!]
  connect: [StateTransitionWhereUniqueInput!]
}

input StateTransitionCreateOneWithoutRequiredActionsInput {
  create: StateTransitionCreateWithoutRequiredActionsInput
  connect: StateTransitionWhereUniqueInput
}

input StateTransitionCreateWithoutFromInput {
  template: StateTransitionTemplateCreateOneInput
  to: StateCreateOneWithoutIncomingTransitionsInput
  unlocks: StateCreateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

input StateTransitionCreateWithoutRequiredActionsInput {
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  to: StateCreateOneWithoutIncomingTransitionsInput
  unlocks: StateCreateManyWithoutUnlockedByInput
}

input StateTransitionCreateWithoutToInput {
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  unlocks: StateCreateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

input StateTransitionCreateWithoutUnlocksInput {
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  to: StateCreateOneWithoutIncomingTransitionsInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

"""An edge in a connection."""
type StateTransitionEdge {
  """The item at the end of the edge."""
  node: StateTransition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateTransitionOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StateTransitionPreviousValues {
  id: ID!
}

input StateTransitionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type StateTransitionSubscriptionPayload {
  mutation: MutationType!
  node: StateTransition
  updatedFields: [String!]
  previousValues: StateTransitionPreviousValues
}

input StateTransitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateTransitionWhereInput
}

type StateTransitionTemplate implements Node {
  id: ID!
  requiredActions(where: ActionRequirementTemplateWhereInput, orderBy: ActionRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirementTemplate!]
  from: StateTemplate!
  to: StateTemplate
}

"""A connection to a list of items."""
type StateTransitionTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateTransitionTemplateEdge]!
  aggregate: AggregateStateTransitionTemplate!
}

input StateTransitionTemplateCreateInput {
  requiredActions: ActionRequirementTemplateCreateManyWithoutStateTransitionInput
  from: StateTemplateCreateOneWithoutOutgoingTransitionsInput!
  to: StateTemplateCreateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateCreateManyWithoutFromInput {
  create: [StateTransitionTemplateCreateWithoutFromInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
}

input StateTransitionTemplateCreateManyWithoutToInput {
  create: [StateTransitionTemplateCreateWithoutToInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
}

input StateTransitionTemplateCreateOneInput {
  create: StateTransitionTemplateCreateInput
  connect: StateTransitionTemplateWhereUniqueInput
}

input StateTransitionTemplateCreateOneWithoutRequiredActionsInput {
  create: StateTransitionTemplateCreateWithoutRequiredActionsInput
  connect: StateTransitionTemplateWhereUniqueInput
}

input StateTransitionTemplateCreateWithoutFromInput {
  requiredActions: ActionRequirementTemplateCreateManyWithoutStateTransitionInput
  to: StateTemplateCreateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateCreateWithoutRequiredActionsInput {
  from: StateTemplateCreateOneWithoutOutgoingTransitionsInput!
  to: StateTemplateCreateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateCreateWithoutToInput {
  requiredActions: ActionRequirementTemplateCreateManyWithoutStateTransitionInput
  from: StateTemplateCreateOneWithoutOutgoingTransitionsInput!
}

"""An edge in a connection."""
type StateTransitionTemplateEdge {
  """The item at the end of the edge."""
  node: StateTransitionTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateTransitionTemplateOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StateTransitionTemplatePreviousValues {
  id: ID!
}

input StateTransitionTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type StateTransitionTemplateSubscriptionPayload {
  mutation: MutationType!
  node: StateTransitionTemplate
  updatedFields: [String!]
  previousValues: StateTransitionTemplatePreviousValues
}

input StateTransitionTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateTransitionTemplateWhereInput
}

input StateTransitionTemplateUpdateDataInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateManyWithoutFromInput {
  create: [StateTransitionTemplateCreateWithoutFromInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
  disconnect: [StateTransitionTemplateWhereUniqueInput!]
  delete: [StateTransitionTemplateWhereUniqueInput!]
  update: [StateTransitionTemplateUpdateWithWhereUniqueWithoutFromInput!]
  deleteMany: [StateTransitionTemplateScalarWhereInput!]
  upsert: [StateTransitionTemplateUpsertWithWhereUniqueWithoutFromInput!]
}

input StateTransitionTemplateUpdateManyWithoutToInput {
  create: [StateTransitionTemplateCreateWithoutToInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
  disconnect: [StateTransitionTemplateWhereUniqueInput!]
  delete: [StateTransitionTemplateWhereUniqueInput!]
  update: [StateTransitionTemplateUpdateWithWhereUniqueWithoutToInput!]
  deleteMany: [StateTransitionTemplateScalarWhereInput!]
  upsert: [StateTransitionTemplateUpsertWithWhereUniqueWithoutToInput!]
}

input StateTransitionTemplateUpdateOneInput {
  create: StateTransitionTemplateCreateInput
  connect: StateTransitionTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateTransitionTemplateUpdateDataInput
  upsert: StateTransitionTemplateUpsertNestedInput
}

input StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput {
  create: StateTransitionTemplateCreateWithoutRequiredActionsInput
  connect: StateTransitionTemplateWhereUniqueInput
  update: StateTransitionTemplateUpdateWithoutRequiredActionsDataInput
  upsert: StateTransitionTemplateUpsertWithoutRequiredActionsInput
}

input StateTransitionTemplateUpdateWithoutFromDataInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateWithoutRequiredActionsDataInput {
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateWithoutToDataInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
}

input StateTransitionTemplateUpdateWithWhereUniqueWithoutFromInput {
  where: StateTransitionTemplateWhereUniqueInput!
  data: StateTransitionTemplateUpdateWithoutFromDataInput!
}

input StateTransitionTemplateUpdateWithWhereUniqueWithoutToInput {
  where: StateTransitionTemplateWhereUniqueInput!
  data: StateTransitionTemplateUpdateWithoutToDataInput!
}

input StateTransitionTemplateUpsertNestedInput {
  update: StateTransitionTemplateUpdateDataInput!
  create: StateTransitionTemplateCreateInput!
}

input StateTransitionTemplateUpsertWithoutRequiredActionsInput {
  update: StateTransitionTemplateUpdateWithoutRequiredActionsDataInput!
  create: StateTransitionTemplateCreateWithoutRequiredActionsInput!
}

input StateTransitionTemplateUpsertWithWhereUniqueWithoutFromInput {
  where: StateTransitionTemplateWhereUniqueInput!
  update: StateTransitionTemplateUpdateWithoutFromDataInput!
  create: StateTransitionTemplateCreateWithoutFromInput!
}

input StateTransitionTemplateUpsertWithWhereUniqueWithoutToInput {
  where: StateTransitionTemplateWhereUniqueInput!
  update: StateTransitionTemplateUpdateWithoutToDataInput!
  create: StateTransitionTemplateCreateWithoutToInput!
}

input StateTransitionTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  requiredActions_every: ActionRequirementTemplateWhereInput
  requiredActions_some: ActionRequirementTemplateWhereInput
  requiredActions_none: ActionRequirementTemplateWhereInput
  from: StateTemplateWhereInput
  to: StateTemplateWhereInput
}

input StateTransitionTemplateWhereUniqueInput {
  id: ID
}

input StateTransitionUpdateInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateManyWithoutFromInput {
  create: [StateTransitionCreateWithoutFromInput!]
  connect: [StateTransitionWhereUniqueInput!]
  disconnect: [StateTransitionWhereUniqueInput!]
  delete: [StateTransitionWhereUniqueInput!]
  update: [StateTransitionUpdateWithWhereUniqueWithoutFromInput!]
  deleteMany: [StateTransitionScalarWhereInput!]
  upsert: [StateTransitionUpsertWithWhereUniqueWithoutFromInput!]
}

input StateTransitionUpdateManyWithoutToInput {
  create: [StateTransitionCreateWithoutToInput!]
  connect: [StateTransitionWhereUniqueInput!]
  disconnect: [StateTransitionWhereUniqueInput!]
  delete: [StateTransitionWhereUniqueInput!]
  update: [StateTransitionUpdateWithWhereUniqueWithoutToInput!]
  deleteMany: [StateTransitionScalarWhereInput!]
  upsert: [StateTransitionUpsertWithWhereUniqueWithoutToInput!]
}

input StateTransitionUpdateManyWithoutUnlocksInput {
  create: [StateTransitionCreateWithoutUnlocksInput!]
  connect: [StateTransitionWhereUniqueInput!]
  disconnect: [StateTransitionWhereUniqueInput!]
  delete: [StateTransitionWhereUniqueInput!]
  update: [StateTransitionUpdateWithWhereUniqueWithoutUnlocksInput!]
  deleteMany: [StateTransitionScalarWhereInput!]
  upsert: [StateTransitionUpsertWithWhereUniqueWithoutUnlocksInput!]
}

input StateTransitionUpdateOneRequiredWithoutRequiredActionsInput {
  create: StateTransitionCreateWithoutRequiredActionsInput
  connect: StateTransitionWhereUniqueInput
  update: StateTransitionUpdateWithoutRequiredActionsDataInput
  upsert: StateTransitionUpsertWithoutRequiredActionsInput
}

input StateTransitionUpdateWithoutFromDataInput {
  template: StateTransitionTemplateUpdateOneInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateWithoutRequiredActionsDataInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
}

input StateTransitionUpdateWithoutToDataInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateWithoutUnlocksDataInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateWithWhereUniqueWithoutFromInput {
  where: StateTransitionWhereUniqueInput!
  data: StateTransitionUpdateWithoutFromDataInput!
}

input StateTransitionUpdateWithWhereUniqueWithoutToInput {
  where: StateTransitionWhereUniqueInput!
  data: StateTransitionUpdateWithoutToDataInput!
}

input StateTransitionUpdateWithWhereUniqueWithoutUnlocksInput {
  where: StateTransitionWhereUniqueInput!
  data: StateTransitionUpdateWithoutUnlocksDataInput!
}

input StateTransitionUpsertWithoutRequiredActionsInput {
  update: StateTransitionUpdateWithoutRequiredActionsDataInput!
  create: StateTransitionCreateWithoutRequiredActionsInput!
}

input StateTransitionUpsertWithWhereUniqueWithoutFromInput {
  where: StateTransitionWhereUniqueInput!
  update: StateTransitionUpdateWithoutFromDataInput!
  create: StateTransitionCreateWithoutFromInput!
}

input StateTransitionUpsertWithWhereUniqueWithoutToInput {
  where: StateTransitionWhereUniqueInput!
  update: StateTransitionUpdateWithoutToDataInput!
  create: StateTransitionCreateWithoutToInput!
}

input StateTransitionUpsertWithWhereUniqueWithoutUnlocksInput {
  where: StateTransitionWhereUniqueInput!
  update: StateTransitionUpdateWithoutUnlocksDataInput!
  create: StateTransitionCreateWithoutUnlocksInput!
}

input StateTransitionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  template: StateTransitionTemplateWhereInput
  from: StateWhereInput
  to: StateWhereInput
  unlocks_every: StateWhereInput
  unlocks_some: StateWhereInput
  unlocks_none: StateWhereInput
  requiredActions_every: ActionRequirementWhereInput
  requiredActions_some: ActionRequirementWhereInput
  requiredActions_none: ActionRequirementWhereInput
}

input StateTransitionWhereUniqueInput {
  id: ID
}

input StateUpdateDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateManyDataInput {
  name: String
  description: String
}

input StateUpdateManyInput {
  create: [StateCreateInput!]
  connect: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueNestedInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueNestedInput!]
}

input StateUpdateManyMutationInput {
  name: String
  description: String
}

input StateUpdateManyWithoutEntityInput {
  create: [StateCreateWithoutEntityInput!]
  connect: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutEntityInput!]
}

input StateUpdateManyWithoutUnlockedByInput {
  create: [StateCreateWithoutUnlockedByInput!]
  connect: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutUnlockedByInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutUnlockedByInput!]
}

input StateUpdateManyWithWhereNestedInput {
  where: StateScalarWhereInput!
  data: StateUpdateManyDataInput!
}

input StateUpdateOneInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateUpdateDataInput
  upsert: StateUpsertNestedInput
}

input StateUpdateOneRequiredInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  update: StateUpdateDataInput
  upsert: StateUpsertNestedInput
}

input StateUpdateOneRequiredWithoutOutgoingTransitionsInput {
  create: StateCreateWithoutOutgoingTransitionsInput
  connect: StateWhereUniqueInput
  update: StateUpdateWithoutOutgoingTransitionsDataInput
  upsert: StateUpsertWithoutOutgoingTransitionsInput
}

input StateUpdateOneWithoutIncomingTransitionsInput {
  create: StateCreateWithoutIncomingTransitionsInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateUpdateWithoutIncomingTransitionsDataInput
  upsert: StateUpsertWithoutIncomingTransitionsInput
}

input StateUpdateWithoutEntityDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
}

input StateUpdateWithoutIncomingTransitionsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutOutgoingTransitionsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutUnlockedByDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithWhereUniqueNestedInput {
  where: StateWhereUniqueInput!
  data: StateUpdateDataInput!
}

input StateUpdateWithWhereUniqueWithoutEntityInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutEntityDataInput!
}

input StateUpdateWithWhereUniqueWithoutUnlockedByInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutUnlockedByDataInput!
}

input StateUpsertNestedInput {
  update: StateUpdateDataInput!
  create: StateCreateInput!
}

input StateUpsertWithoutIncomingTransitionsInput {
  update: StateUpdateWithoutIncomingTransitionsDataInput!
  create: StateCreateWithoutIncomingTransitionsInput!
}

input StateUpsertWithoutOutgoingTransitionsInput {
  update: StateUpdateWithoutOutgoingTransitionsDataInput!
  create: StateCreateWithoutOutgoingTransitionsInput!
}

input StateUpsertWithWhereUniqueNestedInput {
  where: StateWhereUniqueInput!
  update: StateUpdateDataInput!
  create: StateCreateInput!
}

input StateUpsertWithWhereUniqueWithoutEntityInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutEntityDataInput!
  create: StateCreateWithoutEntityInput!
}

input StateUpsertWithWhereUniqueWithoutUnlockedByInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutUnlockedByDataInput!
  create: StateCreateWithoutUnlockedByInput!
}

input StateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  template: StateTemplateWhereInput
  availableInformationSlots_every: InformationSlotWhereInput
  availableInformationSlots_some: InformationSlotWhereInput
  availableInformationSlots_none: InformationSlotWhereInput
  outgoingTransitions_every: StateTransitionWhereInput
  outgoingTransitions_some: StateTransitionWhereInput
  outgoingTransitions_none: StateTransitionWhereInput
  incomingTransitions_every: StateTransitionWhereInput
  incomingTransitions_some: StateTransitionWhereInput
  incomingTransitions_none: StateTransitionWhereInput
  unlockedBy_every: StateTransitionWhereInput
  unlockedBy_some: StateTransitionWhereInput
  unlockedBy_none: StateTransitionWhereInput
  entity: EntityWhereInput
}

input StateWhereUniqueInput {
  id: ID
}

type Subscription {
  entity(where: EntitySubscriptionWhereInput): EntitySubscriptionPayload
  stateTransition(where: StateTransitionSubscriptionWhereInput): StateTransitionSubscriptionPayload
  actionRequirement(where: ActionRequirementSubscriptionWhereInput): ActionRequirementSubscriptionPayload
  hint(where: HintSubscriptionWhereInput): HintSubscriptionPayload
  payloadRequirement(where: PayloadRequirementSubscriptionWhereInput): PayloadRequirementSubscriptionPayload
  entityRequirement(where: EntityRequirementSubscriptionWhereInput): EntityRequirementSubscriptionPayload
  inputRequirement(where: InputRequirementSubscriptionWhereInput): InputRequirementSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  gamePlay(where: GamePlaySubscriptionWhereInput): GamePlaySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  action(where: ActionSubscriptionWhereInput): ActionSubscriptionPayload
  actionPayload(where: ActionPayloadSubscriptionWhereInput): ActionPayloadSubscriptionPayload
  actionRequirementTemplate(where: ActionRequirementTemplateSubscriptionWhereInput): ActionRequirementTemplateSubscriptionPayload
  payloadRequirementTemplate(where: PayloadRequirementTemplateSubscriptionWhereInput): PayloadRequirementTemplateSubscriptionPayload
  informationSlot(where: InformationSlotSubscriptionWhereInput): InformationSlotSubscriptionPayload
  entityRequirementTemplate(where: EntityRequirementTemplateSubscriptionWhereInput): EntityRequirementTemplateSubscriptionPayload
  inputRequirementTemplate(where: InputRequirementTemplateSubscriptionWhereInput): InputRequirementTemplateSubscriptionPayload
  hintTemplate(where: HintTemplateSubscriptionWhereInput): HintTemplateSubscriptionPayload
  actionPayloadInputValue(where: ActionPayloadInputValueSubscriptionWhereInput): ActionPayloadInputValueSubscriptionPayload
  stateTemplate(where: StateTemplateSubscriptionWhereInput): StateTemplateSubscriptionPayload
  fieldTemplate(where: FieldTemplateSubscriptionWhereInput): FieldTemplateSubscriptionPayload
  stateTransitionTemplate(where: StateTransitionTemplateSubscriptionWhereInput): StateTransitionTemplateSubscriptionPayload
  entityTemplate(where: EntityTemplateSubscriptionWhereInput): EntityTemplateSubscriptionPayload
  informationSlotTemplate(where: InformationSlotTemplateSubscriptionWhereInput): InformationSlotTemplateSubscriptionPayload
  fieldType(where: FieldTypeSubscriptionWhereInput): FieldTypeSubscriptionPayload
  state(where: StateSubscriptionWhereInput): StateSubscriptionPayload
  field(where: FieldSubscriptionWhereInput): FieldSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  netlifyUserId: String
  gamesCreated(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  plays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  slug: String!
  netlifyUserId: String
  gamesCreated: GameCreateManyWithoutCreatorInput
  games: GameCreateManyWithoutCooperatorsInput
  plays: GamePlayCreateManyWithoutPlayerInput
}

input UserCreateManyWithoutGamesInput {
  create: [UserCreateWithoutGamesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutGamesCreatedInput {
  create: UserCreateWithoutGamesCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlaysInput {
  create: UserCreateWithoutPlaysInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGamesCreatedInput {
  name: String!
  slug: String!
  netlifyUserId: String
  games: GameCreateManyWithoutCooperatorsInput
  plays: GamePlayCreateManyWithoutPlayerInput
}

input UserCreateWithoutGamesInput {
  name: String!
  slug: String!
  netlifyUserId: String
  gamesCreated: GameCreateManyWithoutCreatorInput
  plays: GamePlayCreateManyWithoutPlayerInput
}

input UserCreateWithoutPlaysInput {
  name: String!
  slug: String!
  netlifyUserId: String
  gamesCreated: GameCreateManyWithoutCreatorInput
  games: GameCreateManyWithoutCooperatorsInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  netlifyUserId_ASC
  netlifyUserId_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  netlifyUserId: String
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  netlifyUserId: String

  """All values that are not equal to given value."""
  netlifyUserId_not: String

  """All values that are contained in given list."""
  netlifyUserId_in: [String!]

  """All values that are not contained in given list."""
  netlifyUserId_not_in: [String!]

  """All values less than the given value."""
  netlifyUserId_lt: String

  """All values less than or equal the given value."""
  netlifyUserId_lte: String

  """All values greater than the given value."""
  netlifyUserId_gt: String

  """All values greater than or equal the given value."""
  netlifyUserId_gte: String

  """All values containing the given string."""
  netlifyUserId_contains: String

  """All values not containing the given string."""
  netlifyUserId_not_contains: String

  """All values starting with the given string."""
  netlifyUserId_starts_with: String

  """All values not starting with the given string."""
  netlifyUserId_not_starts_with: String

  """All values ending with the given string."""
  netlifyUserId_ends_with: String

  """All values not ending with the given string."""
  netlifyUserId_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  slug: String
  netlifyUserId: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  games: GameUpdateManyWithoutCooperatorsInput
  plays: GamePlayUpdateManyWithoutPlayerInput
}

input UserUpdateManyDataInput {
  name: String
  slug: String
  netlifyUserId: String
}

input UserUpdateManyMutationInput {
  name: String
  slug: String
  netlifyUserId: String
}

input UserUpdateManyWithoutGamesInput {
  create: [UserCreateWithoutGamesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGamesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGamesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutGamesCreatedInput {
  create: UserCreateWithoutGamesCreatedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutGamesCreatedDataInput
  upsert: UserUpsertWithoutGamesCreatedInput
}

input UserUpdateOneWithoutPlaysInput {
  create: UserCreateWithoutPlaysInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPlaysDataInput
  upsert: UserUpsertWithoutPlaysInput
}

input UserUpdateWithoutGamesCreatedDataInput {
  name: String
  slug: String
  netlifyUserId: String
  games: GameUpdateManyWithoutCooperatorsInput
  plays: GamePlayUpdateManyWithoutPlayerInput
}

input UserUpdateWithoutGamesDataInput {
  name: String
  slug: String
  netlifyUserId: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  plays: GamePlayUpdateManyWithoutPlayerInput
}

input UserUpdateWithoutPlaysDataInput {
  name: String
  slug: String
  netlifyUserId: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  games: GameUpdateManyWithoutCooperatorsInput
}

input UserUpdateWithWhereUniqueWithoutGamesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGamesDataInput!
}

input UserUpsertWithoutGamesCreatedInput {
  update: UserUpdateWithoutGamesCreatedDataInput!
  create: UserCreateWithoutGamesCreatedInput!
}

input UserUpsertWithoutPlaysInput {
  update: UserUpdateWithoutPlaysDataInput!
  create: UserCreateWithoutPlaysInput!
}

input UserUpsertWithWhereUniqueWithoutGamesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGamesDataInput!
  create: UserCreateWithoutGamesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  netlifyUserId: String

  """All values that are not equal to given value."""
  netlifyUserId_not: String

  """All values that are contained in given list."""
  netlifyUserId_in: [String!]

  """All values that are not contained in given list."""
  netlifyUserId_not_in: [String!]

  """All values less than the given value."""
  netlifyUserId_lt: String

  """All values less than or equal the given value."""
  netlifyUserId_lte: String

  """All values greater than the given value."""
  netlifyUserId_gt: String

  """All values greater than or equal the given value."""
  netlifyUserId_gte: String

  """All values containing the given string."""
  netlifyUserId_contains: String

  """All values not containing the given string."""
  netlifyUserId_not_contains: String

  """All values starting with the given string."""
  netlifyUserId_starts_with: String

  """All values not starting with the given string."""
  netlifyUserId_not_starts_with: String

  """All values ending with the given string."""
  netlifyUserId_ends_with: String

  """All values not ending with the given string."""
  netlifyUserId_not_ends_with: String
  gamesCreated_every: GameWhereInput
  gamesCreated_some: GameWhereInput
  gamesCreated_none: GameWhereInput
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  plays_every: GamePlayWhereInput
  plays_some: GamePlayWhereInput
  plays_none: GamePlayWhereInput
}

input UserWhereUniqueInput {
  id: ID
  slug: String
}

enum ValueType {
  STRING
  NUMBER
  BOOLEAN
  TIMESTAMP
  GEOPOINT
}
