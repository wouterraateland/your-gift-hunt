# source: https://api.yourgifthunt.com/prisma/hunt-api/dev
# timestamp: Wed Jul 03 2019 14:45:53 GMT+0200 (Midden-Europese zomertijd)

enum AccessType {
  NONE
  CODE
}

type Action implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ActionType!
  payload: ActionPayload!
  gamePlay: GamePlay!
}

"""A connection to a list of items."""
type ActionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionEdge]!
  aggregate: AggregateAction!
}

input ActionCreateInput {
  id: ID
  type: ActionType!
  payload: ActionPayloadCreateOneWithoutActionInput!
  gamePlay: GamePlayCreateOneWithoutActionsInput!
}

input ActionCreateManyWithoutGamePlayInput {
  create: [ActionCreateWithoutGamePlayInput!]
  connect: [ActionWhereUniqueInput!]
}

input ActionCreateOneWithoutPayloadInput {
  create: ActionCreateWithoutPayloadInput
  connect: ActionWhereUniqueInput
}

input ActionCreateWithoutGamePlayInput {
  id: ID
  type: ActionType!
  payload: ActionPayloadCreateOneWithoutActionInput!
}

input ActionCreateWithoutPayloadInput {
  id: ID
  type: ActionType!
  gamePlay: GamePlayCreateOneWithoutActionsInput!
}

"""An edge in a connection."""
type ActionEdge {
  """The item at the end of the edge."""
  node: Action!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
}

type ActionPayload implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  source: State
  destination: State
  inputValues(where: ActionPayloadInputValueWhereInput, orderBy: ActionPayloadInputValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionPayloadInputValue!]
  action: Action
}

"""A connection to a list of items."""
type ActionPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPayloadEdge]!
  aggregate: AggregateActionPayload!
}

input ActionPayloadCreateInput {
  id: ID
  source: StateCreateOneInput
  destination: StateCreateOneInput
  inputValues: ActionPayloadInputValueCreateManyInput
  action: ActionCreateOneWithoutPayloadInput
}

input ActionPayloadCreateOneWithoutActionInput {
  create: ActionPayloadCreateWithoutActionInput
  connect: ActionPayloadWhereUniqueInput
}

input ActionPayloadCreateWithoutActionInput {
  id: ID
  source: StateCreateOneInput
  destination: StateCreateOneInput
  inputValues: ActionPayloadInputValueCreateManyInput
}

"""An edge in a connection."""
type ActionPayloadEdge {
  """The item at the end of the edge."""
  node: ActionPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

type ActionPayloadInputValue implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  value: String
}

"""A connection to a list of items."""
type ActionPayloadInputValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPayloadInputValueEdge]!
  aggregate: AggregateActionPayloadInputValue!
}

input ActionPayloadInputValueCreateInput {
  id: ID
  key: String!
  value: String
}

input ActionPayloadInputValueCreateManyInput {
  create: [ActionPayloadInputValueCreateInput!]
  connect: [ActionPayloadInputValueWhereUniqueInput!]
}

"""An edge in a connection."""
type ActionPayloadInputValueEdge {
  """The item at the end of the edge."""
  node: ActionPayloadInputValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionPayloadInputValueOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
}

type ActionPayloadInputValuePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  value: String
}

input ActionPayloadInputValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadInputValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadInputValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadInputValueScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type ActionPayloadInputValueSubscriptionPayload {
  mutation: MutationType!
  node: ActionPayloadInputValue
  updatedFields: [String!]
  previousValues: ActionPayloadInputValuePreviousValues
}

input ActionPayloadInputValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadInputValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadInputValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadInputValueSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionPayloadInputValueWhereInput
}

input ActionPayloadInputValueUpdateDataInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateManyDataInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateManyInput {
  create: [ActionPayloadInputValueCreateInput!]
  connect: [ActionPayloadInputValueWhereUniqueInput!]
  set: [ActionPayloadInputValueWhereUniqueInput!]
  disconnect: [ActionPayloadInputValueWhereUniqueInput!]
  delete: [ActionPayloadInputValueWhereUniqueInput!]
  update: [ActionPayloadInputValueUpdateWithWhereUniqueNestedInput!]
  updateMany: [ActionPayloadInputValueUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionPayloadInputValueScalarWhereInput!]
  upsert: [ActionPayloadInputValueUpsertWithWhereUniqueNestedInput!]
}

input ActionPayloadInputValueUpdateManyMutationInput {
  key: String
  value: String
}

input ActionPayloadInputValueUpdateManyWithWhereNestedInput {
  where: ActionPayloadInputValueScalarWhereInput!
  data: ActionPayloadInputValueUpdateManyDataInput!
}

input ActionPayloadInputValueUpdateWithWhereUniqueNestedInput {
  where: ActionPayloadInputValueWhereUniqueInput!
  data: ActionPayloadInputValueUpdateDataInput!
}

input ActionPayloadInputValueUpsertWithWhereUniqueNestedInput {
  where: ActionPayloadInputValueWhereUniqueInput!
  update: ActionPayloadInputValueUpdateDataInput!
  create: ActionPayloadInputValueCreateInput!
}

input ActionPayloadInputValueWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadInputValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadInputValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadInputValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

input ActionPayloadInputValueWhereUniqueInput {
  id: ID
}

enum ActionPayloadOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ActionPayloadPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ActionPayloadSubscriptionPayload {
  mutation: MutationType!
  node: ActionPayload
  updatedFields: [String!]
  previousValues: ActionPayloadPreviousValues
}

input ActionPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionPayloadWhereInput
}

input ActionPayloadUpdateInput {
  source: StateUpdateOneInput
  destination: StateUpdateOneInput
  inputValues: ActionPayloadInputValueUpdateManyInput
  action: ActionUpdateOneWithoutPayloadInput
}

input ActionPayloadUpdateOneRequiredWithoutActionInput {
  create: ActionPayloadCreateWithoutActionInput
  connect: ActionPayloadWhereUniqueInput
  update: ActionPayloadUpdateWithoutActionDataInput
  upsert: ActionPayloadUpsertWithoutActionInput
}

input ActionPayloadUpdateWithoutActionDataInput {
  source: StateUpdateOneInput
  destination: StateUpdateOneInput
  inputValues: ActionPayloadInputValueUpdateManyInput
}

input ActionPayloadUpsertWithoutActionInput {
  update: ActionPayloadUpdateWithoutActionDataInput!
  create: ActionPayloadCreateWithoutActionInput!
}

input ActionPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionPayloadWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  source: StateWhereInput
  destination: StateWhereInput
  inputValues_every: ActionPayloadInputValueWhereInput
  inputValues_some: ActionPayloadInputValueWhereInput
  inputValues_none: ActionPayloadInputValueWhereInput
  action: ActionWhereInput
}

input ActionPayloadWhereUniqueInput {
  id: ID
}

type ActionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ActionType!
}

type ActionRequirement implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: ActionRequirementTemplate
  name: String
  description: String
  type: ActionType!
  hints(where: HintWhereInput, orderBy: HintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hint!]
  payload: PayloadRequirement
  stateTransition: StateTransition!
}

"""A connection to a list of items."""
type ActionRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionRequirementEdge]!
  aggregate: AggregateActionRequirement!
}

input ActionRequirementCreateInput {
  id: ID
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  hints: HintCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementCreateManyWithoutStateTransitionInput {
  create: [ActionRequirementCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementWhereUniqueInput!]
}

input ActionRequirementCreateOneWithoutHintsInput {
  create: ActionRequirementCreateWithoutHintsInput
  connect: ActionRequirementWhereUniqueInput
}

input ActionRequirementCreateOneWithoutPayloadInput {
  create: ActionRequirementCreateWithoutPayloadInput
  connect: ActionRequirementWhereUniqueInput
}

input ActionRequirementCreateWithoutHintsInput {
  id: ID
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  payload: PayloadRequirementCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementCreateWithoutPayloadInput {
  id: ID
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  hints: HintCreateManyWithoutActionRequirementInput
  stateTransition: StateTransitionCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementCreateWithoutStateTransitionInput {
  id: ID
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateCreateOneInput
  hints: HintCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementCreateOneWithoutActionRequirementInput
}

"""An edge in a connection."""
type ActionRequirementEdge {
  """The item at the end of the edge."""
  node: ActionRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionRequirementOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
}

type ActionRequirementPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  type: ActionType!
}

input ActionRequirementScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
}

type ActionRequirementSubscriptionPayload {
  mutation: MutationType!
  node: ActionRequirement
  updatedFields: [String!]
  previousValues: ActionRequirementPreviousValues
}

input ActionRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionRequirementWhereInput
}

type ActionRequirementTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  type: ActionType!
  hints(where: HintTemplateWhereInput, orderBy: HintTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HintTemplate!]
  payload: PayloadRequirementTemplate
  stateTransition: StateTransitionTemplate!
}

"""A connection to a list of items."""
type ActionRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionRequirementTemplateEdge]!
  aggregate: AggregateActionRequirementTemplate!
}

input ActionRequirementTemplateCreateInput {
  id: ID
  name: String
  description: String
  type: ActionType
  hints: HintTemplateCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementTemplateCreateManyWithoutStateTransitionInput {
  create: [ActionRequirementTemplateCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementTemplateWhereUniqueInput!]
}

input ActionRequirementTemplateCreateOneInput {
  create: ActionRequirementTemplateCreateInput
  connect: ActionRequirementTemplateWhereUniqueInput
}

input ActionRequirementTemplateCreateOneWithoutHintsInput {
  create: ActionRequirementTemplateCreateWithoutHintsInput
  connect: ActionRequirementTemplateWhereUniqueInput
}

input ActionRequirementTemplateCreateOneWithoutPayloadInput {
  create: ActionRequirementTemplateCreateWithoutPayloadInput
  connect: ActionRequirementTemplateWhereUniqueInput
}

input ActionRequirementTemplateCreateWithoutHintsInput {
  id: ID
  name: String
  description: String
  type: ActionType
  payload: PayloadRequirementTemplateCreateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementTemplateCreateWithoutPayloadInput {
  id: ID
  name: String
  description: String
  type: ActionType
  hints: HintTemplateCreateManyWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateCreateOneWithoutRequiredActionsInput!
}

input ActionRequirementTemplateCreateWithoutStateTransitionInput {
  id: ID
  name: String
  description: String
  type: ActionType
  hints: HintTemplateCreateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateCreateOneWithoutActionRequirementInput
}

"""An edge in a connection."""
type ActionRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: ActionRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
}

type ActionRequirementTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  type: ActionType!
}

input ActionRequirementTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
}

type ActionRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: ActionRequirementTemplate
  updatedFields: [String!]
  previousValues: ActionRequirementTemplatePreviousValues
}

input ActionRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionRequirementTemplateWhereInput
}

input ActionRequirementTemplateUpdateDataInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateManyDataInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementTemplateUpdateManyMutationInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementTemplateUpdateManyWithoutStateTransitionInput {
  create: [ActionRequirementTemplateCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementTemplateWhereUniqueInput!]
  set: [ActionRequirementTemplateWhereUniqueInput!]
  disconnect: [ActionRequirementTemplateWhereUniqueInput!]
  delete: [ActionRequirementTemplateWhereUniqueInput!]
  update: [ActionRequirementTemplateUpdateWithWhereUniqueWithoutStateTransitionInput!]
  updateMany: [ActionRequirementTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionRequirementTemplateScalarWhereInput!]
  upsert: [ActionRequirementTemplateUpsertWithWhereUniqueWithoutStateTransitionInput!]
}

input ActionRequirementTemplateUpdateManyWithWhereNestedInput {
  where: ActionRequirementTemplateScalarWhereInput!
  data: ActionRequirementTemplateUpdateManyDataInput!
}

input ActionRequirementTemplateUpdateOneInput {
  create: ActionRequirementTemplateCreateInput
  connect: ActionRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionRequirementTemplateUpdateDataInput
  upsert: ActionRequirementTemplateUpsertNestedInput
}

input ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput {
  create: ActionRequirementTemplateCreateWithoutPayloadInput
  connect: ActionRequirementTemplateWhereUniqueInput
  update: ActionRequirementTemplateUpdateWithoutPayloadDataInput
  upsert: ActionRequirementTemplateUpsertWithoutPayloadInput
}

input ActionRequirementTemplateUpdateOneWithoutHintsInput {
  create: ActionRequirementTemplateCreateWithoutHintsInput
  connect: ActionRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionRequirementTemplateUpdateWithoutHintsDataInput
  upsert: ActionRequirementTemplateUpsertWithoutHintsInput
}

input ActionRequirementTemplateUpdateWithoutHintsDataInput {
  name: String
  description: String
  type: ActionType
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateWithoutPayloadDataInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  stateTransition: StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementTemplateUpdateWithoutStateTransitionDataInput {
  name: String
  description: String
  type: ActionType
  hints: HintTemplateUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput
}

input ActionRequirementTemplateUpdateWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementTemplateWhereUniqueInput!
  data: ActionRequirementTemplateUpdateWithoutStateTransitionDataInput!
}

input ActionRequirementTemplateUpsertNestedInput {
  update: ActionRequirementTemplateUpdateDataInput!
  create: ActionRequirementTemplateCreateInput!
}

input ActionRequirementTemplateUpsertWithoutHintsInput {
  update: ActionRequirementTemplateUpdateWithoutHintsDataInput!
  create: ActionRequirementTemplateCreateWithoutHintsInput!
}

input ActionRequirementTemplateUpsertWithoutPayloadInput {
  update: ActionRequirementTemplateUpdateWithoutPayloadDataInput!
  create: ActionRequirementTemplateCreateWithoutPayloadInput!
}

input ActionRequirementTemplateUpsertWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementTemplateWhereUniqueInput!
  update: ActionRequirementTemplateUpdateWithoutStateTransitionDataInput!
  create: ActionRequirementTemplateCreateWithoutStateTransitionInput!
}

input ActionRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
  hints_every: HintTemplateWhereInput
  hints_some: HintTemplateWhereInput
  hints_none: HintTemplateWhereInput
  payload: PayloadRequirementTemplateWhereInput
  stateTransition: StateTransitionTemplateWhereInput
}

input ActionRequirementTemplateWhereUniqueInput {
  id: ID
}

input ActionRequirementUpdateInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  hints: HintUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementUpdateManyDataInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementUpdateManyMutationInput {
  name: String
  description: String
  type: ActionType
}

input ActionRequirementUpdateManyWithoutStateTransitionInput {
  create: [ActionRequirementCreateWithoutStateTransitionInput!]
  connect: [ActionRequirementWhereUniqueInput!]
  set: [ActionRequirementWhereUniqueInput!]
  disconnect: [ActionRequirementWhereUniqueInput!]
  delete: [ActionRequirementWhereUniqueInput!]
  update: [ActionRequirementUpdateWithWhereUniqueWithoutStateTransitionInput!]
  updateMany: [ActionRequirementUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionRequirementScalarWhereInput!]
  upsert: [ActionRequirementUpsertWithWhereUniqueWithoutStateTransitionInput!]
}

input ActionRequirementUpdateManyWithWhereNestedInput {
  where: ActionRequirementScalarWhereInput!
  data: ActionRequirementUpdateManyDataInput!
}

input ActionRequirementUpdateOneRequiredWithoutPayloadInput {
  create: ActionRequirementCreateWithoutPayloadInput
  connect: ActionRequirementWhereUniqueInput
  update: ActionRequirementUpdateWithoutPayloadDataInput
  upsert: ActionRequirementUpsertWithoutPayloadInput
}

input ActionRequirementUpdateOneWithoutHintsInput {
  create: ActionRequirementCreateWithoutHintsInput
  connect: ActionRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionRequirementUpdateWithoutHintsDataInput
  upsert: ActionRequirementUpsertWithoutHintsInput
}

input ActionRequirementUpdateWithoutHintsDataInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  payload: PayloadRequirementUpdateOneWithoutActionRequirementInput
  stateTransition: StateTransitionUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementUpdateWithoutPayloadDataInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  hints: HintUpdateManyWithoutActionRequirementInput
  stateTransition: StateTransitionUpdateOneRequiredWithoutRequiredActionsInput
}

input ActionRequirementUpdateWithoutStateTransitionDataInput {
  name: String
  description: String
  type: ActionType
  template: ActionRequirementTemplateUpdateOneInput
  hints: HintUpdateManyWithoutActionRequirementInput
  payload: PayloadRequirementUpdateOneWithoutActionRequirementInput
}

input ActionRequirementUpdateWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementWhereUniqueInput!
  data: ActionRequirementUpdateWithoutStateTransitionDataInput!
}

input ActionRequirementUpsertWithoutHintsInput {
  update: ActionRequirementUpdateWithoutHintsDataInput!
  create: ActionRequirementCreateWithoutHintsInput!
}

input ActionRequirementUpsertWithoutPayloadInput {
  update: ActionRequirementUpdateWithoutPayloadDataInput!
  create: ActionRequirementCreateWithoutPayloadInput!
}

input ActionRequirementUpsertWithWhereUniqueWithoutStateTransitionInput {
  where: ActionRequirementWhereUniqueInput!
  update: ActionRequirementUpdateWithoutStateTransitionDataInput!
  create: ActionRequirementCreateWithoutStateTransitionInput!
}

input ActionRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
  template: ActionRequirementTemplateWhereInput
  hints_every: HintWhereInput
  hints_some: HintWhereInput
  hints_none: HintWhereInput
  payload: PayloadRequirementWhereInput
  stateTransition: StateTransitionWhereInput
}

input ActionRequirementWhereUniqueInput {
  id: ID
}

input ActionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
}

type ActionSubscriptionPayload {
  mutation: MutationType!
  node: Action
  updatedFields: [String!]
  previousValues: ActionPreviousValues
}

input ActionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionWhereInput
}

enum ActionType {
  USE
  TARGET_OF_USE
  INPUT
  TRANSFORM
  TRIGGER
  UNLOCK
  IDENTIFY_HELPER
}

input ActionUpdateInput {
  type: ActionType
  payload: ActionPayloadUpdateOneRequiredWithoutActionInput
  gamePlay: GamePlayUpdateOneRequiredWithoutActionsInput
}

input ActionUpdateManyDataInput {
  type: ActionType
}

input ActionUpdateManyMutationInput {
  type: ActionType
}

input ActionUpdateManyWithoutGamePlayInput {
  create: [ActionCreateWithoutGamePlayInput!]
  connect: [ActionWhereUniqueInput!]
  set: [ActionWhereUniqueInput!]
  disconnect: [ActionWhereUniqueInput!]
  delete: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutGamePlayInput!]
  updateMany: [ActionUpdateManyWithWhereNestedInput!]
  deleteMany: [ActionScalarWhereInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutGamePlayInput!]
}

input ActionUpdateManyWithWhereNestedInput {
  where: ActionScalarWhereInput!
  data: ActionUpdateManyDataInput!
}

input ActionUpdateOneWithoutPayloadInput {
  create: ActionCreateWithoutPayloadInput
  connect: ActionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActionUpdateWithoutPayloadDataInput
  upsert: ActionUpsertWithoutPayloadInput
}

input ActionUpdateWithoutGamePlayDataInput {
  type: ActionType
  payload: ActionPayloadUpdateOneRequiredWithoutActionInput
}

input ActionUpdateWithoutPayloadDataInput {
  type: ActionType
  gamePlay: GamePlayUpdateOneRequiredWithoutActionsInput
}

input ActionUpdateWithWhereUniqueWithoutGamePlayInput {
  where: ActionWhereUniqueInput!
  data: ActionUpdateWithoutGamePlayDataInput!
}

input ActionUpsertWithoutPayloadInput {
  update: ActionUpdateWithoutPayloadDataInput!
  create: ActionCreateWithoutPayloadInput!
}

input ActionUpsertWithWhereUniqueWithoutGamePlayInput {
  where: ActionWhereUniqueInput!
  update: ActionUpdateWithoutGamePlayDataInput!
  create: ActionCreateWithoutGamePlayInput!
}

input ActionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: ActionType

  """All values that are not equal to given value."""
  type_not: ActionType

  """All values that are contained in given list."""
  type_in: [ActionType!]

  """All values that are not contained in given list."""
  type_not_in: [ActionType!]
  payload: ActionPayloadWhereInput
  gamePlay: GamePlayWhereInput
}

input ActionWhereUniqueInput {
  id: ID
}

type AggregateAction {
  count: Int!
}

type AggregateActionPayload {
  count: Int!
}

type AggregateActionPayloadInputValue {
  count: Int!
}

type AggregateActionRequirement {
  count: Int!
}

type AggregateActionRequirementTemplate {
  count: Int!
}

type AggregateApiKey {
  count: Int!
}

type AggregateEntity {
  count: Int!
}

type AggregateEntityRequirement {
  count: Int!
}

type AggregateEntityRequirementTemplate {
  count: Int!
}

type AggregateEntityTemplate {
  count: Int!
}

type AggregateEntityTemplateSet {
  count: Int!
}

type AggregateEntrance {
  count: Int!
}

type AggregateEntranceTemplate {
  count: Int!
}

type AggregateField {
  count: Int!
}

type AggregateFieldTemplate {
  count: Int!
}

type AggregateFieldType {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateGamePlay {
  count: Int!
}

type AggregateHint {
  count: Int!
}

type AggregateHintTemplate {
  count: Int!
}

type AggregateInformationSlot {
  count: Int!
}

type AggregateInformationSlotTemplate {
  count: Int!
}

type AggregateInputRequirement {
  count: Int!
}

type AggregateInputRequirementTemplate {
  count: Int!
}

type AggregatePayloadRequirement {
  count: Int!
}

type AggregatePayloadRequirementTemplate {
  count: Int!
}

type AggregatePhysicalPosition {
  count: Int!
}

type AggregatePortal {
  count: Int!
}

type AggregatePortalTemplate {
  count: Int!
}

type AggregatePosition {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateState {
  count: Int!
}

type AggregateStateTemplate {
  count: Int!
}

type AggregateStateTransition {
  count: Int!
}

type AggregateStateTransitionTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type ApiKey implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  type: ApiKeyType!
  allowedHosts: String
  service: Service!
}

"""A connection to a list of items."""
type ApiKeyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApiKeyEdge]!
  aggregate: AggregateApiKey!
}

input ApiKeyCreateInput {
  id: ID
  key: String!
  type: ApiKeyType!
  allowedHosts: String
  service: ServiceCreateOneWithoutApiKeysInput!
}

input ApiKeyCreateManyWithoutServiceInput {
  create: [ApiKeyCreateWithoutServiceInput!]
  connect: [ApiKeyWhereUniqueInput!]
}

input ApiKeyCreateWithoutServiceInput {
  id: ID
  key: String!
  type: ApiKeyType!
  allowedHosts: String
}

"""An edge in a connection."""
type ApiKeyEdge {
  """The item at the end of the edge."""
  node: ApiKey!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ApiKeyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  type_ASC
  type_DESC
  allowedHosts_ASC
  allowedHosts_DESC
}

type ApiKeyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  type: ApiKeyType!
  allowedHosts: String
}

input ApiKeyScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiKeyScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiKeyScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiKeyScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  type: ApiKeyType

  """All values that are not equal to given value."""
  type_not: ApiKeyType

  """All values that are contained in given list."""
  type_in: [ApiKeyType!]

  """All values that are not contained in given list."""
  type_not_in: [ApiKeyType!]
  allowedHosts: String

  """All values that are not equal to given value."""
  allowedHosts_not: String

  """All values that are contained in given list."""
  allowedHosts_in: [String!]

  """All values that are not contained in given list."""
  allowedHosts_not_in: [String!]

  """All values less than the given value."""
  allowedHosts_lt: String

  """All values less than or equal the given value."""
  allowedHosts_lte: String

  """All values greater than the given value."""
  allowedHosts_gt: String

  """All values greater than or equal the given value."""
  allowedHosts_gte: String

  """All values containing the given string."""
  allowedHosts_contains: String

  """All values not containing the given string."""
  allowedHosts_not_contains: String

  """All values starting with the given string."""
  allowedHosts_starts_with: String

  """All values not starting with the given string."""
  allowedHosts_not_starts_with: String

  """All values ending with the given string."""
  allowedHosts_ends_with: String

  """All values not ending with the given string."""
  allowedHosts_not_ends_with: String
}

type ApiKeySubscriptionPayload {
  mutation: MutationType!
  node: ApiKey
  updatedFields: [String!]
  previousValues: ApiKeyPreviousValues
}

input ApiKeySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiKeySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiKeySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiKeySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApiKeyWhereInput
}

enum ApiKeyType {
  CLIENT
  SERVER
}

input ApiKeyUpdateInput {
  key: String
  type: ApiKeyType
  allowedHosts: String
  service: ServiceUpdateOneRequiredWithoutApiKeysInput
}

input ApiKeyUpdateManyDataInput {
  key: String
  type: ApiKeyType
  allowedHosts: String
}

input ApiKeyUpdateManyMutationInput {
  key: String
  type: ApiKeyType
  allowedHosts: String
}

input ApiKeyUpdateManyWithoutServiceInput {
  create: [ApiKeyCreateWithoutServiceInput!]
  connect: [ApiKeyWhereUniqueInput!]
  set: [ApiKeyWhereUniqueInput!]
  disconnect: [ApiKeyWhereUniqueInput!]
  delete: [ApiKeyWhereUniqueInput!]
  update: [ApiKeyUpdateWithWhereUniqueWithoutServiceInput!]
  updateMany: [ApiKeyUpdateManyWithWhereNestedInput!]
  deleteMany: [ApiKeyScalarWhereInput!]
  upsert: [ApiKeyUpsertWithWhereUniqueWithoutServiceInput!]
}

input ApiKeyUpdateManyWithWhereNestedInput {
  where: ApiKeyScalarWhereInput!
  data: ApiKeyUpdateManyDataInput!
}

input ApiKeyUpdateWithoutServiceDataInput {
  key: String
  type: ApiKeyType
  allowedHosts: String
}

input ApiKeyUpdateWithWhereUniqueWithoutServiceInput {
  where: ApiKeyWhereUniqueInput!
  data: ApiKeyUpdateWithoutServiceDataInput!
}

input ApiKeyUpsertWithWhereUniqueWithoutServiceInput {
  where: ApiKeyWhereUniqueInput!
  update: ApiKeyUpdateWithoutServiceDataInput!
  create: ApiKeyCreateWithoutServiceInput!
}

input ApiKeyWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiKeyWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiKeyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiKeyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  type: ApiKeyType

  """All values that are not equal to given value."""
  type_not: ApiKeyType

  """All values that are contained in given list."""
  type_in: [ApiKeyType!]

  """All values that are not contained in given list."""
  type_not_in: [ApiKeyType!]
  allowedHosts: String

  """All values that are not equal to given value."""
  allowedHosts_not: String

  """All values that are contained in given list."""
  allowedHosts_in: [String!]

  """All values that are not contained in given list."""
  allowedHosts_not_in: [String!]

  """All values less than the given value."""
  allowedHosts_lt: String

  """All values less than or equal the given value."""
  allowedHosts_lte: String

  """All values greater than the given value."""
  allowedHosts_gt: String

  """All values greater than or equal the given value."""
  allowedHosts_gte: String

  """All values containing the given string."""
  allowedHosts_contains: String

  """All values not containing the given string."""
  allowedHosts_not_contains: String

  """All values starting with the given string."""
  allowedHosts_starts_with: String

  """All values not starting with the given string."""
  allowedHosts_not_starts_with: String

  """All values ending with the given string."""
  allowedHosts_ends_with: String

  """All values not ending with the given string."""
  allowedHosts_not_ends_with: String
  service: ServiceWhereInput
}

input ApiKeyWhereUniqueInput {
  id: ID
  key: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum ComparatorType {
  EQUAL_TO
  GREATER_THEN
  LESS_THEN
  ELEMENT_OF
}

scalar DateTime

type Entity implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: EntityTemplate
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
  isContainer: Boolean!
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldGroup!]
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
  informationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot!]
  featuredField: FieldGroup
  defaultState: State
  container: Entity
  containedEntities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity!]
  entrances(where: EntranceWhereInput, orderBy: EntranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entrance!]
  portals(where: PortalWhereInput, orderBy: PortalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Portal!]
  graphPosition: Position
  physicalPosition: PhysicalPosition
  game: Game
}

"""A connection to a list of items."""
type EntityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityEdge]!
  aggregate: AggregateEntity!
}

input EntityCreateInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateManyWithoutContainerInput {
  create: [EntityCreateWithoutContainerInput!]
  connect: [EntityWhereUniqueInput!]
}

input EntityCreateManyWithoutGameInput {
  create: [EntityCreateWithoutGameInput!]
  connect: [EntityWhereUniqueInput!]
}

input EntityCreateOneInput {
  create: EntityCreateInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutContainedEntitiesInput {
  create: EntityCreateWithoutContainedEntitiesInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutEntrancesInput {
  create: EntityCreateWithoutEntrancesInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutFieldsInput {
  create: EntityCreateWithoutFieldsInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutInformationSlotsInput {
  create: EntityCreateWithoutInformationSlotsInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutPortalsInput {
  create: EntityCreateWithoutPortalsInput
  connect: EntityWhereUniqueInput
}

input EntityCreateOneWithoutStatesInput {
  create: EntityCreateWithoutStatesInput
  connect: EntityWhereUniqueInput
}

input EntityCreateWithoutContainedEntitiesInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutContainerInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutEntrancesInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutFieldsInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutGameInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
}

input EntityCreateWithoutInformationSlotsInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutPortalsInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  states: StateCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

input EntityCreateWithoutStatesInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateCreateOneInput
  fields: FieldCreateManyWithoutEntityInput
  informationSlots: InformationSlotCreateManyWithoutEntityInput
  featuredField: FieldCreateOneInput
  defaultState: StateCreateOneInput
  container: EntityCreateOneWithoutContainedEntitiesInput
  containedEntities: EntityCreateManyWithoutContainerInput
  entrances: EntranceCreateManyWithoutEntityInput
  portals: PortalCreateManyWithoutEntityInput
  graphPosition: PositionCreateOneInput
  physicalPosition: PhysicalPositionCreateOneInput
  game: GameCreateOneWithoutEntitiesInput
}

"""An edge in a connection."""
type EntityEdge {
  """The item at the end of the edge."""
  node: Entity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isTrigger_ASC
  isTrigger_DESC
  isItem_ASC
  isItem_DESC
  isObject_ASC
  isObject_DESC
  isContainer_ASC
  isContainer_DESC
}

type EntityPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
  isContainer: Boolean!
}

type EntityRequirement implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: EntityRequirementTemplate
  entityState: State!
  payload: PayloadRequirement!
}

"""A connection to a list of items."""
type EntityRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityRequirementEdge]!
  aggregate: AggregateEntityRequirement!
}

input EntityRequirementCreateInput {
  id: ID
  template: EntityRequirementTemplateCreateOneInput
  entityState: StateCreateOneWithoutInvolvedStateRequirementsInput!
  payload: PayloadRequirementCreateOneWithoutRequiredEntityInput!
}

input EntityRequirementCreateManyWithoutEntityStateInput {
  create: [EntityRequirementCreateWithoutEntityStateInput!]
  connect: [EntityRequirementWhereUniqueInput!]
}

input EntityRequirementCreateOneWithoutPayloadInput {
  create: EntityRequirementCreateWithoutPayloadInput
  connect: EntityRequirementWhereUniqueInput
}

input EntityRequirementCreateWithoutEntityStateInput {
  id: ID
  template: EntityRequirementTemplateCreateOneInput
  payload: PayloadRequirementCreateOneWithoutRequiredEntityInput!
}

input EntityRequirementCreateWithoutPayloadInput {
  id: ID
  template: EntityRequirementTemplateCreateOneInput
  entityState: StateCreateOneWithoutInvolvedStateRequirementsInput!
}

"""An edge in a connection."""
type EntityRequirementEdge {
  """The item at the end of the edge."""
  node: EntityRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityRequirementOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EntityRequirementPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EntityRequirementScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type EntityRequirementSubscriptionPayload {
  mutation: MutationType!
  node: EntityRequirement
  updatedFields: [String!]
  previousValues: EntityRequirementPreviousValues
}

input EntityRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityRequirementWhereInput
}

type EntityRequirementTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  entityState: StateTemplate!
  payload: PayloadRequirementTemplate
}

"""A connection to a list of items."""
type EntityRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityRequirementTemplateEdge]!
  aggregate: AggregateEntityRequirementTemplate!
}

input EntityRequirementTemplateCreateInput {
  id: ID
  entityState: StateTemplateCreateOneInput!
  payload: PayloadRequirementTemplateCreateOneWithoutRequiredEntityInput
}

input EntityRequirementTemplateCreateOneInput {
  create: EntityRequirementTemplateCreateInput
  connect: EntityRequirementTemplateWhereUniqueInput
}

input EntityRequirementTemplateCreateOneWithoutPayloadInput {
  create: EntityRequirementTemplateCreateWithoutPayloadInput
  connect: EntityRequirementTemplateWhereUniqueInput
}

input EntityRequirementTemplateCreateWithoutPayloadInput {
  id: ID
  entityState: StateTemplateCreateOneInput!
}

"""An edge in a connection."""
type EntityRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: EntityRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EntityRequirementTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EntityRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: EntityRequirementTemplate
  updatedFields: [String!]
  previousValues: EntityRequirementTemplatePreviousValues
}

input EntityRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityRequirementTemplateWhereInput
}

input EntityRequirementTemplateUpdateDataInput {
  entityState: StateTemplateUpdateOneRequiredInput
  payload: PayloadRequirementTemplateUpdateOneWithoutRequiredEntityInput
}

input EntityRequirementTemplateUpdateInput {
  entityState: StateTemplateUpdateOneRequiredInput
  payload: PayloadRequirementTemplateUpdateOneWithoutRequiredEntityInput
}

input EntityRequirementTemplateUpdateOneInput {
  create: EntityRequirementTemplateCreateInput
  connect: EntityRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityRequirementTemplateUpdateDataInput
  upsert: EntityRequirementTemplateUpsertNestedInput
}

input EntityRequirementTemplateUpdateOneWithoutPayloadInput {
  create: EntityRequirementTemplateCreateWithoutPayloadInput
  connect: EntityRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityRequirementTemplateUpdateWithoutPayloadDataInput
  upsert: EntityRequirementTemplateUpsertWithoutPayloadInput
}

input EntityRequirementTemplateUpdateWithoutPayloadDataInput {
  entityState: StateTemplateUpdateOneRequiredInput
}

input EntityRequirementTemplateUpsertNestedInput {
  update: EntityRequirementTemplateUpdateDataInput!
  create: EntityRequirementTemplateCreateInput!
}

input EntityRequirementTemplateUpsertWithoutPayloadInput {
  update: EntityRequirementTemplateUpdateWithoutPayloadDataInput!
  create: EntityRequirementTemplateCreateWithoutPayloadInput!
}

input EntityRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  entityState: StateTemplateWhereInput
  payload: PayloadRequirementTemplateWhereInput
}

input EntityRequirementTemplateWhereUniqueInput {
  id: ID
}

input EntityRequirementUpdateInput {
  template: EntityRequirementTemplateUpdateOneInput
  entityState: StateUpdateOneRequiredWithoutInvolvedStateRequirementsInput
  payload: PayloadRequirementUpdateOneRequiredWithoutRequiredEntityInput
}

input EntityRequirementUpdateManyWithoutEntityStateInput {
  create: [EntityRequirementCreateWithoutEntityStateInput!]
  connect: [EntityRequirementWhereUniqueInput!]
  set: [EntityRequirementWhereUniqueInput!]
  disconnect: [EntityRequirementWhereUniqueInput!]
  delete: [EntityRequirementWhereUniqueInput!]
  update: [EntityRequirementUpdateWithWhereUniqueWithoutEntityStateInput!]
  deleteMany: [EntityRequirementScalarWhereInput!]
  upsert: [EntityRequirementUpsertWithWhereUniqueWithoutEntityStateInput!]
}

input EntityRequirementUpdateOneWithoutPayloadInput {
  create: EntityRequirementCreateWithoutPayloadInput
  connect: EntityRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityRequirementUpdateWithoutPayloadDataInput
  upsert: EntityRequirementUpsertWithoutPayloadInput
}

input EntityRequirementUpdateWithoutEntityStateDataInput {
  template: EntityRequirementTemplateUpdateOneInput
  payload: PayloadRequirementUpdateOneRequiredWithoutRequiredEntityInput
}

input EntityRequirementUpdateWithoutPayloadDataInput {
  template: EntityRequirementTemplateUpdateOneInput
  entityState: StateUpdateOneRequiredWithoutInvolvedStateRequirementsInput
}

input EntityRequirementUpdateWithWhereUniqueWithoutEntityStateInput {
  where: EntityRequirementWhereUniqueInput!
  data: EntityRequirementUpdateWithoutEntityStateDataInput!
}

input EntityRequirementUpsertWithoutPayloadInput {
  update: EntityRequirementUpdateWithoutPayloadDataInput!
  create: EntityRequirementCreateWithoutPayloadInput!
}

input EntityRequirementUpsertWithWhereUniqueWithoutEntityStateInput {
  where: EntityRequirementWhereUniqueInput!
  update: EntityRequirementUpdateWithoutEntityStateDataInput!
  create: EntityRequirementCreateWithoutEntityStateInput!
}

input EntityRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  template: EntityRequirementTemplateWhereInput
  entityState: StateWhereInput
  payload: PayloadRequirementWhereInput
}

input EntityRequirementWhereUniqueInput {
  id: ID
}

input EntityScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
  isContainer: Boolean

  """All values that are not equal to given value."""
  isContainer_not: Boolean
}

type EntitySubscriptionPayload {
  mutation: MutationType!
  node: Entity
  updatedFields: [String!]
  previousValues: EntityPreviousValues
}

input EntitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntitySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityWhereInput
}

type EntityTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
  isContainer: Boolean!
  fields(where: FieldTemplateWhereInput, orderBy: FieldTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldTemplate!]
  states(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate!]
  informationSlots(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlotTemplate!]
  entrances(where: EntranceTemplateWhereInput, orderBy: EntranceTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntranceTemplate!]
  portals(where: PortalTemplateWhereInput, orderBy: PortalTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PortalTemplate!]
  featuredField: FieldTemplate
  defaultState: StateTemplate
  set: EntityTemplateSet
}

"""A connection to a list of items."""
type EntityTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityTemplateEdge]!
  aggregate: AggregateEntityTemplate!
}

input EntityTemplateCreateInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  entrances: EntranceTemplateCreateManyWithoutEntityTemplateInput
  portals: PortalTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
  set: EntityTemplateSetCreateOneWithoutEntityTemplatesInput
}

input EntityTemplateCreateManyWithoutSetInput {
  create: [EntityTemplateCreateWithoutSetInput!]
  connect: [EntityTemplateWhereUniqueInput!]
}

input EntityTemplateCreateOneInput {
  create: EntityTemplateCreateInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutEntrancesInput {
  create: EntityTemplateCreateWithoutEntrancesInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutFieldsInput {
  create: EntityTemplateCreateWithoutFieldsInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutInformationSlotsInput {
  create: EntityTemplateCreateWithoutInformationSlotsInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutPortalsInput {
  create: EntityTemplateCreateWithoutPortalsInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateOneWithoutStatesInput {
  create: EntityTemplateCreateWithoutStatesInput
  connect: EntityTemplateWhereUniqueInput
}

input EntityTemplateCreateWithoutEntrancesInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  portals: PortalTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
  set: EntityTemplateSetCreateOneWithoutEntityTemplatesInput
}

input EntityTemplateCreateWithoutFieldsInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  entrances: EntranceTemplateCreateManyWithoutEntityTemplateInput
  portals: PortalTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
  set: EntityTemplateSetCreateOneWithoutEntityTemplatesInput
}

input EntityTemplateCreateWithoutInformationSlotsInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  entrances: EntranceTemplateCreateManyWithoutEntityTemplateInput
  portals: PortalTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
  set: EntityTemplateSetCreateOneWithoutEntityTemplatesInput
}

input EntityTemplateCreateWithoutPortalsInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  entrances: EntranceTemplateCreateManyWithoutEntityTemplateInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
  set: EntityTemplateSetCreateOneWithoutEntityTemplatesInput
}

input EntityTemplateCreateWithoutSetInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  states: StateTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  entrances: EntranceTemplateCreateManyWithoutEntityTemplateInput
  portals: PortalTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
}

input EntityTemplateCreateWithoutStatesInput {
  id: ID
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateCreateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateCreateManyWithoutEntityInput
  entrances: EntranceTemplateCreateManyWithoutEntityTemplateInput
  portals: PortalTemplateCreateManyWithoutEntityInput
  featuredField: FieldTemplateCreateOneInput
  defaultState: StateTemplateCreateOneInput
  set: EntityTemplateSetCreateOneWithoutEntityTemplatesInput
}

"""An edge in a connection."""
type EntityTemplateEdge {
  """The item at the end of the edge."""
  node: EntityTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isTrigger_ASC
  isTrigger_DESC
  isItem_ASC
  isItem_DESC
  isObject_ASC
  isObject_DESC
  isContainer_ASC
  isContainer_DESC
}

type EntityTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  isTrigger: Boolean!
  isItem: Boolean!
  isObject: Boolean!
  isContainer: Boolean!
}

input EntityTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
  isContainer: Boolean

  """All values that are not equal to given value."""
  isContainer_not: Boolean
}

type EntityTemplateSet implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  entityTemplates(where: EntityTemplateWhereInput, orderBy: EntityTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityTemplate!]
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  creator: User!
}

"""A connection to a list of items."""
type EntityTemplateSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityTemplateSetEdge]!
  aggregate: AggregateEntityTemplateSet!
}

input EntityTemplateSetCreateInput {
  id: ID
  name: String
  description: String
  entityTemplates: EntityTemplateCreateManyWithoutSetInput
  games: GameCreateManyWithoutEntityTemplateSetsInput
  creator: UserCreateOneWithoutEntityTemplateSetsCreatedInput!
}

input EntityTemplateSetCreateManyWithoutCreatorInput {
  create: [EntityTemplateSetCreateWithoutCreatorInput!]
  connect: [EntityTemplateSetWhereUniqueInput!]
}

input EntityTemplateSetCreateManyWithoutGamesInput {
  create: [EntityTemplateSetCreateWithoutGamesInput!]
  connect: [EntityTemplateSetWhereUniqueInput!]
}

input EntityTemplateSetCreateOneWithoutEntityTemplatesInput {
  create: EntityTemplateSetCreateWithoutEntityTemplatesInput
  connect: EntityTemplateSetWhereUniqueInput
}

input EntityTemplateSetCreateWithoutCreatorInput {
  id: ID
  name: String
  description: String
  entityTemplates: EntityTemplateCreateManyWithoutSetInput
  games: GameCreateManyWithoutEntityTemplateSetsInput
}

input EntityTemplateSetCreateWithoutEntityTemplatesInput {
  id: ID
  name: String
  description: String
  games: GameCreateManyWithoutEntityTemplateSetsInput
  creator: UserCreateOneWithoutEntityTemplateSetsCreatedInput!
}

input EntityTemplateSetCreateWithoutGamesInput {
  id: ID
  name: String
  description: String
  entityTemplates: EntityTemplateCreateManyWithoutSetInput
  creator: UserCreateOneWithoutEntityTemplateSetsCreatedInput!
}

"""An edge in a connection."""
type EntityTemplateSetEdge {
  """The item at the end of the edge."""
  node: EntityTemplateSet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityTemplateSetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type EntityTemplateSetPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input EntityTemplateSetScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateSetScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateSetScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateSetScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type EntityTemplateSetSubscriptionPayload {
  mutation: MutationType!
  node: EntityTemplateSet
  updatedFields: [String!]
  previousValues: EntityTemplateSetPreviousValues
}

input EntityTemplateSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateSetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityTemplateSetWhereInput
}

input EntityTemplateSetUpdateInput {
  name: String
  description: String
  entityTemplates: EntityTemplateUpdateManyWithoutSetInput
  games: GameUpdateManyWithoutEntityTemplateSetsInput
  creator: UserUpdateOneRequiredWithoutEntityTemplateSetsCreatedInput
}

input EntityTemplateSetUpdateManyDataInput {
  name: String
  description: String
}

input EntityTemplateSetUpdateManyMutationInput {
  name: String
  description: String
}

input EntityTemplateSetUpdateManyWithoutCreatorInput {
  create: [EntityTemplateSetCreateWithoutCreatorInput!]
  connect: [EntityTemplateSetWhereUniqueInput!]
  set: [EntityTemplateSetWhereUniqueInput!]
  disconnect: [EntityTemplateSetWhereUniqueInput!]
  delete: [EntityTemplateSetWhereUniqueInput!]
  update: [EntityTemplateSetUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [EntityTemplateSetUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityTemplateSetScalarWhereInput!]
  upsert: [EntityTemplateSetUpsertWithWhereUniqueWithoutCreatorInput!]
}

input EntityTemplateSetUpdateManyWithoutGamesInput {
  create: [EntityTemplateSetCreateWithoutGamesInput!]
  connect: [EntityTemplateSetWhereUniqueInput!]
  set: [EntityTemplateSetWhereUniqueInput!]
  disconnect: [EntityTemplateSetWhereUniqueInput!]
  delete: [EntityTemplateSetWhereUniqueInput!]
  update: [EntityTemplateSetUpdateWithWhereUniqueWithoutGamesInput!]
  updateMany: [EntityTemplateSetUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityTemplateSetScalarWhereInput!]
  upsert: [EntityTemplateSetUpsertWithWhereUniqueWithoutGamesInput!]
}

input EntityTemplateSetUpdateManyWithWhereNestedInput {
  where: EntityTemplateSetScalarWhereInput!
  data: EntityTemplateSetUpdateManyDataInput!
}

input EntityTemplateSetUpdateOneWithoutEntityTemplatesInput {
  create: EntityTemplateSetCreateWithoutEntityTemplatesInput
  connect: EntityTemplateSetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityTemplateSetUpdateWithoutEntityTemplatesDataInput
  upsert: EntityTemplateSetUpsertWithoutEntityTemplatesInput
}

input EntityTemplateSetUpdateWithoutCreatorDataInput {
  name: String
  description: String
  entityTemplates: EntityTemplateUpdateManyWithoutSetInput
  games: GameUpdateManyWithoutEntityTemplateSetsInput
}

input EntityTemplateSetUpdateWithoutEntityTemplatesDataInput {
  name: String
  description: String
  games: GameUpdateManyWithoutEntityTemplateSetsInput
  creator: UserUpdateOneRequiredWithoutEntityTemplateSetsCreatedInput
}

input EntityTemplateSetUpdateWithoutGamesDataInput {
  name: String
  description: String
  entityTemplates: EntityTemplateUpdateManyWithoutSetInput
  creator: UserUpdateOneRequiredWithoutEntityTemplateSetsCreatedInput
}

input EntityTemplateSetUpdateWithWhereUniqueWithoutCreatorInput {
  where: EntityTemplateSetWhereUniqueInput!
  data: EntityTemplateSetUpdateWithoutCreatorDataInput!
}

input EntityTemplateSetUpdateWithWhereUniqueWithoutGamesInput {
  where: EntityTemplateSetWhereUniqueInput!
  data: EntityTemplateSetUpdateWithoutGamesDataInput!
}

input EntityTemplateSetUpsertWithoutEntityTemplatesInput {
  update: EntityTemplateSetUpdateWithoutEntityTemplatesDataInput!
  create: EntityTemplateSetCreateWithoutEntityTemplatesInput!
}

input EntityTemplateSetUpsertWithWhereUniqueWithoutCreatorInput {
  where: EntityTemplateSetWhereUniqueInput!
  update: EntityTemplateSetUpdateWithoutCreatorDataInput!
  create: EntityTemplateSetCreateWithoutCreatorInput!
}

input EntityTemplateSetUpsertWithWhereUniqueWithoutGamesInput {
  where: EntityTemplateSetWhereUniqueInput!
  update: EntityTemplateSetUpdateWithoutGamesDataInput!
  create: EntityTemplateSetCreateWithoutGamesInput!
}

input EntityTemplateSetWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateSetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  entityTemplates_every: EntityTemplateWhereInput
  entityTemplates_some: EntityTemplateWhereInput
  entityTemplates_none: EntityTemplateWhereInput
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  creator: UserWhereInput
}

input EntityTemplateSetWhereUniqueInput {
  id: ID
}

type EntityTemplateSubscriptionPayload {
  mutation: MutationType!
  node: EntityTemplate
  updatedFields: [String!]
  previousValues: EntityTemplatePreviousValues
}

input EntityTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityTemplateWhereInput
}

input EntityTemplateUpdateDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateManyDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
}

input EntityTemplateUpdateManyMutationInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
}

input EntityTemplateUpdateManyWithoutSetInput {
  create: [EntityTemplateCreateWithoutSetInput!]
  connect: [EntityTemplateWhereUniqueInput!]
  set: [EntityTemplateWhereUniqueInput!]
  disconnect: [EntityTemplateWhereUniqueInput!]
  delete: [EntityTemplateWhereUniqueInput!]
  update: [EntityTemplateUpdateWithWhereUniqueWithoutSetInput!]
  updateMany: [EntityTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityTemplateScalarWhereInput!]
  upsert: [EntityTemplateUpsertWithWhereUniqueWithoutSetInput!]
}

input EntityTemplateUpdateManyWithWhereNestedInput {
  where: EntityTemplateScalarWhereInput!
  data: EntityTemplateUpdateManyDataInput!
}

input EntityTemplateUpdateOneInput {
  create: EntityTemplateCreateInput
  connect: EntityTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityTemplateUpdateDataInput
  upsert: EntityTemplateUpsertNestedInput
}

input EntityTemplateUpdateOneRequiredWithoutEntrancesInput {
  create: EntityTemplateCreateWithoutEntrancesInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutEntrancesDataInput
  upsert: EntityTemplateUpsertWithoutEntrancesInput
}

input EntityTemplateUpdateOneRequiredWithoutFieldsInput {
  create: EntityTemplateCreateWithoutFieldsInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutFieldsDataInput
  upsert: EntityTemplateUpsertWithoutFieldsInput
}

input EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput {
  create: EntityTemplateCreateWithoutInformationSlotsInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutInformationSlotsDataInput
  upsert: EntityTemplateUpsertWithoutInformationSlotsInput
}

input EntityTemplateUpdateOneRequiredWithoutPortalsInput {
  create: EntityTemplateCreateWithoutPortalsInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutPortalsDataInput
  upsert: EntityTemplateUpsertWithoutPortalsInput
}

input EntityTemplateUpdateOneRequiredWithoutStatesInput {
  create: EntityTemplateCreateWithoutStatesInput
  connect: EntityTemplateWhereUniqueInput
  update: EntityTemplateUpdateWithoutStatesDataInput
  upsert: EntityTemplateUpsertWithoutStatesInput
}

input EntityTemplateUpdateWithoutEntrancesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateWithoutFieldsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateWithoutInformationSlotsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateWithoutPortalsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateWithoutSetDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  states: StateTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
}

input EntityTemplateUpdateWithoutStatesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  fields: FieldTemplateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotTemplateUpdateManyWithoutEntityInput
  entrances: EntranceTemplateUpdateManyWithoutEntityTemplateInput
  portals: PortalTemplateUpdateManyWithoutEntityInput
  featuredField: FieldTemplateUpdateOneInput
  defaultState: StateTemplateUpdateOneInput
  set: EntityTemplateSetUpdateOneWithoutEntityTemplatesInput
}

input EntityTemplateUpdateWithWhereUniqueWithoutSetInput {
  where: EntityTemplateWhereUniqueInput!
  data: EntityTemplateUpdateWithoutSetDataInput!
}

input EntityTemplateUpsertNestedInput {
  update: EntityTemplateUpdateDataInput!
  create: EntityTemplateCreateInput!
}

input EntityTemplateUpsertWithoutEntrancesInput {
  update: EntityTemplateUpdateWithoutEntrancesDataInput!
  create: EntityTemplateCreateWithoutEntrancesInput!
}

input EntityTemplateUpsertWithoutFieldsInput {
  update: EntityTemplateUpdateWithoutFieldsDataInput!
  create: EntityTemplateCreateWithoutFieldsInput!
}

input EntityTemplateUpsertWithoutInformationSlotsInput {
  update: EntityTemplateUpdateWithoutInformationSlotsDataInput!
  create: EntityTemplateCreateWithoutInformationSlotsInput!
}

input EntityTemplateUpsertWithoutPortalsInput {
  update: EntityTemplateUpdateWithoutPortalsDataInput!
  create: EntityTemplateCreateWithoutPortalsInput!
}

input EntityTemplateUpsertWithoutStatesInput {
  update: EntityTemplateUpdateWithoutStatesDataInput!
  create: EntityTemplateCreateWithoutStatesInput!
}

input EntityTemplateUpsertWithWhereUniqueWithoutSetInput {
  where: EntityTemplateWhereUniqueInput!
  update: EntityTemplateUpdateWithoutSetDataInput!
  create: EntityTemplateCreateWithoutSetInput!
}

input EntityTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
  isContainer: Boolean

  """All values that are not equal to given value."""
  isContainer_not: Boolean
  fields_every: FieldTemplateWhereInput
  fields_some: FieldTemplateWhereInput
  fields_none: FieldTemplateWhereInput
  states_every: StateTemplateWhereInput
  states_some: StateTemplateWhereInput
  states_none: StateTemplateWhereInput
  informationSlots_every: InformationSlotTemplateWhereInput
  informationSlots_some: InformationSlotTemplateWhereInput
  informationSlots_none: InformationSlotTemplateWhereInput
  entrances_every: EntranceTemplateWhereInput
  entrances_some: EntranceTemplateWhereInput
  entrances_none: EntranceTemplateWhereInput
  portals_every: PortalTemplateWhereInput
  portals_some: PortalTemplateWhereInput
  portals_none: PortalTemplateWhereInput
  featuredField: FieldTemplateWhereInput
  defaultState: StateTemplateWhereInput
  set: EntityTemplateSetWhereInput
}

input EntityTemplateWhereUniqueInput {
  id: ID
}

input EntityUpdateDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateManyDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
}

input EntityUpdateManyMutationInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
}

input EntityUpdateManyWithoutContainerInput {
  create: [EntityCreateWithoutContainerInput!]
  connect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  disconnect: [EntityWhereUniqueInput!]
  delete: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutContainerInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityScalarWhereInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutContainerInput!]
}

input EntityUpdateManyWithoutGameInput {
  create: [EntityCreateWithoutGameInput!]
  connect: [EntityWhereUniqueInput!]
  set: [EntityWhereUniqueInput!]
  disconnect: [EntityWhereUniqueInput!]
  delete: [EntityWhereUniqueInput!]
  update: [EntityUpdateWithWhereUniqueWithoutGameInput!]
  updateMany: [EntityUpdateManyWithWhereNestedInput!]
  deleteMany: [EntityScalarWhereInput!]
  upsert: [EntityUpsertWithWhereUniqueWithoutGameInput!]
}

input EntityUpdateManyWithWhereNestedInput {
  where: EntityScalarWhereInput!
  data: EntityUpdateManyDataInput!
}

input EntityUpdateOneInput {
  create: EntityCreateInput
  connect: EntityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityUpdateDataInput
  upsert: EntityUpsertNestedInput
}

input EntityUpdateOneRequiredWithoutEntrancesInput {
  create: EntityCreateWithoutEntrancesInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutEntrancesDataInput
  upsert: EntityUpsertWithoutEntrancesInput
}

input EntityUpdateOneRequiredWithoutFieldsInput {
  create: EntityCreateWithoutFieldsInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutFieldsDataInput
  upsert: EntityUpsertWithoutFieldsInput
}

input EntityUpdateOneRequiredWithoutInformationSlotsInput {
  create: EntityCreateWithoutInformationSlotsInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutInformationSlotsDataInput
  upsert: EntityUpsertWithoutInformationSlotsInput
}

input EntityUpdateOneRequiredWithoutPortalsInput {
  create: EntityCreateWithoutPortalsInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutPortalsDataInput
  upsert: EntityUpsertWithoutPortalsInput
}

input EntityUpdateOneRequiredWithoutStatesInput {
  create: EntityCreateWithoutStatesInput
  connect: EntityWhereUniqueInput
  update: EntityUpdateWithoutStatesDataInput
  upsert: EntityUpsertWithoutStatesInput
}

input EntityUpdateOneWithoutContainedEntitiesInput {
  create: EntityCreateWithoutContainedEntitiesInput
  connect: EntityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntityUpdateWithoutContainedEntitiesDataInput
  upsert: EntityUpsertWithoutContainedEntitiesInput
}

input EntityUpdateWithoutContainedEntitiesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutContainerDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutEntrancesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutFieldsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutGameDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
}

input EntityUpdateWithoutInformationSlotsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutPortalsDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  states: StateUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithoutStatesDataInput {
  name: String
  description: String
  isTrigger: Boolean
  isItem: Boolean
  isObject: Boolean
  isContainer: Boolean
  template: EntityTemplateUpdateOneInput
  fields: FieldUpdateManyWithoutEntityInput
  informationSlots: InformationSlotUpdateManyWithoutEntityInput
  featuredField: FieldUpdateOneInput
  defaultState: StateUpdateOneInput
  container: EntityUpdateOneWithoutContainedEntitiesInput
  containedEntities: EntityUpdateManyWithoutContainerInput
  entrances: EntranceUpdateManyWithoutEntityInput
  portals: PortalUpdateManyWithoutEntityInput
  graphPosition: PositionUpdateOneInput
  physicalPosition: PhysicalPositionUpdateOneInput
  game: GameUpdateOneWithoutEntitiesInput
}

input EntityUpdateWithWhereUniqueWithoutContainerInput {
  where: EntityWhereUniqueInput!
  data: EntityUpdateWithoutContainerDataInput!
}

input EntityUpdateWithWhereUniqueWithoutGameInput {
  where: EntityWhereUniqueInput!
  data: EntityUpdateWithoutGameDataInput!
}

input EntityUpsertNestedInput {
  update: EntityUpdateDataInput!
  create: EntityCreateInput!
}

input EntityUpsertWithoutContainedEntitiesInput {
  update: EntityUpdateWithoutContainedEntitiesDataInput!
  create: EntityCreateWithoutContainedEntitiesInput!
}

input EntityUpsertWithoutEntrancesInput {
  update: EntityUpdateWithoutEntrancesDataInput!
  create: EntityCreateWithoutEntrancesInput!
}

input EntityUpsertWithoutFieldsInput {
  update: EntityUpdateWithoutFieldsDataInput!
  create: EntityCreateWithoutFieldsInput!
}

input EntityUpsertWithoutInformationSlotsInput {
  update: EntityUpdateWithoutInformationSlotsDataInput!
  create: EntityCreateWithoutInformationSlotsInput!
}

input EntityUpsertWithoutPortalsInput {
  update: EntityUpdateWithoutPortalsDataInput!
  create: EntityCreateWithoutPortalsInput!
}

input EntityUpsertWithoutStatesInput {
  update: EntityUpdateWithoutStatesDataInput!
  create: EntityCreateWithoutStatesInput!
}

input EntityUpsertWithWhereUniqueWithoutContainerInput {
  where: EntityWhereUniqueInput!
  update: EntityUpdateWithoutContainerDataInput!
  create: EntityCreateWithoutContainerInput!
}

input EntityUpsertWithWhereUniqueWithoutGameInput {
  where: EntityWhereUniqueInput!
  update: EntityUpdateWithoutGameDataInput!
  create: EntityCreateWithoutGameInput!
}

input EntityWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isTrigger: Boolean

  """All values that are not equal to given value."""
  isTrigger_not: Boolean
  isItem: Boolean

  """All values that are not equal to given value."""
  isItem_not: Boolean
  isObject: Boolean

  """All values that are not equal to given value."""
  isObject_not: Boolean
  isContainer: Boolean

  """All values that are not equal to given value."""
  isContainer_not: Boolean
  template: EntityTemplateWhereInput
  fields_every: FieldWhereInput
  fields_some: FieldWhereInput
  fields_none: FieldWhereInput
  states_every: StateWhereInput
  states_some: StateWhereInput
  states_none: StateWhereInput
  informationSlots_every: InformationSlotWhereInput
  informationSlots_some: InformationSlotWhereInput
  informationSlots_none: InformationSlotWhereInput
  featuredField: FieldWhereInput
  defaultState: StateWhereInput
  container: EntityWhereInput
  containedEntities_every: EntityWhereInput
  containedEntities_some: EntityWhereInput
  containedEntities_none: EntityWhereInput
  entrances_every: EntranceWhereInput
  entrances_some: EntranceWhereInput
  entrances_none: EntranceWhereInput
  portals_every: PortalWhereInput
  portals_some: PortalWhereInput
  portals_none: PortalWhereInput
  graphPosition: PositionWhereInput
  physicalPosition: PhysicalPositionWhereInput
  game: GameWhereInput
}

input EntityWhereUniqueInput {
  id: ID
}

type Entrance implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: EntranceTemplate
  name: String
  description: String
  portal: Portal
  entity: Entity!
}

"""A connection to a list of items."""
type EntranceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntranceEdge]!
  aggregate: AggregateEntrance!
}

input EntranceCreateInput {
  id: ID
  name: String
  description: String
  template: EntranceTemplateCreateOneInput
  portal: PortalCreateOneWithoutEntranceInput
  entity: EntityCreateOneWithoutEntrancesInput!
}

input EntranceCreateManyWithoutEntityInput {
  create: [EntranceCreateWithoutEntityInput!]
  connect: [EntranceWhereUniqueInput!]
}

input EntranceCreateOneWithoutPortalInput {
  create: EntranceCreateWithoutPortalInput
  connect: EntranceWhereUniqueInput
}

input EntranceCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  template: EntranceTemplateCreateOneInput
  portal: PortalCreateOneWithoutEntranceInput
}

input EntranceCreateWithoutPortalInput {
  id: ID
  name: String
  description: String
  template: EntranceTemplateCreateOneInput
  entity: EntityCreateOneWithoutEntrancesInput!
}

"""An edge in a connection."""
type EntranceEdge {
  """The item at the end of the edge."""
  node: Entrance!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntranceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type EntrancePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input EntranceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntranceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntranceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntranceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type EntranceSubscriptionPayload {
  mutation: MutationType!
  node: Entrance
  updatedFields: [String!]
  previousValues: EntrancePreviousValues
}

input EntranceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntranceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntranceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntranceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntranceWhereInput
}

type EntranceTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  connectablePortals(where: PortalTemplateWhereInput, orderBy: PortalTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PortalTemplate!]
  entityTemplate: EntityTemplate!
}

"""A connection to a list of items."""
type EntranceTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntranceTemplateEdge]!
  aggregate: AggregateEntranceTemplate!
}

input EntranceTemplateCreateInput {
  id: ID
  name: String
  description: String
  connectablePortals: PortalTemplateCreateManyWithoutConnectableEntrancesInput
  entityTemplate: EntityTemplateCreateOneWithoutEntrancesInput!
}

input EntranceTemplateCreateManyWithoutConnectablePortalsInput {
  create: [EntranceTemplateCreateWithoutConnectablePortalsInput!]
  connect: [EntranceTemplateWhereUniqueInput!]
}

input EntranceTemplateCreateManyWithoutEntityTemplateInput {
  create: [EntranceTemplateCreateWithoutEntityTemplateInput!]
  connect: [EntranceTemplateWhereUniqueInput!]
}

input EntranceTemplateCreateOneInput {
  create: EntranceTemplateCreateInput
  connect: EntranceTemplateWhereUniqueInput
}

input EntranceTemplateCreateWithoutConnectablePortalsInput {
  id: ID
  name: String
  description: String
  entityTemplate: EntityTemplateCreateOneWithoutEntrancesInput!
}

input EntranceTemplateCreateWithoutEntityTemplateInput {
  id: ID
  name: String
  description: String
  connectablePortals: PortalTemplateCreateManyWithoutConnectableEntrancesInput
}

"""An edge in a connection."""
type EntranceTemplateEdge {
  """The item at the end of the edge."""
  node: EntranceTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntranceTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type EntranceTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input EntranceTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EntranceTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntranceTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntranceTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type EntranceTemplateSubscriptionPayload {
  mutation: MutationType!
  node: EntranceTemplate
  updatedFields: [String!]
  previousValues: EntranceTemplatePreviousValues
}

input EntranceTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntranceTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntranceTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntranceTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntranceTemplateWhereInput
}

input EntranceTemplateUpdateDataInput {
  name: String
  description: String
  connectablePortals: PortalTemplateUpdateManyWithoutConnectableEntrancesInput
  entityTemplate: EntityTemplateUpdateOneRequiredWithoutEntrancesInput
}

input EntranceTemplateUpdateInput {
  name: String
  description: String
  connectablePortals: PortalTemplateUpdateManyWithoutConnectableEntrancesInput
  entityTemplate: EntityTemplateUpdateOneRequiredWithoutEntrancesInput
}

input EntranceTemplateUpdateManyDataInput {
  name: String
  description: String
}

input EntranceTemplateUpdateManyMutationInput {
  name: String
  description: String
}

input EntranceTemplateUpdateManyWithoutConnectablePortalsInput {
  create: [EntranceTemplateCreateWithoutConnectablePortalsInput!]
  connect: [EntranceTemplateWhereUniqueInput!]
  set: [EntranceTemplateWhereUniqueInput!]
  disconnect: [EntranceTemplateWhereUniqueInput!]
  delete: [EntranceTemplateWhereUniqueInput!]
  update: [EntranceTemplateUpdateWithWhereUniqueWithoutConnectablePortalsInput!]
  updateMany: [EntranceTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [EntranceTemplateScalarWhereInput!]
  upsert: [EntranceTemplateUpsertWithWhereUniqueWithoutConnectablePortalsInput!]
}

input EntranceTemplateUpdateManyWithoutEntityTemplateInput {
  create: [EntranceTemplateCreateWithoutEntityTemplateInput!]
  connect: [EntranceTemplateWhereUniqueInput!]
  set: [EntranceTemplateWhereUniqueInput!]
  disconnect: [EntranceTemplateWhereUniqueInput!]
  delete: [EntranceTemplateWhereUniqueInput!]
  update: [EntranceTemplateUpdateWithWhereUniqueWithoutEntityTemplateInput!]
  updateMany: [EntranceTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [EntranceTemplateScalarWhereInput!]
  upsert: [EntranceTemplateUpsertWithWhereUniqueWithoutEntityTemplateInput!]
}

input EntranceTemplateUpdateManyWithWhereNestedInput {
  where: EntranceTemplateScalarWhereInput!
  data: EntranceTemplateUpdateManyDataInput!
}

input EntranceTemplateUpdateOneInput {
  create: EntranceTemplateCreateInput
  connect: EntranceTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntranceTemplateUpdateDataInput
  upsert: EntranceTemplateUpsertNestedInput
}

input EntranceTemplateUpdateWithoutConnectablePortalsDataInput {
  name: String
  description: String
  entityTemplate: EntityTemplateUpdateOneRequiredWithoutEntrancesInput
}

input EntranceTemplateUpdateWithoutEntityTemplateDataInput {
  name: String
  description: String
  connectablePortals: PortalTemplateUpdateManyWithoutConnectableEntrancesInput
}

input EntranceTemplateUpdateWithWhereUniqueWithoutConnectablePortalsInput {
  where: EntranceTemplateWhereUniqueInput!
  data: EntranceTemplateUpdateWithoutConnectablePortalsDataInput!
}

input EntranceTemplateUpdateWithWhereUniqueWithoutEntityTemplateInput {
  where: EntranceTemplateWhereUniqueInput!
  data: EntranceTemplateUpdateWithoutEntityTemplateDataInput!
}

input EntranceTemplateUpsertNestedInput {
  update: EntranceTemplateUpdateDataInput!
  create: EntranceTemplateCreateInput!
}

input EntranceTemplateUpsertWithWhereUniqueWithoutConnectablePortalsInput {
  where: EntranceTemplateWhereUniqueInput!
  update: EntranceTemplateUpdateWithoutConnectablePortalsDataInput!
  create: EntranceTemplateCreateWithoutConnectablePortalsInput!
}

input EntranceTemplateUpsertWithWhereUniqueWithoutEntityTemplateInput {
  where: EntranceTemplateWhereUniqueInput!
  update: EntranceTemplateUpdateWithoutEntityTemplateDataInput!
  create: EntranceTemplateCreateWithoutEntityTemplateInput!
}

input EntranceTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [EntranceTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntranceTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntranceTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  connectablePortals_every: PortalTemplateWhereInput
  connectablePortals_some: PortalTemplateWhereInput
  connectablePortals_none: PortalTemplateWhereInput
  entityTemplate: EntityTemplateWhereInput
}

input EntranceTemplateWhereUniqueInput {
  id: ID
}

input EntranceUpdateInput {
  name: String
  description: String
  template: EntranceTemplateUpdateOneInput
  portal: PortalUpdateOneWithoutEntranceInput
  entity: EntityUpdateOneRequiredWithoutEntrancesInput
}

input EntranceUpdateManyDataInput {
  name: String
  description: String
}

input EntranceUpdateManyMutationInput {
  name: String
  description: String
}

input EntranceUpdateManyWithoutEntityInput {
  create: [EntranceCreateWithoutEntityInput!]
  connect: [EntranceWhereUniqueInput!]
  set: [EntranceWhereUniqueInput!]
  disconnect: [EntranceWhereUniqueInput!]
  delete: [EntranceWhereUniqueInput!]
  update: [EntranceUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [EntranceUpdateManyWithWhereNestedInput!]
  deleteMany: [EntranceScalarWhereInput!]
  upsert: [EntranceUpsertWithWhereUniqueWithoutEntityInput!]
}

input EntranceUpdateManyWithWhereNestedInput {
  where: EntranceScalarWhereInput!
  data: EntranceUpdateManyDataInput!
}

input EntranceUpdateOneWithoutPortalInput {
  create: EntranceCreateWithoutPortalInput
  connect: EntranceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EntranceUpdateWithoutPortalDataInput
  upsert: EntranceUpsertWithoutPortalInput
}

input EntranceUpdateWithoutEntityDataInput {
  name: String
  description: String
  template: EntranceTemplateUpdateOneInput
  portal: PortalUpdateOneWithoutEntranceInput
}

input EntranceUpdateWithoutPortalDataInput {
  name: String
  description: String
  template: EntranceTemplateUpdateOneInput
  entity: EntityUpdateOneRequiredWithoutEntrancesInput
}

input EntranceUpdateWithWhereUniqueWithoutEntityInput {
  where: EntranceWhereUniqueInput!
  data: EntranceUpdateWithoutEntityDataInput!
}

input EntranceUpsertWithoutPortalInput {
  update: EntranceUpdateWithoutPortalDataInput!
  create: EntranceCreateWithoutPortalInput!
}

input EntranceUpsertWithWhereUniqueWithoutEntityInput {
  where: EntranceWhereUniqueInput!
  update: EntranceUpdateWithoutEntityDataInput!
  create: EntranceCreateWithoutEntityInput!
}

input EntranceWhereInput {
  """Logical AND on all given filters."""
  AND: [EntranceWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntranceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntranceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  template: EntranceTemplateWhereInput
  portal: PortalWhereInput
  entity: EntityWhereInput
}

input EntranceWhereUniqueInput {
  id: ID
}

type FieldGroup implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: FieldTemplate
  name: String
  description: String
  type: FieldType!
  isSecret: Boolean!
  value: String
  entity: Entity!
  informationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot!]
}

"""A connection to a list of items."""
type FieldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldEdge]!
  aggregate: AggregateField!
}

input FieldCreateInput {
  id: ID
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateCreateOneInput
  type: FieldTypeCreateOneInput!
  entity: EntityCreateOneWithoutFieldsInput!
  informationSlots: InformationSlotCreateManyWithoutFieldInput
}

input FieldCreateManyWithoutEntityInput {
  create: [FieldCreateWithoutEntityInput!]
  connect: [FieldWhereUniqueInput!]
}

input FieldCreateOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
}

input FieldCreateOneWithoutInformationSlotsInput {
  create: FieldCreateWithoutInformationSlotsInput
  connect: FieldWhereUniqueInput
}

input FieldCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateCreateOneInput
  type: FieldTypeCreateOneInput!
  informationSlots: InformationSlotCreateManyWithoutFieldInput
}

input FieldCreateWithoutInformationSlotsInput {
  id: ID
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateCreateOneInput
  type: FieldTypeCreateOneInput!
  entity: EntityCreateOneWithoutFieldsInput!
}

"""An edge in a connection."""
type FieldEdge {
  """The item at the end of the edge."""
  node: FieldGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isSecret_ASC
  isSecret_DESC
  value_ASC
  value_DESC
}

type FieldPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  isSecret: Boolean!
  value: String
}

input FieldScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type FieldSubscriptionPayload {
  mutation: MutationType!
  node: FieldGroup
  updatedFields: [String!]
  previousValues: FieldPreviousValues
}

input FieldSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldWhereInput
}

type FieldTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  type: FieldType!
  isSecret: Boolean!
  entity: EntityTemplate!
}

"""A connection to a list of items."""
type FieldTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldTemplateEdge]!
  aggregate: AggregateFieldTemplate!
}

input FieldTemplateCreateInput {
  id: ID
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeCreateOneInput!
  entity: EntityTemplateCreateOneWithoutFieldsInput!
}

input FieldTemplateCreateManyWithoutEntityInput {
  create: [FieldTemplateCreateWithoutEntityInput!]
  connect: [FieldTemplateWhereUniqueInput!]
}

input FieldTemplateCreateOneInput {
  create: FieldTemplateCreateInput
  connect: FieldTemplateWhereUniqueInput
}

input FieldTemplateCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeCreateOneInput!
}

"""An edge in a connection."""
type FieldTemplateEdge {
  """The item at the end of the edge."""
  node: FieldTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isSecret_ASC
  isSecret_DESC
}

type FieldTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  isSecret: Boolean!
}

input FieldTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
}

type FieldTemplateSubscriptionPayload {
  mutation: MutationType!
  node: FieldTemplate
  updatedFields: [String!]
  previousValues: FieldTemplatePreviousValues
}

input FieldTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldTemplateWhereInput
}

input FieldTemplateUpdateDataInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityTemplateUpdateOneRequiredWithoutFieldsInput
}

input FieldTemplateUpdateInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityTemplateUpdateOneRequiredWithoutFieldsInput
}

input FieldTemplateUpdateManyDataInput {
  name: String
  description: String
  isSecret: Boolean
}

input FieldTemplateUpdateManyMutationInput {
  name: String
  description: String
  isSecret: Boolean
}

input FieldTemplateUpdateManyWithoutEntityInput {
  create: [FieldTemplateCreateWithoutEntityInput!]
  connect: [FieldTemplateWhereUniqueInput!]
  set: [FieldTemplateWhereUniqueInput!]
  disconnect: [FieldTemplateWhereUniqueInput!]
  delete: [FieldTemplateWhereUniqueInput!]
  update: [FieldTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [FieldTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [FieldTemplateScalarWhereInput!]
  upsert: [FieldTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input FieldTemplateUpdateManyWithWhereNestedInput {
  where: FieldTemplateScalarWhereInput!
  data: FieldTemplateUpdateManyDataInput!
}

input FieldTemplateUpdateOneInput {
  create: FieldTemplateCreateInput
  connect: FieldTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldTemplateUpdateDataInput
  upsert: FieldTemplateUpsertNestedInput
}

input FieldTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  isSecret: Boolean
  type: FieldTypeUpdateOneRequiredInput
}

input FieldTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: FieldTemplateWhereUniqueInput!
  data: FieldTemplateUpdateWithoutEntityDataInput!
}

input FieldTemplateUpsertNestedInput {
  update: FieldTemplateUpdateDataInput!
  create: FieldTemplateCreateInput!
}

input FieldTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: FieldTemplateWhereUniqueInput!
  update: FieldTemplateUpdateWithoutEntityDataInput!
  create: FieldTemplateCreateWithoutEntityInput!
}

input FieldTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
  type: FieldTypeWhereInput
  entity: EntityTemplateWhereInput
}

input FieldTemplateWhereUniqueInput {
  id: ID
}

type FieldType implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ValueType!
  isMulti: Boolean!
}

"""A connection to a list of items."""
type FieldTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldTypeEdge]!
  aggregate: AggregateFieldType!
}

input FieldTypeCreateInput {
  id: ID
  type: ValueType
  isMulti: Boolean
}

input FieldTypeCreateManyInput {
  create: [FieldTypeCreateInput!]
  connect: [FieldTypeWhereUniqueInput!]
}

input FieldTypeCreateOneInput {
  create: FieldTypeCreateInput
  connect: FieldTypeWhereUniqueInput
}

"""An edge in a connection."""
type FieldTypeEdge {
  """The item at the end of the edge."""
  node: FieldType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldTypeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  isMulti_ASC
  isMulti_DESC
}

type FieldTypePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ValueType!
  isMulti: Boolean!
}

input FieldTypeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTypeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTypeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTypeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: ValueType

  """All values that are not equal to given value."""
  type_not: ValueType

  """All values that are contained in given list."""
  type_in: [ValueType!]

  """All values that are not contained in given list."""
  type_not_in: [ValueType!]
  isMulti: Boolean

  """All values that are not equal to given value."""
  isMulti_not: Boolean
}

type FieldTypeSubscriptionPayload {
  mutation: MutationType!
  node: FieldType
  updatedFields: [String!]
  previousValues: FieldTypePreviousValues
}

input FieldTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTypeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldTypeWhereInput
}

input FieldTypeUpdateDataInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateManyDataInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateManyInput {
  create: [FieldTypeCreateInput!]
  connect: [FieldTypeWhereUniqueInput!]
  set: [FieldTypeWhereUniqueInput!]
  disconnect: [FieldTypeWhereUniqueInput!]
  delete: [FieldTypeWhereUniqueInput!]
  update: [FieldTypeUpdateWithWhereUniqueNestedInput!]
  updateMany: [FieldTypeUpdateManyWithWhereNestedInput!]
  deleteMany: [FieldTypeScalarWhereInput!]
  upsert: [FieldTypeUpsertWithWhereUniqueNestedInput!]
}

input FieldTypeUpdateManyMutationInput {
  type: ValueType
  isMulti: Boolean
}

input FieldTypeUpdateManyWithWhereNestedInput {
  where: FieldTypeScalarWhereInput!
  data: FieldTypeUpdateManyDataInput!
}

input FieldTypeUpdateOneRequiredInput {
  create: FieldTypeCreateInput
  connect: FieldTypeWhereUniqueInput
  update: FieldTypeUpdateDataInput
  upsert: FieldTypeUpsertNestedInput
}

input FieldTypeUpdateWithWhereUniqueNestedInput {
  where: FieldTypeWhereUniqueInput!
  data: FieldTypeUpdateDataInput!
}

input FieldTypeUpsertNestedInput {
  update: FieldTypeUpdateDataInput!
  create: FieldTypeCreateInput!
}

input FieldTypeUpsertWithWhereUniqueNestedInput {
  where: FieldTypeWhereUniqueInput!
  update: FieldTypeUpdateDataInput!
  create: FieldTypeCreateInput!
}

input FieldTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: ValueType

  """All values that are not equal to given value."""
  type_not: ValueType

  """All values that are contained in given list."""
  type_in: [ValueType!]

  """All values that are not contained in given list."""
  type_not_in: [ValueType!]
  isMulti: Boolean

  """All values that are not equal to given value."""
  isMulti_not: Boolean
}

input FieldTypeWhereUniqueInput {
  id: ID
}

input FieldUpdateDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityUpdateOneRequiredWithoutFieldsInput
  informationSlots: InformationSlotUpdateManyWithoutFieldInput
}

input FieldUpdateInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityUpdateOneRequiredWithoutFieldsInput
  informationSlots: InformationSlotUpdateManyWithoutFieldInput
}

input FieldUpdateManyDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
}

input FieldUpdateManyMutationInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
}

input FieldUpdateManyWithoutEntityInput {
  create: [FieldCreateWithoutEntityInput!]
  connect: [FieldWhereUniqueInput!]
  set: [FieldWhereUniqueInput!]
  disconnect: [FieldWhereUniqueInput!]
  delete: [FieldWhereUniqueInput!]
  update: [FieldUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [FieldUpdateManyWithWhereNestedInput!]
  deleteMany: [FieldScalarWhereInput!]
  upsert: [FieldUpsertWithWhereUniqueWithoutEntityInput!]
}

input FieldUpdateManyWithWhereNestedInput {
  where: FieldScalarWhereInput!
  data: FieldUpdateManyDataInput!
}

input FieldUpdateOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldUpdateDataInput
  upsert: FieldUpsertNestedInput
}

input FieldUpdateOneWithoutInformationSlotsInput {
  create: FieldCreateWithoutInformationSlotsInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldUpdateWithoutInformationSlotsDataInput
  upsert: FieldUpsertWithoutInformationSlotsInput
}

input FieldUpdateWithoutEntityDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  informationSlots: InformationSlotUpdateManyWithoutFieldInput
}

input FieldUpdateWithoutInformationSlotsDataInput {
  name: String
  description: String
  isSecret: Boolean
  value: String
  template: FieldTemplateUpdateOneInput
  type: FieldTypeUpdateOneRequiredInput
  entity: EntityUpdateOneRequiredWithoutFieldsInput
}

input FieldUpdateWithWhereUniqueWithoutEntityInput {
  where: FieldWhereUniqueInput!
  data: FieldUpdateWithoutEntityDataInput!
}

input FieldUpsertNestedInput {
  update: FieldUpdateDataInput!
  create: FieldCreateInput!
}

input FieldUpsertWithoutInformationSlotsInput {
  update: FieldUpdateWithoutInformationSlotsDataInput!
  create: FieldCreateWithoutInformationSlotsInput!
}

input FieldUpsertWithWhereUniqueWithoutEntityInput {
  where: FieldWhereUniqueInput!
  update: FieldUpdateWithoutEntityDataInput!
  create: FieldCreateWithoutEntityInput!
}

input FieldWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  template: FieldTemplateWhereInput
  type: FieldTypeWhereInput
  entity: EntityWhereInput
  informationSlots_every: InformationSlotWhereInput
  informationSlots_some: InformationSlotWhereInput
  informationSlots_none: InformationSlotWhereInput
}

input FieldWhereUniqueInput {
  id: ID
}

type Game implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  publishedAt: DateTime
  creator: User
  cooperators(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay!]
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity!]
  startContainer: Entity
  entityTemplateSets(where: EntityTemplateSetWhereInput, orderBy: EntityTemplateSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityTemplateSet!]
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  plays: GamePlayCreateManyWithoutGameInput
  entities: EntityCreateManyWithoutGameInput
  startContainer: EntityCreateOneInput
  entityTemplateSets: EntityTemplateSetCreateManyWithoutGamesInput
}

input GameCreateManyWithoutCooperatorsInput {
  create: [GameCreateWithoutCooperatorsInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutCreatorInput {
  create: [GameCreateWithoutCreatorInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateManyWithoutEntityTemplateSetsInput {
  create: [GameCreateWithoutEntityTemplateSetsInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneWithoutEntitiesInput {
  create: GameCreateWithoutEntitiesInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutPlaysInput {
  create: GameCreateWithoutPlaysInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutCooperatorsInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserCreateOneWithoutGamesCreatedInput
  plays: GamePlayCreateManyWithoutGameInput
  entities: EntityCreateManyWithoutGameInput
  startContainer: EntityCreateOneInput
  entityTemplateSets: EntityTemplateSetCreateManyWithoutGamesInput
}

input GameCreateWithoutCreatorInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  cooperators: UserCreateManyWithoutGamesInput
  plays: GamePlayCreateManyWithoutGameInput
  entities: EntityCreateManyWithoutGameInput
  startContainer: EntityCreateOneInput
  entityTemplateSets: EntityTemplateSetCreateManyWithoutGamesInput
}

input GameCreateWithoutEntitiesInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  plays: GamePlayCreateManyWithoutGameInput
  startContainer: EntityCreateOneInput
  entityTemplateSets: EntityTemplateSetCreateManyWithoutGamesInput
}

input GameCreateWithoutEntityTemplateSetsInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  plays: GamePlayCreateManyWithoutGameInput
  entities: EntityCreateManyWithoutGameInput
  startContainer: EntityCreateOneInput
}

input GameCreateWithoutPlaysInput {
  id: ID
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserCreateOneWithoutGamesCreatedInput
  cooperators: UserCreateManyWithoutGamesInput
  entities: EntityCreateManyWithoutGameInput
  startContainer: EntityCreateOneInput
  entityTemplateSets: EntityTemplateSetCreateManyWithoutGamesInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  intro_ASC
  intro_DESC
  outro_ASC
  outro_DESC
  privacy_ASC
  privacy_DESC
  accessType_ASC
  accessType_DESC
  accessCode_ASC
  accessCode_DESC
  publishedAt_ASC
  publishedAt_DESC
}

type GamePlay implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  game: Game!
  player: User
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action!]
  service: Service
  isTest: Boolean!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  progress: Float!
  rating: Int
}

"""A connection to a list of items."""
type GamePlayConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamePlayEdge]!
  aggregate: AggregateGamePlay!
}

input GamePlayCreateInput {
  id: ID
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameCreateOneWithoutPlaysInput!
  player: UserCreateOneWithoutPlaysInput
  actions: ActionCreateManyWithoutGamePlayInput
  service: ServiceCreateOneWithoutGamePlaysInput
  sessions: SessionCreateManyWithoutGamePlayInput
}

input GamePlayCreateManyWithoutGameInput {
  create: [GamePlayCreateWithoutGameInput!]
  connect: [GamePlayWhereUniqueInput!]
}

input GamePlayCreateManyWithoutPlayerInput {
  create: [GamePlayCreateWithoutPlayerInput!]
  connect: [GamePlayWhereUniqueInput!]
}

input GamePlayCreateManyWithoutServiceInput {
  create: [GamePlayCreateWithoutServiceInput!]
  connect: [GamePlayWhereUniqueInput!]
}

input GamePlayCreateOneWithoutActionsInput {
  create: GamePlayCreateWithoutActionsInput
  connect: GamePlayWhereUniqueInput
}

input GamePlayCreateOneWithoutSessionsInput {
  create: GamePlayCreateWithoutSessionsInput
  connect: GamePlayWhereUniqueInput
}

input GamePlayCreateWithoutActionsInput {
  id: ID
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameCreateOneWithoutPlaysInput!
  player: UserCreateOneWithoutPlaysInput
  service: ServiceCreateOneWithoutGamePlaysInput
  sessions: SessionCreateManyWithoutGamePlayInput
}

input GamePlayCreateWithoutGameInput {
  id: ID
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  player: UserCreateOneWithoutPlaysInput
  actions: ActionCreateManyWithoutGamePlayInput
  service: ServiceCreateOneWithoutGamePlaysInput
  sessions: SessionCreateManyWithoutGamePlayInput
}

input GamePlayCreateWithoutPlayerInput {
  id: ID
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameCreateOneWithoutPlaysInput!
  actions: ActionCreateManyWithoutGamePlayInput
  service: ServiceCreateOneWithoutGamePlaysInput
  sessions: SessionCreateManyWithoutGamePlayInput
}

input GamePlayCreateWithoutServiceInput {
  id: ID
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameCreateOneWithoutPlaysInput!
  player: UserCreateOneWithoutPlaysInput
  actions: ActionCreateManyWithoutGamePlayInput
  sessions: SessionCreateManyWithoutGamePlayInput
}

input GamePlayCreateWithoutSessionsInput {
  id: ID
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameCreateOneWithoutPlaysInput!
  player: UserCreateOneWithoutPlaysInput
  actions: ActionCreateManyWithoutGamePlayInput
  service: ServiceCreateOneWithoutGamePlaysInput
}

"""An edge in a connection."""
type GamePlayEdge {
  """The item at the end of the edge."""
  node: GamePlay!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GamePlayOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startedAt_ASC
  startedAt_DESC
  finishedAt_ASC
  finishedAt_DESC
  netDuration_ASC
  netDuration_DESC
  isTest_ASC
  isTest_DESC
  progress_ASC
  progress_DESC
  rating_ASC
  rating_DESC
}

type GamePlayPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean!
  progress: Float!
  rating: Int
}

input GamePlayScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GamePlayScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamePlayScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamePlayScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  startedAt: DateTime

  """All values that are not equal to given value."""
  startedAt_not: DateTime

  """All values that are contained in given list."""
  startedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startedAt_not_in: [DateTime!]

  """All values less than the given value."""
  startedAt_lt: DateTime

  """All values less than or equal the given value."""
  startedAt_lte: DateTime

  """All values greater than the given value."""
  startedAt_gt: DateTime

  """All values greater than or equal the given value."""
  startedAt_gte: DateTime
  finishedAt: DateTime

  """All values that are not equal to given value."""
  finishedAt_not: DateTime

  """All values that are contained in given list."""
  finishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  finishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  finishedAt_lt: DateTime

  """All values less than or equal the given value."""
  finishedAt_lte: DateTime

  """All values greater than the given value."""
  finishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  finishedAt_gte: DateTime
  netDuration: Int

  """All values that are not equal to given value."""
  netDuration_not: Int

  """All values that are contained in given list."""
  netDuration_in: [Int!]

  """All values that are not contained in given list."""
  netDuration_not_in: [Int!]

  """All values less than the given value."""
  netDuration_lt: Int

  """All values less than or equal the given value."""
  netDuration_lte: Int

  """All values greater than the given value."""
  netDuration_gt: Int

  """All values greater than or equal the given value."""
  netDuration_gte: Int
  isTest: Boolean

  """All values that are not equal to given value."""
  isTest_not: Boolean
  progress: Float

  """All values that are not equal to given value."""
  progress_not: Float

  """All values that are contained in given list."""
  progress_in: [Float!]

  """All values that are not contained in given list."""
  progress_not_in: [Float!]

  """All values less than the given value."""
  progress_lt: Float

  """All values less than or equal the given value."""
  progress_lte: Float

  """All values greater than the given value."""
  progress_gt: Float

  """All values greater than or equal the given value."""
  progress_gte: Float
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
}

type GamePlaySubscriptionPayload {
  mutation: MutationType!
  node: GamePlay
  updatedFields: [String!]
  previousValues: GamePlayPreviousValues
}

input GamePlaySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamePlaySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamePlaySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamePlaySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamePlayWhereInput
}

input GamePlayUpdateInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameUpdateOneRequiredWithoutPlaysInput
  player: UserUpdateOneWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
  service: ServiceUpdateOneWithoutGamePlaysInput
  sessions: SessionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateManyDataInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
}

input GamePlayUpdateManyMutationInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
}

input GamePlayUpdateManyWithoutGameInput {
  create: [GamePlayCreateWithoutGameInput!]
  connect: [GamePlayWhereUniqueInput!]
  set: [GamePlayWhereUniqueInput!]
  disconnect: [GamePlayWhereUniqueInput!]
  delete: [GamePlayWhereUniqueInput!]
  update: [GamePlayUpdateWithWhereUniqueWithoutGameInput!]
  updateMany: [GamePlayUpdateManyWithWhereNestedInput!]
  deleteMany: [GamePlayScalarWhereInput!]
  upsert: [GamePlayUpsertWithWhereUniqueWithoutGameInput!]
}

input GamePlayUpdateManyWithoutPlayerInput {
  create: [GamePlayCreateWithoutPlayerInput!]
  connect: [GamePlayWhereUniqueInput!]
  set: [GamePlayWhereUniqueInput!]
  disconnect: [GamePlayWhereUniqueInput!]
  delete: [GamePlayWhereUniqueInput!]
  update: [GamePlayUpdateWithWhereUniqueWithoutPlayerInput!]
  updateMany: [GamePlayUpdateManyWithWhereNestedInput!]
  deleteMany: [GamePlayScalarWhereInput!]
  upsert: [GamePlayUpsertWithWhereUniqueWithoutPlayerInput!]
}

input GamePlayUpdateManyWithoutServiceInput {
  create: [GamePlayCreateWithoutServiceInput!]
  connect: [GamePlayWhereUniqueInput!]
  set: [GamePlayWhereUniqueInput!]
  disconnect: [GamePlayWhereUniqueInput!]
  delete: [GamePlayWhereUniqueInput!]
  update: [GamePlayUpdateWithWhereUniqueWithoutServiceInput!]
  updateMany: [GamePlayUpdateManyWithWhereNestedInput!]
  deleteMany: [GamePlayScalarWhereInput!]
  upsert: [GamePlayUpsertWithWhereUniqueWithoutServiceInput!]
}

input GamePlayUpdateManyWithWhereNestedInput {
  where: GamePlayScalarWhereInput!
  data: GamePlayUpdateManyDataInput!
}

input GamePlayUpdateOneRequiredWithoutActionsInput {
  create: GamePlayCreateWithoutActionsInput
  connect: GamePlayWhereUniqueInput
  update: GamePlayUpdateWithoutActionsDataInput
  upsert: GamePlayUpsertWithoutActionsInput
}

input GamePlayUpdateOneRequiredWithoutSessionsInput {
  create: GamePlayCreateWithoutSessionsInput
  connect: GamePlayWhereUniqueInput
  update: GamePlayUpdateWithoutSessionsDataInput
  upsert: GamePlayUpsertWithoutSessionsInput
}

input GamePlayUpdateWithoutActionsDataInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameUpdateOneRequiredWithoutPlaysInput
  player: UserUpdateOneWithoutPlaysInput
  service: ServiceUpdateOneWithoutGamePlaysInput
  sessions: SessionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateWithoutGameDataInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  player: UserUpdateOneWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
  service: ServiceUpdateOneWithoutGamePlaysInput
  sessions: SessionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateWithoutPlayerDataInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameUpdateOneRequiredWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
  service: ServiceUpdateOneWithoutGamePlaysInput
  sessions: SessionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateWithoutServiceDataInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameUpdateOneRequiredWithoutPlaysInput
  player: UserUpdateOneWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
  sessions: SessionUpdateManyWithoutGamePlayInput
}

input GamePlayUpdateWithoutSessionsDataInput {
  startedAt: DateTime
  finishedAt: DateTime
  netDuration: Int
  isTest: Boolean
  progress: Float
  rating: Int
  game: GameUpdateOneRequiredWithoutPlaysInput
  player: UserUpdateOneWithoutPlaysInput
  actions: ActionUpdateManyWithoutGamePlayInput
  service: ServiceUpdateOneWithoutGamePlaysInput
}

input GamePlayUpdateWithWhereUniqueWithoutGameInput {
  where: GamePlayWhereUniqueInput!
  data: GamePlayUpdateWithoutGameDataInput!
}

input GamePlayUpdateWithWhereUniqueWithoutPlayerInput {
  where: GamePlayWhereUniqueInput!
  data: GamePlayUpdateWithoutPlayerDataInput!
}

input GamePlayUpdateWithWhereUniqueWithoutServiceInput {
  where: GamePlayWhereUniqueInput!
  data: GamePlayUpdateWithoutServiceDataInput!
}

input GamePlayUpsertWithoutActionsInput {
  update: GamePlayUpdateWithoutActionsDataInput!
  create: GamePlayCreateWithoutActionsInput!
}

input GamePlayUpsertWithoutSessionsInput {
  update: GamePlayUpdateWithoutSessionsDataInput!
  create: GamePlayCreateWithoutSessionsInput!
}

input GamePlayUpsertWithWhereUniqueWithoutGameInput {
  where: GamePlayWhereUniqueInput!
  update: GamePlayUpdateWithoutGameDataInput!
  create: GamePlayCreateWithoutGameInput!
}

input GamePlayUpsertWithWhereUniqueWithoutPlayerInput {
  where: GamePlayWhereUniqueInput!
  update: GamePlayUpdateWithoutPlayerDataInput!
  create: GamePlayCreateWithoutPlayerInput!
}

input GamePlayUpsertWithWhereUniqueWithoutServiceInput {
  where: GamePlayWhereUniqueInput!
  update: GamePlayUpdateWithoutServiceDataInput!
  create: GamePlayCreateWithoutServiceInput!
}

input GamePlayWhereInput {
  """Logical AND on all given filters."""
  AND: [GamePlayWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamePlayWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamePlayWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  startedAt: DateTime

  """All values that are not equal to given value."""
  startedAt_not: DateTime

  """All values that are contained in given list."""
  startedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startedAt_not_in: [DateTime!]

  """All values less than the given value."""
  startedAt_lt: DateTime

  """All values less than or equal the given value."""
  startedAt_lte: DateTime

  """All values greater than the given value."""
  startedAt_gt: DateTime

  """All values greater than or equal the given value."""
  startedAt_gte: DateTime
  finishedAt: DateTime

  """All values that are not equal to given value."""
  finishedAt_not: DateTime

  """All values that are contained in given list."""
  finishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  finishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  finishedAt_lt: DateTime

  """All values less than or equal the given value."""
  finishedAt_lte: DateTime

  """All values greater than the given value."""
  finishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  finishedAt_gte: DateTime
  netDuration: Int

  """All values that are not equal to given value."""
  netDuration_not: Int

  """All values that are contained in given list."""
  netDuration_in: [Int!]

  """All values that are not contained in given list."""
  netDuration_not_in: [Int!]

  """All values less than the given value."""
  netDuration_lt: Int

  """All values less than or equal the given value."""
  netDuration_lte: Int

  """All values greater than the given value."""
  netDuration_gt: Int

  """All values greater than or equal the given value."""
  netDuration_gte: Int
  isTest: Boolean

  """All values that are not equal to given value."""
  isTest_not: Boolean
  progress: Float

  """All values that are not equal to given value."""
  progress_not: Float

  """All values that are contained in given list."""
  progress_in: [Float!]

  """All values that are not contained in given list."""
  progress_not_in: [Float!]

  """All values less than the given value."""
  progress_lt: Float

  """All values less than or equal the given value."""
  progress_lte: Float

  """All values greater than the given value."""
  progress_gt: Float

  """All values greater than or equal the given value."""
  progress_gte: Float
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  game: GameWhereInput
  player: UserWhereInput
  actions_every: ActionWhereInput
  actions_some: ActionWhereInput
  actions_none: ActionWhereInput
  service: ServiceWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
}

input GamePlayWhereUniqueInput {
  id: ID
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType!
  accessType: AccessType!
  accessCode: String
  publishedAt: DateTime
}

input GameScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GameScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  intro: String

  """All values that are not equal to given value."""
  intro_not: String

  """All values that are contained in given list."""
  intro_in: [String!]

  """All values that are not contained in given list."""
  intro_not_in: [String!]

  """All values less than the given value."""
  intro_lt: String

  """All values less than or equal the given value."""
  intro_lte: String

  """All values greater than the given value."""
  intro_gt: String

  """All values greater than or equal the given value."""
  intro_gte: String

  """All values containing the given string."""
  intro_contains: String

  """All values not containing the given string."""
  intro_not_contains: String

  """All values starting with the given string."""
  intro_starts_with: String

  """All values not starting with the given string."""
  intro_not_starts_with: String

  """All values ending with the given string."""
  intro_ends_with: String

  """All values not ending with the given string."""
  intro_not_ends_with: String
  outro: String

  """All values that are not equal to given value."""
  outro_not: String

  """All values that are contained in given list."""
  outro_in: [String!]

  """All values that are not contained in given list."""
  outro_not_in: [String!]

  """All values less than the given value."""
  outro_lt: String

  """All values less than or equal the given value."""
  outro_lte: String

  """All values greater than the given value."""
  outro_gt: String

  """All values greater than or equal the given value."""
  outro_gte: String

  """All values containing the given string."""
  outro_contains: String

  """All values not containing the given string."""
  outro_not_contains: String

  """All values starting with the given string."""
  outro_starts_with: String

  """All values not starting with the given string."""
  outro_not_starts_with: String

  """All values ending with the given string."""
  outro_ends_with: String

  """All values not ending with the given string."""
  outro_not_ends_with: String
  privacy: PrivacyType

  """All values that are not equal to given value."""
  privacy_not: PrivacyType

  """All values that are contained in given list."""
  privacy_in: [PrivacyType!]

  """All values that are not contained in given list."""
  privacy_not_in: [PrivacyType!]
  accessType: AccessType

  """All values that are not equal to given value."""
  accessType_not: AccessType

  """All values that are contained in given list."""
  accessType_in: [AccessType!]

  """All values that are not contained in given list."""
  accessType_not_in: [AccessType!]
  accessCode: String

  """All values that are not equal to given value."""
  accessCode_not: String

  """All values that are contained in given list."""
  accessCode_in: [String!]

  """All values that are not contained in given list."""
  accessCode_not_in: [String!]

  """All values less than the given value."""
  accessCode_lt: String

  """All values less than or equal the given value."""
  accessCode_lte: String

  """All values greater than the given value."""
  accessCode_gt: String

  """All values greater than or equal the given value."""
  accessCode_gte: String

  """All values containing the given string."""
  accessCode_contains: String

  """All values not containing the given string."""
  accessCode_not_contains: String

  """All values starting with the given string."""
  accessCode_starts_with: String

  """All values not starting with the given string."""
  accessCode_not_starts_with: String

  """All values ending with the given string."""
  accessCode_ends_with: String

  """All values not ending with the given string."""
  accessCode_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  plays: GamePlayUpdateManyWithoutGameInput
  entities: EntityUpdateManyWithoutGameInput
  startContainer: EntityUpdateOneInput
  entityTemplateSets: EntityTemplateSetUpdateManyWithoutGamesInput
}

input GameUpdateManyDataInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
}

input GameUpdateManyMutationInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
}

input GameUpdateManyWithoutCooperatorsInput {
  create: [GameCreateWithoutCooperatorsInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutCooperatorsInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
  deleteMany: [GameScalarWhereInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutCooperatorsInput!]
}

input GameUpdateManyWithoutCreatorInput {
  create: [GameCreateWithoutCreatorInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
  deleteMany: [GameScalarWhereInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutCreatorInput!]
}

input GameUpdateManyWithoutEntityTemplateSetsInput {
  create: [GameCreateWithoutEntityTemplateSetsInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutEntityTemplateSetsInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
  deleteMany: [GameScalarWhereInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutEntityTemplateSetsInput!]
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateOneRequiredWithoutPlaysInput {
  create: GameCreateWithoutPlaysInput
  connect: GameWhereUniqueInput
  update: GameUpdateWithoutPlaysDataInput
  upsert: GameUpsertWithoutPlaysInput
}

input GameUpdateOneWithoutEntitiesInput {
  create: GameCreateWithoutEntitiesInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GameUpdateWithoutEntitiesDataInput
  upsert: GameUpsertWithoutEntitiesInput
}

input GameUpdateWithoutCooperatorsDataInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserUpdateOneWithoutGamesCreatedInput
  plays: GamePlayUpdateManyWithoutGameInput
  entities: EntityUpdateManyWithoutGameInput
  startContainer: EntityUpdateOneInput
  entityTemplateSets: EntityTemplateSetUpdateManyWithoutGamesInput
}

input GameUpdateWithoutCreatorDataInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  cooperators: UserUpdateManyWithoutGamesInput
  plays: GamePlayUpdateManyWithoutGameInput
  entities: EntityUpdateManyWithoutGameInput
  startContainer: EntityUpdateOneInput
  entityTemplateSets: EntityTemplateSetUpdateManyWithoutGamesInput
}

input GameUpdateWithoutEntitiesDataInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  plays: GamePlayUpdateManyWithoutGameInput
  startContainer: EntityUpdateOneInput
  entityTemplateSets: EntityTemplateSetUpdateManyWithoutGamesInput
}

input GameUpdateWithoutEntityTemplateSetsDataInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  plays: GamePlayUpdateManyWithoutGameInput
  entities: EntityUpdateManyWithoutGameInput
  startContainer: EntityUpdateOneInput
}

input GameUpdateWithoutPlaysDataInput {
  name: String
  slug: String
  description: String
  image: String
  intro: String
  outro: String
  privacy: PrivacyType
  accessType: AccessType
  accessCode: String
  publishedAt: DateTime
  creator: UserUpdateOneWithoutGamesCreatedInput
  cooperators: UserUpdateManyWithoutGamesInput
  entities: EntityUpdateManyWithoutGameInput
  startContainer: EntityUpdateOneInput
  entityTemplateSets: EntityTemplateSetUpdateManyWithoutGamesInput
}

input GameUpdateWithWhereUniqueWithoutCooperatorsInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutCooperatorsDataInput!
}

input GameUpdateWithWhereUniqueWithoutCreatorInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutCreatorDataInput!
}

input GameUpdateWithWhereUniqueWithoutEntityTemplateSetsInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutEntityTemplateSetsDataInput!
}

input GameUpsertWithoutEntitiesInput {
  update: GameUpdateWithoutEntitiesDataInput!
  create: GameCreateWithoutEntitiesInput!
}

input GameUpsertWithoutPlaysInput {
  update: GameUpdateWithoutPlaysDataInput!
  create: GameCreateWithoutPlaysInput!
}

input GameUpsertWithWhereUniqueWithoutCooperatorsInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutCooperatorsDataInput!
  create: GameCreateWithoutCooperatorsInput!
}

input GameUpsertWithWhereUniqueWithoutCreatorInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutCreatorDataInput!
  create: GameCreateWithoutCreatorInput!
}

input GameUpsertWithWhereUniqueWithoutEntityTemplateSetsInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutEntityTemplateSetsDataInput!
  create: GameCreateWithoutEntityTemplateSetsInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  intro: String

  """All values that are not equal to given value."""
  intro_not: String

  """All values that are contained in given list."""
  intro_in: [String!]

  """All values that are not contained in given list."""
  intro_not_in: [String!]

  """All values less than the given value."""
  intro_lt: String

  """All values less than or equal the given value."""
  intro_lte: String

  """All values greater than the given value."""
  intro_gt: String

  """All values greater than or equal the given value."""
  intro_gte: String

  """All values containing the given string."""
  intro_contains: String

  """All values not containing the given string."""
  intro_not_contains: String

  """All values starting with the given string."""
  intro_starts_with: String

  """All values not starting with the given string."""
  intro_not_starts_with: String

  """All values ending with the given string."""
  intro_ends_with: String

  """All values not ending with the given string."""
  intro_not_ends_with: String
  outro: String

  """All values that are not equal to given value."""
  outro_not: String

  """All values that are contained in given list."""
  outro_in: [String!]

  """All values that are not contained in given list."""
  outro_not_in: [String!]

  """All values less than the given value."""
  outro_lt: String

  """All values less than or equal the given value."""
  outro_lte: String

  """All values greater than the given value."""
  outro_gt: String

  """All values greater than or equal the given value."""
  outro_gte: String

  """All values containing the given string."""
  outro_contains: String

  """All values not containing the given string."""
  outro_not_contains: String

  """All values starting with the given string."""
  outro_starts_with: String

  """All values not starting with the given string."""
  outro_not_starts_with: String

  """All values ending with the given string."""
  outro_ends_with: String

  """All values not ending with the given string."""
  outro_not_ends_with: String
  privacy: PrivacyType

  """All values that are not equal to given value."""
  privacy_not: PrivacyType

  """All values that are contained in given list."""
  privacy_in: [PrivacyType!]

  """All values that are not contained in given list."""
  privacy_not_in: [PrivacyType!]
  accessType: AccessType

  """All values that are not equal to given value."""
  accessType_not: AccessType

  """All values that are contained in given list."""
  accessType_in: [AccessType!]

  """All values that are not contained in given list."""
  accessType_not_in: [AccessType!]
  accessCode: String

  """All values that are not equal to given value."""
  accessCode_not: String

  """All values that are contained in given list."""
  accessCode_in: [String!]

  """All values that are not contained in given list."""
  accessCode_not_in: [String!]

  """All values less than the given value."""
  accessCode_lt: String

  """All values less than or equal the given value."""
  accessCode_lte: String

  """All values greater than the given value."""
  accessCode_gt: String

  """All values greater than or equal the given value."""
  accessCode_gte: String

  """All values containing the given string."""
  accessCode_contains: String

  """All values not containing the given string."""
  accessCode_not_contains: String

  """All values starting with the given string."""
  accessCode_starts_with: String

  """All values not starting with the given string."""
  accessCode_not_starts_with: String

  """All values ending with the given string."""
  accessCode_ends_with: String

  """All values not ending with the given string."""
  accessCode_not_ends_with: String
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  creator: UserWhereInput
  cooperators_every: UserWhereInput
  cooperators_some: UserWhereInput
  cooperators_none: UserWhereInput
  plays_every: GamePlayWhereInput
  plays_some: GamePlayWhereInput
  plays_none: GamePlayWhereInput
  entities_every: EntityWhereInput
  entities_some: EntityWhereInput
  entities_none: EntityWhereInput
  startContainer: EntityWhereInput
  entityTemplateSets_every: EntityTemplateSetWhereInput
  entityTemplateSets_some: EntityTemplateSetWhereInput
  entityTemplateSets_none: EntityTemplateSetWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

type Hint implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: HintTemplate
  text: String!
  delay: Int
  actionRequirement: ActionRequirement
}

"""A connection to a list of items."""
type HintConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HintEdge]!
  aggregate: AggregateHint!
}

input HintCreateInput {
  id: ID
  text: String!
  delay: Int
  template: HintTemplateCreateOneInput
  actionRequirement: ActionRequirementCreateOneWithoutHintsInput
}

input HintCreateManyWithoutActionRequirementInput {
  create: [HintCreateWithoutActionRequirementInput!]
  connect: [HintWhereUniqueInput!]
}

input HintCreateWithoutActionRequirementInput {
  id: ID
  text: String!
  delay: Int
  template: HintTemplateCreateOneInput
}

"""An edge in a connection."""
type HintEdge {
  """The item at the end of the edge."""
  node: Hint!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HintOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
  delay_ASC
  delay_DESC
}

type HintPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  delay: Int
}

input HintScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HintScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
}

type HintSubscriptionPayload {
  mutation: MutationType!
  node: Hint
  updatedFields: [String!]
  previousValues: HintPreviousValues
}

input HintSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HintSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HintWhereInput
}

type HintTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  delay: Int
  actionRequirement: ActionRequirementTemplate
}

"""A connection to a list of items."""
type HintTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HintTemplateEdge]!
  aggregate: AggregateHintTemplate!
}

input HintTemplateCreateInput {
  id: ID
  text: String!
  delay: Int
  actionRequirement: ActionRequirementTemplateCreateOneWithoutHintsInput
}

input HintTemplateCreateManyWithoutActionRequirementInput {
  create: [HintTemplateCreateWithoutActionRequirementInput!]
  connect: [HintTemplateWhereUniqueInput!]
}

input HintTemplateCreateOneInput {
  create: HintTemplateCreateInput
  connect: HintTemplateWhereUniqueInput
}

input HintTemplateCreateWithoutActionRequirementInput {
  id: ID
  text: String!
  delay: Int
}

"""An edge in a connection."""
type HintTemplateEdge {
  """The item at the end of the edge."""
  node: HintTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HintTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
  delay_ASC
  delay_DESC
}

type HintTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  delay: Int
}

input HintTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HintTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
}

type HintTemplateSubscriptionPayload {
  mutation: MutationType!
  node: HintTemplate
  updatedFields: [String!]
  previousValues: HintTemplatePreviousValues
}

input HintTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HintTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HintTemplateWhereInput
}

input HintTemplateUpdateDataInput {
  text: String
  delay: Int
  actionRequirement: ActionRequirementTemplateUpdateOneWithoutHintsInput
}

input HintTemplateUpdateInput {
  text: String
  delay: Int
  actionRequirement: ActionRequirementTemplateUpdateOneWithoutHintsInput
}

input HintTemplateUpdateManyDataInput {
  text: String
  delay: Int
}

input HintTemplateUpdateManyMutationInput {
  text: String
  delay: Int
}

input HintTemplateUpdateManyWithoutActionRequirementInput {
  create: [HintTemplateCreateWithoutActionRequirementInput!]
  connect: [HintTemplateWhereUniqueInput!]
  set: [HintTemplateWhereUniqueInput!]
  disconnect: [HintTemplateWhereUniqueInput!]
  delete: [HintTemplateWhereUniqueInput!]
  update: [HintTemplateUpdateWithWhereUniqueWithoutActionRequirementInput!]
  updateMany: [HintTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [HintTemplateScalarWhereInput!]
  upsert: [HintTemplateUpsertWithWhereUniqueWithoutActionRequirementInput!]
}

input HintTemplateUpdateManyWithWhereNestedInput {
  where: HintTemplateScalarWhereInput!
  data: HintTemplateUpdateManyDataInput!
}

input HintTemplateUpdateOneInput {
  create: HintTemplateCreateInput
  connect: HintTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: HintTemplateUpdateDataInput
  upsert: HintTemplateUpsertNestedInput
}

input HintTemplateUpdateWithoutActionRequirementDataInput {
  text: String
  delay: Int
}

input HintTemplateUpdateWithWhereUniqueWithoutActionRequirementInput {
  where: HintTemplateWhereUniqueInput!
  data: HintTemplateUpdateWithoutActionRequirementDataInput!
}

input HintTemplateUpsertNestedInput {
  update: HintTemplateUpdateDataInput!
  create: HintTemplateCreateInput!
}

input HintTemplateUpsertWithWhereUniqueWithoutActionRequirementInput {
  where: HintTemplateWhereUniqueInput!
  update: HintTemplateUpdateWithoutActionRequirementDataInput!
  create: HintTemplateCreateWithoutActionRequirementInput!
}

input HintTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [HintTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
  actionRequirement: ActionRequirementTemplateWhereInput
}

input HintTemplateWhereUniqueInput {
  id: ID
}

input HintUpdateInput {
  text: String
  delay: Int
  template: HintTemplateUpdateOneInput
  actionRequirement: ActionRequirementUpdateOneWithoutHintsInput
}

input HintUpdateManyDataInput {
  text: String
  delay: Int
}

input HintUpdateManyMutationInput {
  text: String
  delay: Int
}

input HintUpdateManyWithoutActionRequirementInput {
  create: [HintCreateWithoutActionRequirementInput!]
  connect: [HintWhereUniqueInput!]
  set: [HintWhereUniqueInput!]
  disconnect: [HintWhereUniqueInput!]
  delete: [HintWhereUniqueInput!]
  update: [HintUpdateWithWhereUniqueWithoutActionRequirementInput!]
  updateMany: [HintUpdateManyWithWhereNestedInput!]
  deleteMany: [HintScalarWhereInput!]
  upsert: [HintUpsertWithWhereUniqueWithoutActionRequirementInput!]
}

input HintUpdateManyWithWhereNestedInput {
  where: HintScalarWhereInput!
  data: HintUpdateManyDataInput!
}

input HintUpdateWithoutActionRequirementDataInput {
  text: String
  delay: Int
  template: HintTemplateUpdateOneInput
}

input HintUpdateWithWhereUniqueWithoutActionRequirementInput {
  where: HintWhereUniqueInput!
  data: HintUpdateWithoutActionRequirementDataInput!
}

input HintUpsertWithWhereUniqueWithoutActionRequirementInput {
  where: HintWhereUniqueInput!
  update: HintUpdateWithoutActionRequirementDataInput!
  create: HintCreateWithoutActionRequirementInput!
}

input HintWhereInput {
  """Logical AND on all given filters."""
  AND: [HintWhereInput!]

  """Logical OR on all given filters."""
  OR: [HintWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HintWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  delay: Int

  """All values that are not equal to given value."""
  delay_not: Int

  """All values that are contained in given list."""
  delay_in: [Int!]

  """All values that are not contained in given list."""
  delay_not_in: [Int!]

  """All values less than the given value."""
  delay_lt: Int

  """All values less than or equal the given value."""
  delay_lte: Int

  """All values greater than the given value."""
  delay_gt: Int

  """All values greater than or equal the given value."""
  delay_gte: Int
  template: HintTemplateWhereInput
  actionRequirement: ActionRequirementWhereInput
}

input HintWhereUniqueInput {
  id: ID
}

type InformationSlot implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: InformationSlotTemplate
  name: String
  description: String
  allowedTypes(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldType!]
  field: FieldGroup
  entity: Entity!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
}

"""A connection to a list of items."""
type InformationSlotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InformationSlotEdge]!
  aggregate: AggregateInformationSlot!
}

input InformationSlotCreateInput {
  id: ID
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  field: FieldCreateOneWithoutInformationSlotsInput
  entity: EntityCreateOneWithoutInformationSlotsInput!
  states: StateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotCreateManyWithoutEntityInput {
  create: [InformationSlotCreateWithoutEntityInput!]
  connect: [InformationSlotWhereUniqueInput!]
}

input InformationSlotCreateManyWithoutFieldInput {
  create: [InformationSlotCreateWithoutFieldInput!]
  connect: [InformationSlotWhereUniqueInput!]
}

input InformationSlotCreateManyWithoutStatesInput {
  create: [InformationSlotCreateWithoutStatesInput!]
  connect: [InformationSlotWhereUniqueInput!]
}

input InformationSlotCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  field: FieldCreateOneWithoutInformationSlotsInput
  states: StateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotCreateWithoutFieldInput {
  id: ID
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  entity: EntityCreateOneWithoutInformationSlotsInput!
  states: StateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotCreateWithoutStatesInput {
  id: ID
  name: String
  description: String
  template: InformationSlotTemplateCreateOneInput
  allowedTypes: FieldTypeCreateManyInput
  field: FieldCreateOneWithoutInformationSlotsInput
  entity: EntityCreateOneWithoutInformationSlotsInput!
}

"""An edge in a connection."""
type InformationSlotEdge {
  """The item at the end of the edge."""
  node: InformationSlot!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InformationSlotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type InformationSlotPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input InformationSlotScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type InformationSlotSubscriptionPayload {
  mutation: MutationType!
  node: InformationSlot
  updatedFields: [String!]
  previousValues: InformationSlotPreviousValues
}

input InformationSlotSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InformationSlotWhereInput
}

type InformationSlotTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  allowedTypes(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldType!]
  entity: EntityTemplate!
  states(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate!]
}

"""A connection to a list of items."""
type InformationSlotTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InformationSlotTemplateEdge]!
  aggregate: AggregateInformationSlotTemplate!
}

input InformationSlotTemplateCreateInput {
  id: ID
  name: String
  description: String
  allowedTypes: FieldTypeCreateManyInput
  entity: EntityTemplateCreateOneWithoutInformationSlotsInput!
  states: StateTemplateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateCreateManyWithoutEntityInput {
  create: [InformationSlotTemplateCreateWithoutEntityInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
}

input InformationSlotTemplateCreateManyWithoutStatesInput {
  create: [InformationSlotTemplateCreateWithoutStatesInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
}

input InformationSlotTemplateCreateOneInput {
  create: InformationSlotTemplateCreateInput
  connect: InformationSlotTemplateWhereUniqueInput
}

input InformationSlotTemplateCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  allowedTypes: FieldTypeCreateManyInput
  states: StateTemplateCreateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateCreateWithoutStatesInput {
  id: ID
  name: String
  description: String
  allowedTypes: FieldTypeCreateManyInput
  entity: EntityTemplateCreateOneWithoutInformationSlotsInput!
}

"""An edge in a connection."""
type InformationSlotTemplateEdge {
  """The item at the end of the edge."""
  node: InformationSlotTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InformationSlotTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type InformationSlotTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input InformationSlotTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type InformationSlotTemplateSubscriptionPayload {
  mutation: MutationType!
  node: InformationSlotTemplate
  updatedFields: [String!]
  previousValues: InformationSlotTemplatePreviousValues
}

input InformationSlotTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InformationSlotTemplateWhereInput
}

input InformationSlotTemplateUpdateDataInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput
  states: StateTemplateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateUpdateInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput
  states: StateTemplateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateUpdateManyDataInput {
  name: String
  description: String
}

input InformationSlotTemplateUpdateManyMutationInput {
  name: String
  description: String
}

input InformationSlotTemplateUpdateManyWithoutEntityInput {
  create: [InformationSlotTemplateCreateWithoutEntityInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
  set: [InformationSlotTemplateWhereUniqueInput!]
  disconnect: [InformationSlotTemplateWhereUniqueInput!]
  delete: [InformationSlotTemplateWhereUniqueInput!]
  update: [InformationSlotTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [InformationSlotTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotTemplateScalarWhereInput!]
  upsert: [InformationSlotTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input InformationSlotTemplateUpdateManyWithoutStatesInput {
  create: [InformationSlotTemplateCreateWithoutStatesInput!]
  connect: [InformationSlotTemplateWhereUniqueInput!]
  set: [InformationSlotTemplateWhereUniqueInput!]
  disconnect: [InformationSlotTemplateWhereUniqueInput!]
  delete: [InformationSlotTemplateWhereUniqueInput!]
  update: [InformationSlotTemplateUpdateWithWhereUniqueWithoutStatesInput!]
  updateMany: [InformationSlotTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotTemplateScalarWhereInput!]
  upsert: [InformationSlotTemplateUpsertWithWhereUniqueWithoutStatesInput!]
}

input InformationSlotTemplateUpdateManyWithWhereNestedInput {
  where: InformationSlotTemplateScalarWhereInput!
  data: InformationSlotTemplateUpdateManyDataInput!
}

input InformationSlotTemplateUpdateOneInput {
  create: InformationSlotTemplateCreateInput
  connect: InformationSlotTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InformationSlotTemplateUpdateDataInput
  upsert: InformationSlotTemplateUpsertNestedInput
}

input InformationSlotTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  states: StateTemplateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotTemplateUpdateWithoutStatesDataInput {
  name: String
  description: String
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityTemplateUpdateOneRequiredWithoutInformationSlotsInput
}

input InformationSlotTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: InformationSlotTemplateWhereUniqueInput!
  data: InformationSlotTemplateUpdateWithoutEntityDataInput!
}

input InformationSlotTemplateUpdateWithWhereUniqueWithoutStatesInput {
  where: InformationSlotTemplateWhereUniqueInput!
  data: InformationSlotTemplateUpdateWithoutStatesDataInput!
}

input InformationSlotTemplateUpsertNestedInput {
  update: InformationSlotTemplateUpdateDataInput!
  create: InformationSlotTemplateCreateInput!
}

input InformationSlotTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: InformationSlotTemplateWhereUniqueInput!
  update: InformationSlotTemplateUpdateWithoutEntityDataInput!
  create: InformationSlotTemplateCreateWithoutEntityInput!
}

input InformationSlotTemplateUpsertWithWhereUniqueWithoutStatesInput {
  where: InformationSlotTemplateWhereUniqueInput!
  update: InformationSlotTemplateUpdateWithoutStatesDataInput!
  create: InformationSlotTemplateCreateWithoutStatesInput!
}

input InformationSlotTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  allowedTypes_every: FieldTypeWhereInput
  allowedTypes_some: FieldTypeWhereInput
  allowedTypes_none: FieldTypeWhereInput
  entity: EntityTemplateWhereInput
  states_every: StateTemplateWhereInput
  states_some: StateTemplateWhereInput
  states_none: StateTemplateWhereInput
}

input InformationSlotTemplateWhereUniqueInput {
  id: ID
}

input InformationSlotUpdateInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  field: FieldUpdateOneWithoutInformationSlotsInput
  entity: EntityUpdateOneRequiredWithoutInformationSlotsInput
  states: StateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotUpdateManyDataInput {
  name: String
  description: String
}

input InformationSlotUpdateManyMutationInput {
  name: String
  description: String
}

input InformationSlotUpdateManyWithoutEntityInput {
  create: [InformationSlotCreateWithoutEntityInput!]
  connect: [InformationSlotWhereUniqueInput!]
  set: [InformationSlotWhereUniqueInput!]
  disconnect: [InformationSlotWhereUniqueInput!]
  delete: [InformationSlotWhereUniqueInput!]
  update: [InformationSlotUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [InformationSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotScalarWhereInput!]
  upsert: [InformationSlotUpsertWithWhereUniqueWithoutEntityInput!]
}

input InformationSlotUpdateManyWithoutFieldInput {
  create: [InformationSlotCreateWithoutFieldInput!]
  connect: [InformationSlotWhereUniqueInput!]
  set: [InformationSlotWhereUniqueInput!]
  disconnect: [InformationSlotWhereUniqueInput!]
  delete: [InformationSlotWhereUniqueInput!]
  update: [InformationSlotUpdateWithWhereUniqueWithoutFieldInput!]
  updateMany: [InformationSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotScalarWhereInput!]
  upsert: [InformationSlotUpsertWithWhereUniqueWithoutFieldInput!]
}

input InformationSlotUpdateManyWithoutStatesInput {
  create: [InformationSlotCreateWithoutStatesInput!]
  connect: [InformationSlotWhereUniqueInput!]
  set: [InformationSlotWhereUniqueInput!]
  disconnect: [InformationSlotWhereUniqueInput!]
  delete: [InformationSlotWhereUniqueInput!]
  update: [InformationSlotUpdateWithWhereUniqueWithoutStatesInput!]
  updateMany: [InformationSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [InformationSlotScalarWhereInput!]
  upsert: [InformationSlotUpsertWithWhereUniqueWithoutStatesInput!]
}

input InformationSlotUpdateManyWithWhereNestedInput {
  where: InformationSlotScalarWhereInput!
  data: InformationSlotUpdateManyDataInput!
}

input InformationSlotUpdateWithoutEntityDataInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  field: FieldUpdateOneWithoutInformationSlotsInput
  states: StateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotUpdateWithoutFieldDataInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  entity: EntityUpdateOneRequiredWithoutInformationSlotsInput
  states: StateUpdateManyWithoutAvailableInformationSlotsInput
}

input InformationSlotUpdateWithoutStatesDataInput {
  name: String
  description: String
  template: InformationSlotTemplateUpdateOneInput
  allowedTypes: FieldTypeUpdateManyInput
  field: FieldUpdateOneWithoutInformationSlotsInput
  entity: EntityUpdateOneRequiredWithoutInformationSlotsInput
}

input InformationSlotUpdateWithWhereUniqueWithoutEntityInput {
  where: InformationSlotWhereUniqueInput!
  data: InformationSlotUpdateWithoutEntityDataInput!
}

input InformationSlotUpdateWithWhereUniqueWithoutFieldInput {
  where: InformationSlotWhereUniqueInput!
  data: InformationSlotUpdateWithoutFieldDataInput!
}

input InformationSlotUpdateWithWhereUniqueWithoutStatesInput {
  where: InformationSlotWhereUniqueInput!
  data: InformationSlotUpdateWithoutStatesDataInput!
}

input InformationSlotUpsertWithWhereUniqueWithoutEntityInput {
  where: InformationSlotWhereUniqueInput!
  update: InformationSlotUpdateWithoutEntityDataInput!
  create: InformationSlotCreateWithoutEntityInput!
}

input InformationSlotUpsertWithWhereUniqueWithoutFieldInput {
  where: InformationSlotWhereUniqueInput!
  update: InformationSlotUpdateWithoutFieldDataInput!
  create: InformationSlotCreateWithoutFieldInput!
}

input InformationSlotUpsertWithWhereUniqueWithoutStatesInput {
  where: InformationSlotWhereUniqueInput!
  update: InformationSlotUpdateWithoutStatesDataInput!
  create: InformationSlotCreateWithoutStatesInput!
}

input InformationSlotWhereInput {
  """Logical AND on all given filters."""
  AND: [InformationSlotWhereInput!]

  """Logical OR on all given filters."""
  OR: [InformationSlotWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InformationSlotWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  template: InformationSlotTemplateWhereInput
  allowedTypes_every: FieldTypeWhereInput
  allowedTypes_some: FieldTypeWhereInput
  allowedTypes_none: FieldTypeWhereInput
  field: FieldWhereInput
  entity: EntityWhereInput
  states_every: StateWhereInput
  states_some: StateWhereInput
  states_none: StateWhereInput
}

input InformationSlotWhereUniqueInput {
  id: ID
}

type InputRequirement implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: InputRequirementTemplate
  key: String!
  field: FieldGroup
  value: String
  not: Boolean!
  comparator: ComparatorType!
  payload: PayloadRequirement!
}

"""A connection to a list of items."""
type InputRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InputRequirementEdge]!
  aggregate: AggregateInputRequirement!
}

input InputRequirementCreateInput {
  id: ID
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateCreateOneInput
  field: FieldCreateOneInput
  payload: PayloadRequirementCreateOneWithoutRequiredInputInput!
}

input InputRequirementCreateOneWithoutPayloadInput {
  create: InputRequirementCreateWithoutPayloadInput
  connect: InputRequirementWhereUniqueInput
}

input InputRequirementCreateWithoutPayloadInput {
  id: ID
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateCreateOneInput
  field: FieldCreateOneInput
}

"""An edge in a connection."""
type InputRequirementEdge {
  """The item at the end of the edge."""
  node: InputRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InputRequirementOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  not_ASC
  not_DESC
  comparator_ASC
  comparator_DESC
}

type InputRequirementPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  value: String
  not: Boolean!
  comparator: ComparatorType!
}

type InputRequirementSubscriptionPayload {
  mutation: MutationType!
  node: InputRequirement
  updatedFields: [String!]
  previousValues: InputRequirementPreviousValues
}

input InputRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InputRequirementWhereInput
}

type InputRequirementTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  field: FieldTemplate
  value: String
  not: Boolean!
  comparator: ComparatorType!
  payload: PayloadRequirementTemplate
}

"""A connection to a list of items."""
type InputRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InputRequirementTemplateEdge]!
  aggregate: AggregateInputRequirementTemplate!
}

input InputRequirementTemplateCreateInput {
  id: ID
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateCreateOneInput
  payload: PayloadRequirementTemplateCreateOneWithoutRequiredInputInput
}

input InputRequirementTemplateCreateOneInput {
  create: InputRequirementTemplateCreateInput
  connect: InputRequirementTemplateWhereUniqueInput
}

input InputRequirementTemplateCreateOneWithoutPayloadInput {
  create: InputRequirementTemplateCreateWithoutPayloadInput
  connect: InputRequirementTemplateWhereUniqueInput
}

input InputRequirementTemplateCreateWithoutPayloadInput {
  id: ID
  key: String!
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateCreateOneInput
}

"""An edge in a connection."""
type InputRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: InputRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InputRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  not_ASC
  not_DESC
  comparator_ASC
  comparator_DESC
}

type InputRequirementTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  value: String
  not: Boolean!
  comparator: ComparatorType!
}

type InputRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: InputRequirementTemplate
  updatedFields: [String!]
  previousValues: InputRequirementTemplatePreviousValues
}

input InputRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InputRequirementTemplateWhereInput
}

input InputRequirementTemplateUpdateDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateUpdateOneInput
  payload: PayloadRequirementTemplateUpdateOneWithoutRequiredInputInput
}

input InputRequirementTemplateUpdateInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateUpdateOneInput
  payload: PayloadRequirementTemplateUpdateOneWithoutRequiredInputInput
}

input InputRequirementTemplateUpdateManyMutationInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
}

input InputRequirementTemplateUpdateOneInput {
  create: InputRequirementTemplateCreateInput
  connect: InputRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InputRequirementTemplateUpdateDataInput
  upsert: InputRequirementTemplateUpsertNestedInput
}

input InputRequirementTemplateUpdateOneWithoutPayloadInput {
  create: InputRequirementTemplateCreateWithoutPayloadInput
  connect: InputRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InputRequirementTemplateUpdateWithoutPayloadDataInput
  upsert: InputRequirementTemplateUpsertWithoutPayloadInput
}

input InputRequirementTemplateUpdateWithoutPayloadDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  field: FieldTemplateUpdateOneInput
}

input InputRequirementTemplateUpsertNestedInput {
  update: InputRequirementTemplateUpdateDataInput!
  create: InputRequirementTemplateCreateInput!
}

input InputRequirementTemplateUpsertWithoutPayloadInput {
  update: InputRequirementTemplateUpdateWithoutPayloadDataInput!
  create: InputRequirementTemplateCreateWithoutPayloadInput!
}

input InputRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  comparator: ComparatorType

  """All values that are not equal to given value."""
  comparator_not: ComparatorType

  """All values that are contained in given list."""
  comparator_in: [ComparatorType!]

  """All values that are not contained in given list."""
  comparator_not_in: [ComparatorType!]
  field: FieldTemplateWhereInput
  payload: PayloadRequirementTemplateWhereInput
}

input InputRequirementTemplateWhereUniqueInput {
  id: ID
}

input InputRequirementUpdateInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateUpdateOneInput
  field: FieldUpdateOneInput
  payload: PayloadRequirementUpdateOneRequiredWithoutRequiredInputInput
}

input InputRequirementUpdateManyMutationInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
}

input InputRequirementUpdateOneWithoutPayloadInput {
  create: InputRequirementCreateWithoutPayloadInput
  connect: InputRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InputRequirementUpdateWithoutPayloadDataInput
  upsert: InputRequirementUpsertWithoutPayloadInput
}

input InputRequirementUpdateWithoutPayloadDataInput {
  key: String
  value: String
  not: Boolean
  comparator: ComparatorType
  template: InputRequirementTemplateUpdateOneInput
  field: FieldUpdateOneInput
}

input InputRequirementUpsertWithoutPayloadInput {
  update: InputRequirementUpdateWithoutPayloadDataInput!
  create: InputRequirementCreateWithoutPayloadInput!
}

input InputRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [InputRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [InputRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InputRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  comparator: ComparatorType

  """All values that are not equal to given value."""
  comparator_not: ComparatorType

  """All values that are contained in given list."""
  comparator_in: [ComparatorType!]

  """All values that are not contained in given list."""
  comparator_not_in: [ComparatorType!]
  template: InputRequirementTemplateWhereInput
  field: FieldWhereInput
  payload: PayloadRequirementWhereInput
}

input InputRequirementWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createInformationSlot(data: InformationSlotCreateInput!): InformationSlot!
  createStateTransition(data: StateTransitionCreateInput!): StateTransition!
  createEntrance(data: EntranceCreateInput!): Entrance!
  createPortal(data: PortalCreateInput!): Portal!
  createActionRequirement(data: ActionRequirementCreateInput!): ActionRequirement!
  createHint(data: HintCreateInput!): Hint!
  createPayloadRequirement(data: PayloadRequirementCreateInput!): PayloadRequirement!
  createEntityRequirement(data: EntityRequirementCreateInput!): EntityRequirement!
  createInputRequirement(data: InputRequirementCreateInput!): InputRequirement!
  createGame(data: GameCreateInput!): Game!
  createEntityTemplateSet(data: EntityTemplateSetCreateInput!): EntityTemplateSet!
  createUser(data: UserCreateInput!): User!
  createGamePlay(data: GamePlayCreateInput!): GamePlay!
  createSession(data: SessionCreateInput!): Session!
  createAction(data: ActionCreateInput!): Action!
  createActionPayload(data: ActionPayloadCreateInput!): ActionPayload!
  createService(data: ServiceCreateInput!): Service!
  createApiKey(data: ApiKeyCreateInput!): ApiKey!
  createActionPayloadInputValue(data: ActionPayloadInputValueCreateInput!): ActionPayloadInputValue!
  createPortalTemplate(data: PortalTemplateCreateInput!): PortalTemplate!
  createInputRequirementTemplate(data: InputRequirementTemplateCreateInput!): InputRequirementTemplate!
  createPhysicalPosition(data: PhysicalPositionCreateInput!): PhysicalPosition!
  createEntityTemplate(data: EntityTemplateCreateInput!): EntityTemplate!
  createPosition(data: PositionCreateInput!): Position!
  createEntityRequirementTemplate(data: EntityRequirementTemplateCreateInput!): EntityRequirementTemplate!
  createInformationSlotTemplate(data: InformationSlotTemplateCreateInput!): InformationSlotTemplate!
  createEntranceTemplate(data: EntranceTemplateCreateInput!): EntranceTemplate!
  createEntity(data: EntityCreateInput!): Entity!
  createPayloadRequirementTemplate(data: PayloadRequirementTemplateCreateInput!): PayloadRequirementTemplate!
  createField(data: FieldCreateInput!): FieldGroup!
  createActionRequirementTemplate(data: ActionRequirementTemplateCreateInput!): ActionRequirementTemplate!
  createStateTransitionTemplate(data: StateTransitionTemplateCreateInput!): StateTransitionTemplate!
  createStateTemplate(data: StateTemplateCreateInput!): StateTemplate!
  createHintTemplate(data: HintTemplateCreateInput!): HintTemplate!
  createFieldType(data: FieldTypeCreateInput!): FieldType!
  createState(data: StateCreateInput!): State!
  createFieldTemplate(data: FieldTemplateCreateInput!): FieldTemplate!
  updateInformationSlot(data: InformationSlotUpdateInput!, where: InformationSlotWhereUniqueInput!): InformationSlot
  updateStateTransition(data: StateTransitionUpdateInput!, where: StateTransitionWhereUniqueInput!): StateTransition
  updateEntrance(data: EntranceUpdateInput!, where: EntranceWhereUniqueInput!): Entrance
  updatePortal(data: PortalUpdateInput!, where: PortalWhereUniqueInput!): Portal
  updateActionRequirement(data: ActionRequirementUpdateInput!, where: ActionRequirementWhereUniqueInput!): ActionRequirement
  updateHint(data: HintUpdateInput!, where: HintWhereUniqueInput!): Hint
  updatePayloadRequirement(data: PayloadRequirementUpdateInput!, where: PayloadRequirementWhereUniqueInput!): PayloadRequirement
  updateEntityRequirement(data: EntityRequirementUpdateInput!, where: EntityRequirementWhereUniqueInput!): EntityRequirement
  updateInputRequirement(data: InputRequirementUpdateInput!, where: InputRequirementWhereUniqueInput!): InputRequirement
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateEntityTemplateSet(data: EntityTemplateSetUpdateInput!, where: EntityTemplateSetWhereUniqueInput!): EntityTemplateSet
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGamePlay(data: GamePlayUpdateInput!, where: GamePlayWhereUniqueInput!): GamePlay
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateActionPayload(data: ActionPayloadUpdateInput!, where: ActionPayloadWhereUniqueInput!): ActionPayload
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateApiKey(data: ApiKeyUpdateInput!, where: ApiKeyWhereUniqueInput!): ApiKey
  updateActionPayloadInputValue(data: ActionPayloadInputValueUpdateInput!, where: ActionPayloadInputValueWhereUniqueInput!): ActionPayloadInputValue
  updatePortalTemplate(data: PortalTemplateUpdateInput!, where: PortalTemplateWhereUniqueInput!): PortalTemplate
  updateInputRequirementTemplate(data: InputRequirementTemplateUpdateInput!, where: InputRequirementTemplateWhereUniqueInput!): InputRequirementTemplate
  updatePhysicalPosition(data: PhysicalPositionUpdateInput!, where: PhysicalPositionWhereUniqueInput!): PhysicalPosition
  updateEntityTemplate(data: EntityTemplateUpdateInput!, where: EntityTemplateWhereUniqueInput!): EntityTemplate
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateEntityRequirementTemplate(data: EntityRequirementTemplateUpdateInput!, where: EntityRequirementTemplateWhereUniqueInput!): EntityRequirementTemplate
  updateInformationSlotTemplate(data: InformationSlotTemplateUpdateInput!, where: InformationSlotTemplateWhereUniqueInput!): InformationSlotTemplate
  updateEntranceTemplate(data: EntranceTemplateUpdateInput!, where: EntranceTemplateWhereUniqueInput!): EntranceTemplate
  updateEntity(data: EntityUpdateInput!, where: EntityWhereUniqueInput!): Entity
  updatePayloadRequirementTemplate(data: PayloadRequirementTemplateUpdateInput!, where: PayloadRequirementTemplateWhereUniqueInput!): PayloadRequirementTemplate
  updateField(data: FieldUpdateInput!, where: FieldWhereUniqueInput!): FieldGroup
  updateActionRequirementTemplate(data: ActionRequirementTemplateUpdateInput!, where: ActionRequirementTemplateWhereUniqueInput!): ActionRequirementTemplate
  updateStateTransitionTemplate(data: StateTransitionTemplateUpdateInput!, where: StateTransitionTemplateWhereUniqueInput!): StateTransitionTemplate
  updateStateTemplate(data: StateTemplateUpdateInput!, where: StateTemplateWhereUniqueInput!): StateTemplate
  updateHintTemplate(data: HintTemplateUpdateInput!, where: HintTemplateWhereUniqueInput!): HintTemplate
  updateFieldType(data: FieldTypeUpdateInput!, where: FieldTypeWhereUniqueInput!): FieldType
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateFieldTemplate(data: FieldTemplateUpdateInput!, where: FieldTemplateWhereUniqueInput!): FieldTemplate
  deleteInformationSlot(where: InformationSlotWhereUniqueInput!): InformationSlot
  deleteStateTransition(where: StateTransitionWhereUniqueInput!): StateTransition
  deleteEntrance(where: EntranceWhereUniqueInput!): Entrance
  deletePortal(where: PortalWhereUniqueInput!): Portal
  deleteActionRequirement(where: ActionRequirementWhereUniqueInput!): ActionRequirement
  deleteHint(where: HintWhereUniqueInput!): Hint
  deletePayloadRequirement(where: PayloadRequirementWhereUniqueInput!): PayloadRequirement
  deleteEntityRequirement(where: EntityRequirementWhereUniqueInput!): EntityRequirement
  deleteInputRequirement(where: InputRequirementWhereUniqueInput!): InputRequirement
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteEntityTemplateSet(where: EntityTemplateSetWhereUniqueInput!): EntityTemplateSet
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGamePlay(where: GamePlayWhereUniqueInput!): GamePlay
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActionPayload(where: ActionPayloadWhereUniqueInput!): ActionPayload
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteApiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  deleteActionPayloadInputValue(where: ActionPayloadInputValueWhereUniqueInput!): ActionPayloadInputValue
  deletePortalTemplate(where: PortalTemplateWhereUniqueInput!): PortalTemplate
  deleteInputRequirementTemplate(where: InputRequirementTemplateWhereUniqueInput!): InputRequirementTemplate
  deletePhysicalPosition(where: PhysicalPositionWhereUniqueInput!): PhysicalPosition
  deleteEntityTemplate(where: EntityTemplateWhereUniqueInput!): EntityTemplate
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteEntityRequirementTemplate(where: EntityRequirementTemplateWhereUniqueInput!): EntityRequirementTemplate
  deleteInformationSlotTemplate(where: InformationSlotTemplateWhereUniqueInput!): InformationSlotTemplate
  deleteEntranceTemplate(where: EntranceTemplateWhereUniqueInput!): EntranceTemplate
  deleteEntity(where: EntityWhereUniqueInput!): Entity
  deletePayloadRequirementTemplate(where: PayloadRequirementTemplateWhereUniqueInput!): PayloadRequirementTemplate
  deleteField(where: FieldWhereUniqueInput!): FieldGroup
  deleteActionRequirementTemplate(where: ActionRequirementTemplateWhereUniqueInput!): ActionRequirementTemplate
  deleteStateTransitionTemplate(where: StateTransitionTemplateWhereUniqueInput!): StateTransitionTemplate
  deleteStateTemplate(where: StateTemplateWhereUniqueInput!): StateTemplate
  deleteHintTemplate(where: HintTemplateWhereUniqueInput!): HintTemplate
  deleteFieldType(where: FieldTypeWhereUniqueInput!): FieldType
  deleteState(where: StateWhereUniqueInput!): State
  deleteFieldTemplate(where: FieldTemplateWhereUniqueInput!): FieldTemplate
  upsertInformationSlot(where: InformationSlotWhereUniqueInput!, create: InformationSlotCreateInput!, update: InformationSlotUpdateInput!): InformationSlot!
  upsertStateTransition(where: StateTransitionWhereUniqueInput!, create: StateTransitionCreateInput!, update: StateTransitionUpdateInput!): StateTransition!
  upsertEntrance(where: EntranceWhereUniqueInput!, create: EntranceCreateInput!, update: EntranceUpdateInput!): Entrance!
  upsertPortal(where: PortalWhereUniqueInput!, create: PortalCreateInput!, update: PortalUpdateInput!): Portal!
  upsertActionRequirement(where: ActionRequirementWhereUniqueInput!, create: ActionRequirementCreateInput!, update: ActionRequirementUpdateInput!): ActionRequirement!
  upsertHint(where: HintWhereUniqueInput!, create: HintCreateInput!, update: HintUpdateInput!): Hint!
  upsertPayloadRequirement(where: PayloadRequirementWhereUniqueInput!, create: PayloadRequirementCreateInput!, update: PayloadRequirementUpdateInput!): PayloadRequirement!
  upsertEntityRequirement(where: EntityRequirementWhereUniqueInput!, create: EntityRequirementCreateInput!, update: EntityRequirementUpdateInput!): EntityRequirement!
  upsertInputRequirement(where: InputRequirementWhereUniqueInput!, create: InputRequirementCreateInput!, update: InputRequirementUpdateInput!): InputRequirement!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertEntityTemplateSet(where: EntityTemplateSetWhereUniqueInput!, create: EntityTemplateSetCreateInput!, update: EntityTemplateSetUpdateInput!): EntityTemplateSet!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGamePlay(where: GamePlayWhereUniqueInput!, create: GamePlayCreateInput!, update: GamePlayUpdateInput!): GamePlay!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertAction(where: ActionWhereUniqueInput!, create: ActionCreateInput!, update: ActionUpdateInput!): Action!
  upsertActionPayload(where: ActionPayloadWhereUniqueInput!, create: ActionPayloadCreateInput!, update: ActionPayloadUpdateInput!): ActionPayload!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  upsertApiKey(where: ApiKeyWhereUniqueInput!, create: ApiKeyCreateInput!, update: ApiKeyUpdateInput!): ApiKey!
  upsertActionPayloadInputValue(where: ActionPayloadInputValueWhereUniqueInput!, create: ActionPayloadInputValueCreateInput!, update: ActionPayloadInputValueUpdateInput!): ActionPayloadInputValue!
  upsertPortalTemplate(where: PortalTemplateWhereUniqueInput!, create: PortalTemplateCreateInput!, update: PortalTemplateUpdateInput!): PortalTemplate!
  upsertInputRequirementTemplate(where: InputRequirementTemplateWhereUniqueInput!, create: InputRequirementTemplateCreateInput!, update: InputRequirementTemplateUpdateInput!): InputRequirementTemplate!
  upsertPhysicalPosition(where: PhysicalPositionWhereUniqueInput!, create: PhysicalPositionCreateInput!, update: PhysicalPositionUpdateInput!): PhysicalPosition!
  upsertEntityTemplate(where: EntityTemplateWhereUniqueInput!, create: EntityTemplateCreateInput!, update: EntityTemplateUpdateInput!): EntityTemplate!
  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!
  upsertEntityRequirementTemplate(where: EntityRequirementTemplateWhereUniqueInput!, create: EntityRequirementTemplateCreateInput!, update: EntityRequirementTemplateUpdateInput!): EntityRequirementTemplate!
  upsertInformationSlotTemplate(where: InformationSlotTemplateWhereUniqueInput!, create: InformationSlotTemplateCreateInput!, update: InformationSlotTemplateUpdateInput!): InformationSlotTemplate!
  upsertEntranceTemplate(where: EntranceTemplateWhereUniqueInput!, create: EntranceTemplateCreateInput!, update: EntranceTemplateUpdateInput!): EntranceTemplate!
  upsertEntity(where: EntityWhereUniqueInput!, create: EntityCreateInput!, update: EntityUpdateInput!): Entity!
  upsertPayloadRequirementTemplate(where: PayloadRequirementTemplateWhereUniqueInput!, create: PayloadRequirementTemplateCreateInput!, update: PayloadRequirementTemplateUpdateInput!): PayloadRequirementTemplate!
  upsertField(where: FieldWhereUniqueInput!, create: FieldCreateInput!, update: FieldUpdateInput!): FieldGroup!
  upsertActionRequirementTemplate(where: ActionRequirementTemplateWhereUniqueInput!, create: ActionRequirementTemplateCreateInput!, update: ActionRequirementTemplateUpdateInput!): ActionRequirementTemplate!
  upsertStateTransitionTemplate(where: StateTransitionTemplateWhereUniqueInput!, create: StateTransitionTemplateCreateInput!, update: StateTransitionTemplateUpdateInput!): StateTransitionTemplate!
  upsertStateTemplate(where: StateTemplateWhereUniqueInput!, create: StateTemplateCreateInput!, update: StateTemplateUpdateInput!): StateTemplate!
  upsertHintTemplate(where: HintTemplateWhereUniqueInput!, create: HintTemplateCreateInput!, update: HintTemplateUpdateInput!): HintTemplate!
  upsertFieldType(where: FieldTypeWhereUniqueInput!, create: FieldTypeCreateInput!, update: FieldTypeUpdateInput!): FieldType!
  upsertState(where: StateWhereUniqueInput!, create: StateCreateInput!, update: StateUpdateInput!): State!
  upsertFieldTemplate(where: FieldTemplateWhereUniqueInput!, create: FieldTemplateCreateInput!, update: FieldTemplateUpdateInput!): FieldTemplate!
  updateManyInformationSlots(data: InformationSlotUpdateManyMutationInput!, where: InformationSlotWhereInput): BatchPayload!
  updateManyEntrances(data: EntranceUpdateManyMutationInput!, where: EntranceWhereInput): BatchPayload!
  updateManyPortals(data: PortalUpdateManyMutationInput!, where: PortalWhereInput): BatchPayload!
  updateManyActionRequirements(data: ActionRequirementUpdateManyMutationInput!, where: ActionRequirementWhereInput): BatchPayload!
  updateManyHints(data: HintUpdateManyMutationInput!, where: HintWhereInput): BatchPayload!
  updateManyInputRequirements(data: InputRequirementUpdateManyMutationInput!, where: InputRequirementWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  updateManyEntityTemplateSets(data: EntityTemplateSetUpdateManyMutationInput!, where: EntityTemplateSetWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyGamePlays(data: GamePlayUpdateManyMutationInput!, where: GamePlayWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyActions(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): BatchPayload!
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  updateManyApiKeys(data: ApiKeyUpdateManyMutationInput!, where: ApiKeyWhereInput): BatchPayload!
  updateManyActionPayloadInputValues(data: ActionPayloadInputValueUpdateManyMutationInput!, where: ActionPayloadInputValueWhereInput): BatchPayload!
  updateManyPortalTemplates(data: PortalTemplateUpdateManyMutationInput!, where: PortalTemplateWhereInput): BatchPayload!
  updateManyInputRequirementTemplates(data: InputRequirementTemplateUpdateManyMutationInput!, where: InputRequirementTemplateWhereInput): BatchPayload!
  updateManyPhysicalPositions(data: PhysicalPositionUpdateManyMutationInput!, where: PhysicalPositionWhereInput): BatchPayload!
  updateManyEntityTemplates(data: EntityTemplateUpdateManyMutationInput!, where: EntityTemplateWhereInput): BatchPayload!
  updateManyPositions(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): BatchPayload!
  updateManyInformationSlotTemplates(data: InformationSlotTemplateUpdateManyMutationInput!, where: InformationSlotTemplateWhereInput): BatchPayload!
  updateManyEntranceTemplates(data: EntranceTemplateUpdateManyMutationInput!, where: EntranceTemplateWhereInput): BatchPayload!
  updateManyEntities(data: EntityUpdateManyMutationInput!, where: EntityWhereInput): BatchPayload!
  updateManyFields(data: FieldUpdateManyMutationInput!, where: FieldWhereInput): BatchPayload!
  updateManyActionRequirementTemplates(data: ActionRequirementTemplateUpdateManyMutationInput!, where: ActionRequirementTemplateWhereInput): BatchPayload!
  updateManyStateTemplates(data: StateTemplateUpdateManyMutationInput!, where: StateTemplateWhereInput): BatchPayload!
  updateManyHintTemplates(data: HintTemplateUpdateManyMutationInput!, where: HintTemplateWhereInput): BatchPayload!
  updateManyFieldTypes(data: FieldTypeUpdateManyMutationInput!, where: FieldTypeWhereInput): BatchPayload!
  updateManyStates(data: StateUpdateManyMutationInput!, where: StateWhereInput): BatchPayload!
  updateManyFieldTemplates(data: FieldTemplateUpdateManyMutationInput!, where: FieldTemplateWhereInput): BatchPayload!
  deleteManyInformationSlots(where: InformationSlotWhereInput): BatchPayload!
  deleteManyStateTransitions(where: StateTransitionWhereInput): BatchPayload!
  deleteManyEntrances(where: EntranceWhereInput): BatchPayload!
  deleteManyPortals(where: PortalWhereInput): BatchPayload!
  deleteManyActionRequirements(where: ActionRequirementWhereInput): BatchPayload!
  deleteManyHints(where: HintWhereInput): BatchPayload!
  deleteManyPayloadRequirements(where: PayloadRequirementWhereInput): BatchPayload!
  deleteManyEntityRequirements(where: EntityRequirementWhereInput): BatchPayload!
  deleteManyInputRequirements(where: InputRequirementWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyEntityTemplateSets(where: EntityTemplateSetWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyGamePlays(where: GamePlayWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyActions(where: ActionWhereInput): BatchPayload!
  deleteManyActionPayloads(where: ActionPayloadWhereInput): BatchPayload!
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  deleteManyApiKeys(where: ApiKeyWhereInput): BatchPayload!
  deleteManyActionPayloadInputValues(where: ActionPayloadInputValueWhereInput): BatchPayload!
  deleteManyPortalTemplates(where: PortalTemplateWhereInput): BatchPayload!
  deleteManyInputRequirementTemplates(where: InputRequirementTemplateWhereInput): BatchPayload!
  deleteManyPhysicalPositions(where: PhysicalPositionWhereInput): BatchPayload!
  deleteManyEntityTemplates(where: EntityTemplateWhereInput): BatchPayload!
  deleteManyPositions(where: PositionWhereInput): BatchPayload!
  deleteManyEntityRequirementTemplates(where: EntityRequirementTemplateWhereInput): BatchPayload!
  deleteManyInformationSlotTemplates(where: InformationSlotTemplateWhereInput): BatchPayload!
  deleteManyEntranceTemplates(where: EntranceTemplateWhereInput): BatchPayload!
  deleteManyEntities(where: EntityWhereInput): BatchPayload!
  deleteManyPayloadRequirementTemplates(where: PayloadRequirementTemplateWhereInput): BatchPayload!
  deleteManyFields(where: FieldWhereInput): BatchPayload!
  deleteManyActionRequirementTemplates(where: ActionRequirementTemplateWhereInput): BatchPayload!
  deleteManyStateTransitionTemplates(where: StateTransitionTemplateWhereInput): BatchPayload!
  deleteManyStateTemplates(where: StateTemplateWhereInput): BatchPayload!
  deleteManyHintTemplates(where: HintTemplateWhereInput): BatchPayload!
  deleteManyFieldTypes(where: FieldTypeWhereInput): BatchPayload!
  deleteManyStates(where: StateWhereInput): BatchPayload!
  deleteManyFieldTemplates(where: FieldTemplateWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PayloadRequirement implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: PayloadRequirementTemplate
  requiredEntity: EntityRequirement
  requiredInput: InputRequirement
  actionRequirement: ActionRequirement!
}

"""A connection to a list of items."""
type PayloadRequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayloadRequirementEdge]!
  aggregate: AggregatePayloadRequirement!
}

input PayloadRequirementCreateInput {
  id: ID
  template: PayloadRequirementTemplateCreateOneInput
  requiredEntity: EntityRequirementCreateOneWithoutPayloadInput
  requiredInput: InputRequirementCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementCreateOneWithoutPayloadInput!
}

input PayloadRequirementCreateOneWithoutActionRequirementInput {
  create: PayloadRequirementCreateWithoutActionRequirementInput
  connect: PayloadRequirementWhereUniqueInput
}

input PayloadRequirementCreateOneWithoutRequiredEntityInput {
  create: PayloadRequirementCreateWithoutRequiredEntityInput
  connect: PayloadRequirementWhereUniqueInput
}

input PayloadRequirementCreateOneWithoutRequiredInputInput {
  create: PayloadRequirementCreateWithoutRequiredInputInput
  connect: PayloadRequirementWhereUniqueInput
}

input PayloadRequirementCreateWithoutActionRequirementInput {
  id: ID
  template: PayloadRequirementTemplateCreateOneInput
  requiredEntity: EntityRequirementCreateOneWithoutPayloadInput
  requiredInput: InputRequirementCreateOneWithoutPayloadInput
}

input PayloadRequirementCreateWithoutRequiredEntityInput {
  id: ID
  template: PayloadRequirementTemplateCreateOneInput
  requiredInput: InputRequirementCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementCreateOneWithoutPayloadInput!
}

input PayloadRequirementCreateWithoutRequiredInputInput {
  id: ID
  template: PayloadRequirementTemplateCreateOneInput
  requiredEntity: EntityRequirementCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementCreateOneWithoutPayloadInput!
}

"""An edge in a connection."""
type PayloadRequirementEdge {
  """The item at the end of the edge."""
  node: PayloadRequirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PayloadRequirementOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PayloadRequirementPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PayloadRequirementSubscriptionPayload {
  mutation: MutationType!
  node: PayloadRequirement
  updatedFields: [String!]
  previousValues: PayloadRequirementPreviousValues
}

input PayloadRequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayloadRequirementWhereInput
}

type PayloadRequirementTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  requiredEntity: EntityRequirementTemplate
  requiredInput: InputRequirementTemplate
  actionRequirement: ActionRequirementTemplate!
}

"""A connection to a list of items."""
type PayloadRequirementTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayloadRequirementTemplateEdge]!
  aggregate: AggregatePayloadRequirementTemplate!
}

input PayloadRequirementTemplateCreateInput {
  id: ID
  requiredEntity: EntityRequirementTemplateCreateOneWithoutPayloadInput
  requiredInput: InputRequirementTemplateCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateCreateOneWithoutPayloadInput!
}

input PayloadRequirementTemplateCreateOneInput {
  create: PayloadRequirementTemplateCreateInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateOneWithoutActionRequirementInput {
  create: PayloadRequirementTemplateCreateWithoutActionRequirementInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateOneWithoutRequiredEntityInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredEntityInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateOneWithoutRequiredInputInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredInputInput
  connect: PayloadRequirementTemplateWhereUniqueInput
}

input PayloadRequirementTemplateCreateWithoutActionRequirementInput {
  id: ID
  requiredEntity: EntityRequirementTemplateCreateOneWithoutPayloadInput
  requiredInput: InputRequirementTemplateCreateOneWithoutPayloadInput
}

input PayloadRequirementTemplateCreateWithoutRequiredEntityInput {
  id: ID
  requiredInput: InputRequirementTemplateCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateCreateOneWithoutPayloadInput!
}

input PayloadRequirementTemplateCreateWithoutRequiredInputInput {
  id: ID
  requiredEntity: EntityRequirementTemplateCreateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateCreateOneWithoutPayloadInput!
}

"""An edge in a connection."""
type PayloadRequirementTemplateEdge {
  """The item at the end of the edge."""
  node: PayloadRequirementTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PayloadRequirementTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PayloadRequirementTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PayloadRequirementTemplateSubscriptionPayload {
  mutation: MutationType!
  node: PayloadRequirementTemplate
  updatedFields: [String!]
  previousValues: PayloadRequirementTemplatePreviousValues
}

input PayloadRequirementTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayloadRequirementTemplateWhereInput
}

input PayloadRequirementTemplateUpdateDataInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  requiredInput: InputRequirementTemplateUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  requiredInput: InputRequirementTemplateUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateOneInput {
  create: PayloadRequirementTemplateCreateInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementTemplateUpdateDataInput
  upsert: PayloadRequirementTemplateUpsertNestedInput
}

input PayloadRequirementTemplateUpdateOneWithoutActionRequirementInput {
  create: PayloadRequirementTemplateCreateWithoutActionRequirementInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementTemplateUpdateWithoutActionRequirementDataInput
  upsert: PayloadRequirementTemplateUpsertWithoutActionRequirementInput
}

input PayloadRequirementTemplateUpdateOneWithoutRequiredEntityInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredEntityInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementTemplateUpdateWithoutRequiredEntityDataInput
  upsert: PayloadRequirementTemplateUpsertWithoutRequiredEntityInput
}

input PayloadRequirementTemplateUpdateOneWithoutRequiredInputInput {
  create: PayloadRequirementTemplateCreateWithoutRequiredInputInput
  connect: PayloadRequirementTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementTemplateUpdateWithoutRequiredInputDataInput
  upsert: PayloadRequirementTemplateUpsertWithoutRequiredInputInput
}

input PayloadRequirementTemplateUpdateWithoutActionRequirementDataInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  requiredInput: InputRequirementTemplateUpdateOneWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateWithoutRequiredEntityDataInput {
  requiredInput: InputRequirementTemplateUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpdateWithoutRequiredInputDataInput {
  requiredEntity: EntityRequirementTemplateUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementTemplateUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementTemplateUpsertNestedInput {
  update: PayloadRequirementTemplateUpdateDataInput!
  create: PayloadRequirementTemplateCreateInput!
}

input PayloadRequirementTemplateUpsertWithoutActionRequirementInput {
  update: PayloadRequirementTemplateUpdateWithoutActionRequirementDataInput!
  create: PayloadRequirementTemplateCreateWithoutActionRequirementInput!
}

input PayloadRequirementTemplateUpsertWithoutRequiredEntityInput {
  update: PayloadRequirementTemplateUpdateWithoutRequiredEntityDataInput!
  create: PayloadRequirementTemplateCreateWithoutRequiredEntityInput!
}

input PayloadRequirementTemplateUpsertWithoutRequiredInputInput {
  update: PayloadRequirementTemplateUpdateWithoutRequiredInputDataInput!
  create: PayloadRequirementTemplateCreateWithoutRequiredInputInput!
}

input PayloadRequirementTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requiredEntity: EntityRequirementTemplateWhereInput
  requiredInput: InputRequirementTemplateWhereInput
  actionRequirement: ActionRequirementTemplateWhereInput
}

input PayloadRequirementTemplateWhereUniqueInput {
  id: ID
}

input PayloadRequirementUpdateInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredEntity: EntityRequirementUpdateOneWithoutPayloadInput
  requiredInput: InputRequirementUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementUpdateOneRequiredWithoutRequiredEntityInput {
  create: PayloadRequirementCreateWithoutRequiredEntityInput
  connect: PayloadRequirementWhereUniqueInput
  update: PayloadRequirementUpdateWithoutRequiredEntityDataInput
  upsert: PayloadRequirementUpsertWithoutRequiredEntityInput
}

input PayloadRequirementUpdateOneRequiredWithoutRequiredInputInput {
  create: PayloadRequirementCreateWithoutRequiredInputInput
  connect: PayloadRequirementWhereUniqueInput
  update: PayloadRequirementUpdateWithoutRequiredInputDataInput
  upsert: PayloadRequirementUpsertWithoutRequiredInputInput
}

input PayloadRequirementUpdateOneWithoutActionRequirementInput {
  create: PayloadRequirementCreateWithoutActionRequirementInput
  connect: PayloadRequirementWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PayloadRequirementUpdateWithoutActionRequirementDataInput
  upsert: PayloadRequirementUpsertWithoutActionRequirementInput
}

input PayloadRequirementUpdateWithoutActionRequirementDataInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredEntity: EntityRequirementUpdateOneWithoutPayloadInput
  requiredInput: InputRequirementUpdateOneWithoutPayloadInput
}

input PayloadRequirementUpdateWithoutRequiredEntityDataInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredInput: InputRequirementUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementUpdateWithoutRequiredInputDataInput {
  template: PayloadRequirementTemplateUpdateOneInput
  requiredEntity: EntityRequirementUpdateOneWithoutPayloadInput
  actionRequirement: ActionRequirementUpdateOneRequiredWithoutPayloadInput
}

input PayloadRequirementUpsertWithoutActionRequirementInput {
  update: PayloadRequirementUpdateWithoutActionRequirementDataInput!
  create: PayloadRequirementCreateWithoutActionRequirementInput!
}

input PayloadRequirementUpsertWithoutRequiredEntityInput {
  update: PayloadRequirementUpdateWithoutRequiredEntityDataInput!
  create: PayloadRequirementCreateWithoutRequiredEntityInput!
}

input PayloadRequirementUpsertWithoutRequiredInputInput {
  update: PayloadRequirementUpdateWithoutRequiredInputDataInput!
  create: PayloadRequirementCreateWithoutRequiredInputInput!
}

input PayloadRequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [PayloadRequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayloadRequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayloadRequirementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  template: PayloadRequirementTemplateWhereInput
  requiredEntity: EntityRequirementWhereInput
  requiredInput: InputRequirementWhereInput
  actionRequirement: ActionRequirementWhereInput
}

input PayloadRequirementWhereUniqueInput {
  id: ID
}

type PhysicalPosition implements Node {
  id: ID!
  left: Float!
  top: Float!
  z: Float
  width: Float
  height: Float
  rotation: Float!
}

"""A connection to a list of items."""
type PhysicalPositionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhysicalPositionEdge]!
  aggregate: AggregatePhysicalPosition!
}

input PhysicalPositionCreateInput {
  id: ID
  left: Float
  top: Float
  z: Float
  width: Float
  height: Float
  rotation: Float
}

input PhysicalPositionCreateOneInput {
  create: PhysicalPositionCreateInput
  connect: PhysicalPositionWhereUniqueInput
}

"""An edge in a connection."""
type PhysicalPositionEdge {
  """The item at the end of the edge."""
  node: PhysicalPosition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhysicalPositionOrderByInput {
  id_ASC
  id_DESC
  left_ASC
  left_DESC
  top_ASC
  top_DESC
  z_ASC
  z_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  rotation_ASC
  rotation_DESC
}

type PhysicalPositionPreviousValues {
  id: ID!
  left: Float!
  top: Float!
  z: Float
  width: Float
  height: Float
  rotation: Float!
}

type PhysicalPositionSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalPosition
  updatedFields: [String!]
  previousValues: PhysicalPositionPreviousValues
}

input PhysicalPositionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalPositionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalPositionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalPositionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalPositionWhereInput
}

input PhysicalPositionUpdateDataInput {
  left: Float
  top: Float
  z: Float
  width: Float
  height: Float
  rotation: Float
}

input PhysicalPositionUpdateInput {
  left: Float
  top: Float
  z: Float
  width: Float
  height: Float
  rotation: Float
}

input PhysicalPositionUpdateManyMutationInput {
  left: Float
  top: Float
  z: Float
  width: Float
  height: Float
  rotation: Float
}

input PhysicalPositionUpdateOneInput {
  create: PhysicalPositionCreateInput
  connect: PhysicalPositionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PhysicalPositionUpdateDataInput
  upsert: PhysicalPositionUpsertNestedInput
}

input PhysicalPositionUpsertNestedInput {
  update: PhysicalPositionUpdateDataInput!
  create: PhysicalPositionCreateInput!
}

input PhysicalPositionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalPositionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalPositionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalPositionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  left: Float

  """All values that are not equal to given value."""
  left_not: Float

  """All values that are contained in given list."""
  left_in: [Float!]

  """All values that are not contained in given list."""
  left_not_in: [Float!]

  """All values less than the given value."""
  left_lt: Float

  """All values less than or equal the given value."""
  left_lte: Float

  """All values greater than the given value."""
  left_gt: Float

  """All values greater than or equal the given value."""
  left_gte: Float
  top: Float

  """All values that are not equal to given value."""
  top_not: Float

  """All values that are contained in given list."""
  top_in: [Float!]

  """All values that are not contained in given list."""
  top_not_in: [Float!]

  """All values less than the given value."""
  top_lt: Float

  """All values less than or equal the given value."""
  top_lte: Float

  """All values greater than the given value."""
  top_gt: Float

  """All values greater than or equal the given value."""
  top_gte: Float
  z: Float

  """All values that are not equal to given value."""
  z_not: Float

  """All values that are contained in given list."""
  z_in: [Float!]

  """All values that are not contained in given list."""
  z_not_in: [Float!]

  """All values less than the given value."""
  z_lt: Float

  """All values less than or equal the given value."""
  z_lte: Float

  """All values greater than the given value."""
  z_gt: Float

  """All values greater than or equal the given value."""
  z_gte: Float
  width: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are contained in given list."""
  width_in: [Float!]

  """All values that are not contained in given list."""
  width_not_in: [Float!]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float
  height: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are contained in given list."""
  height_in: [Float!]

  """All values that are not contained in given list."""
  height_not_in: [Float!]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float
  rotation: Float

  """All values that are not equal to given value."""
  rotation_not: Float

  """All values that are contained in given list."""
  rotation_in: [Float!]

  """All values that are not contained in given list."""
  rotation_not_in: [Float!]

  """All values less than the given value."""
  rotation_lt: Float

  """All values less than or equal the given value."""
  rotation_lte: Float

  """All values greater than the given value."""
  rotation_gt: Float

  """All values greater than or equal the given value."""
  rotation_gte: Float
}

input PhysicalPositionWhereUniqueInput {
  id: ID
}

type Portal implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: PortalTemplate
  name: String
  description: String
  entrance: Entrance
  entity: Entity!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
}

"""A connection to a list of items."""
type PortalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortalEdge]!
  aggregate: AggregatePortal!
}

input PortalCreateInput {
  id: ID
  name: String
  description: String
  template: PortalTemplateCreateOneInput
  entrance: EntranceCreateOneWithoutPortalInput
  entity: EntityCreateOneWithoutPortalsInput!
  states: StateCreateManyWithoutOpenPortalsInput
}

input PortalCreateManyWithoutEntityInput {
  create: [PortalCreateWithoutEntityInput!]
  connect: [PortalWhereUniqueInput!]
}

input PortalCreateManyWithoutStatesInput {
  create: [PortalCreateWithoutStatesInput!]
  connect: [PortalWhereUniqueInput!]
}

input PortalCreateOneWithoutEntranceInput {
  create: PortalCreateWithoutEntranceInput
  connect: PortalWhereUniqueInput
}

input PortalCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  template: PortalTemplateCreateOneInput
  entrance: EntranceCreateOneWithoutPortalInput
  states: StateCreateManyWithoutOpenPortalsInput
}

input PortalCreateWithoutEntranceInput {
  id: ID
  name: String
  description: String
  template: PortalTemplateCreateOneInput
  entity: EntityCreateOneWithoutPortalsInput!
  states: StateCreateManyWithoutOpenPortalsInput
}

input PortalCreateWithoutStatesInput {
  id: ID
  name: String
  description: String
  template: PortalTemplateCreateOneInput
  entrance: EntranceCreateOneWithoutPortalInput
  entity: EntityCreateOneWithoutPortalsInput!
}

"""An edge in a connection."""
type PortalEdge {
  """The item at the end of the edge."""
  node: Portal!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PortalOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type PortalPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input PortalScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PortalScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PortalScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PortalScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type PortalSubscriptionPayload {
  mutation: MutationType!
  node: Portal
  updatedFields: [String!]
  previousValues: PortalPreviousValues
}

input PortalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PortalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PortalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PortalSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PortalWhereInput
}

type PortalTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  connectableEntrances(where: EntranceTemplateWhereInput, orderBy: EntranceTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntranceTemplate!]
  entity: EntityTemplate!
  states(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate!]
}

"""A connection to a list of items."""
type PortalTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortalTemplateEdge]!
  aggregate: AggregatePortalTemplate!
}

input PortalTemplateCreateInput {
  id: ID
  name: String
  description: String
  connectableEntrances: EntranceTemplateCreateManyWithoutConnectablePortalsInput
  entity: EntityTemplateCreateOneWithoutPortalsInput!
  states: StateTemplateCreateManyWithoutOpenPortalsInput
}

input PortalTemplateCreateManyWithoutConnectableEntrancesInput {
  create: [PortalTemplateCreateWithoutConnectableEntrancesInput!]
  connect: [PortalTemplateWhereUniqueInput!]
}

input PortalTemplateCreateManyWithoutEntityInput {
  create: [PortalTemplateCreateWithoutEntityInput!]
  connect: [PortalTemplateWhereUniqueInput!]
}

input PortalTemplateCreateManyWithoutStatesInput {
  create: [PortalTemplateCreateWithoutStatesInput!]
  connect: [PortalTemplateWhereUniqueInput!]
}

input PortalTemplateCreateOneInput {
  create: PortalTemplateCreateInput
  connect: PortalTemplateWhereUniqueInput
}

input PortalTemplateCreateWithoutConnectableEntrancesInput {
  id: ID
  name: String
  description: String
  entity: EntityTemplateCreateOneWithoutPortalsInput!
  states: StateTemplateCreateManyWithoutOpenPortalsInput
}

input PortalTemplateCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  connectableEntrances: EntranceTemplateCreateManyWithoutConnectablePortalsInput
  states: StateTemplateCreateManyWithoutOpenPortalsInput
}

input PortalTemplateCreateWithoutStatesInput {
  id: ID
  name: String
  description: String
  connectableEntrances: EntranceTemplateCreateManyWithoutConnectablePortalsInput
  entity: EntityTemplateCreateOneWithoutPortalsInput!
}

"""An edge in a connection."""
type PortalTemplateEdge {
  """The item at the end of the edge."""
  node: PortalTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PortalTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type PortalTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input PortalTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PortalTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PortalTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PortalTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type PortalTemplateSubscriptionPayload {
  mutation: MutationType!
  node: PortalTemplate
  updatedFields: [String!]
  previousValues: PortalTemplatePreviousValues
}

input PortalTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PortalTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PortalTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PortalTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PortalTemplateWhereInput
}

input PortalTemplateUpdateDataInput {
  name: String
  description: String
  connectableEntrances: EntranceTemplateUpdateManyWithoutConnectablePortalsInput
  entity: EntityTemplateUpdateOneRequiredWithoutPortalsInput
  states: StateTemplateUpdateManyWithoutOpenPortalsInput
}

input PortalTemplateUpdateInput {
  name: String
  description: String
  connectableEntrances: EntranceTemplateUpdateManyWithoutConnectablePortalsInput
  entity: EntityTemplateUpdateOneRequiredWithoutPortalsInput
  states: StateTemplateUpdateManyWithoutOpenPortalsInput
}

input PortalTemplateUpdateManyDataInput {
  name: String
  description: String
}

input PortalTemplateUpdateManyMutationInput {
  name: String
  description: String
}

input PortalTemplateUpdateManyWithoutConnectableEntrancesInput {
  create: [PortalTemplateCreateWithoutConnectableEntrancesInput!]
  connect: [PortalTemplateWhereUniqueInput!]
  set: [PortalTemplateWhereUniqueInput!]
  disconnect: [PortalTemplateWhereUniqueInput!]
  delete: [PortalTemplateWhereUniqueInput!]
  update: [PortalTemplateUpdateWithWhereUniqueWithoutConnectableEntrancesInput!]
  updateMany: [PortalTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [PortalTemplateScalarWhereInput!]
  upsert: [PortalTemplateUpsertWithWhereUniqueWithoutConnectableEntrancesInput!]
}

input PortalTemplateUpdateManyWithoutEntityInput {
  create: [PortalTemplateCreateWithoutEntityInput!]
  connect: [PortalTemplateWhereUniqueInput!]
  set: [PortalTemplateWhereUniqueInput!]
  disconnect: [PortalTemplateWhereUniqueInput!]
  delete: [PortalTemplateWhereUniqueInput!]
  update: [PortalTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [PortalTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [PortalTemplateScalarWhereInput!]
  upsert: [PortalTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input PortalTemplateUpdateManyWithoutStatesInput {
  create: [PortalTemplateCreateWithoutStatesInput!]
  connect: [PortalTemplateWhereUniqueInput!]
  set: [PortalTemplateWhereUniqueInput!]
  disconnect: [PortalTemplateWhereUniqueInput!]
  delete: [PortalTemplateWhereUniqueInput!]
  update: [PortalTemplateUpdateWithWhereUniqueWithoutStatesInput!]
  updateMany: [PortalTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [PortalTemplateScalarWhereInput!]
  upsert: [PortalTemplateUpsertWithWhereUniqueWithoutStatesInput!]
}

input PortalTemplateUpdateManyWithWhereNestedInput {
  where: PortalTemplateScalarWhereInput!
  data: PortalTemplateUpdateManyDataInput!
}

input PortalTemplateUpdateOneInput {
  create: PortalTemplateCreateInput
  connect: PortalTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PortalTemplateUpdateDataInput
  upsert: PortalTemplateUpsertNestedInput
}

input PortalTemplateUpdateWithoutConnectableEntrancesDataInput {
  name: String
  description: String
  entity: EntityTemplateUpdateOneRequiredWithoutPortalsInput
  states: StateTemplateUpdateManyWithoutOpenPortalsInput
}

input PortalTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  connectableEntrances: EntranceTemplateUpdateManyWithoutConnectablePortalsInput
  states: StateTemplateUpdateManyWithoutOpenPortalsInput
}

input PortalTemplateUpdateWithoutStatesDataInput {
  name: String
  description: String
  connectableEntrances: EntranceTemplateUpdateManyWithoutConnectablePortalsInput
  entity: EntityTemplateUpdateOneRequiredWithoutPortalsInput
}

input PortalTemplateUpdateWithWhereUniqueWithoutConnectableEntrancesInput {
  where: PortalTemplateWhereUniqueInput!
  data: PortalTemplateUpdateWithoutConnectableEntrancesDataInput!
}

input PortalTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: PortalTemplateWhereUniqueInput!
  data: PortalTemplateUpdateWithoutEntityDataInput!
}

input PortalTemplateUpdateWithWhereUniqueWithoutStatesInput {
  where: PortalTemplateWhereUniqueInput!
  data: PortalTemplateUpdateWithoutStatesDataInput!
}

input PortalTemplateUpsertNestedInput {
  update: PortalTemplateUpdateDataInput!
  create: PortalTemplateCreateInput!
}

input PortalTemplateUpsertWithWhereUniqueWithoutConnectableEntrancesInput {
  where: PortalTemplateWhereUniqueInput!
  update: PortalTemplateUpdateWithoutConnectableEntrancesDataInput!
  create: PortalTemplateCreateWithoutConnectableEntrancesInput!
}

input PortalTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: PortalTemplateWhereUniqueInput!
  update: PortalTemplateUpdateWithoutEntityDataInput!
  create: PortalTemplateCreateWithoutEntityInput!
}

input PortalTemplateUpsertWithWhereUniqueWithoutStatesInput {
  where: PortalTemplateWhereUniqueInput!
  update: PortalTemplateUpdateWithoutStatesDataInput!
  create: PortalTemplateCreateWithoutStatesInput!
}

input PortalTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [PortalTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [PortalTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PortalTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  connectableEntrances_every: EntranceTemplateWhereInput
  connectableEntrances_some: EntranceTemplateWhereInput
  connectableEntrances_none: EntranceTemplateWhereInput
  entity: EntityTemplateWhereInput
  states_every: StateTemplateWhereInput
  states_some: StateTemplateWhereInput
  states_none: StateTemplateWhereInput
}

input PortalTemplateWhereUniqueInput {
  id: ID
}

input PortalUpdateInput {
  name: String
  description: String
  template: PortalTemplateUpdateOneInput
  entrance: EntranceUpdateOneWithoutPortalInput
  entity: EntityUpdateOneRequiredWithoutPortalsInput
  states: StateUpdateManyWithoutOpenPortalsInput
}

input PortalUpdateManyDataInput {
  name: String
  description: String
}

input PortalUpdateManyMutationInput {
  name: String
  description: String
}

input PortalUpdateManyWithoutEntityInput {
  create: [PortalCreateWithoutEntityInput!]
  connect: [PortalWhereUniqueInput!]
  set: [PortalWhereUniqueInput!]
  disconnect: [PortalWhereUniqueInput!]
  delete: [PortalWhereUniqueInput!]
  update: [PortalUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [PortalUpdateManyWithWhereNestedInput!]
  deleteMany: [PortalScalarWhereInput!]
  upsert: [PortalUpsertWithWhereUniqueWithoutEntityInput!]
}

input PortalUpdateManyWithoutStatesInput {
  create: [PortalCreateWithoutStatesInput!]
  connect: [PortalWhereUniqueInput!]
  set: [PortalWhereUniqueInput!]
  disconnect: [PortalWhereUniqueInput!]
  delete: [PortalWhereUniqueInput!]
  update: [PortalUpdateWithWhereUniqueWithoutStatesInput!]
  updateMany: [PortalUpdateManyWithWhereNestedInput!]
  deleteMany: [PortalScalarWhereInput!]
  upsert: [PortalUpsertWithWhereUniqueWithoutStatesInput!]
}

input PortalUpdateManyWithWhereNestedInput {
  where: PortalScalarWhereInput!
  data: PortalUpdateManyDataInput!
}

input PortalUpdateOneWithoutEntranceInput {
  create: PortalCreateWithoutEntranceInput
  connect: PortalWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PortalUpdateWithoutEntranceDataInput
  upsert: PortalUpsertWithoutEntranceInput
}

input PortalUpdateWithoutEntityDataInput {
  name: String
  description: String
  template: PortalTemplateUpdateOneInput
  entrance: EntranceUpdateOneWithoutPortalInput
  states: StateUpdateManyWithoutOpenPortalsInput
}

input PortalUpdateWithoutEntranceDataInput {
  name: String
  description: String
  template: PortalTemplateUpdateOneInput
  entity: EntityUpdateOneRequiredWithoutPortalsInput
  states: StateUpdateManyWithoutOpenPortalsInput
}

input PortalUpdateWithoutStatesDataInput {
  name: String
  description: String
  template: PortalTemplateUpdateOneInput
  entrance: EntranceUpdateOneWithoutPortalInput
  entity: EntityUpdateOneRequiredWithoutPortalsInput
}

input PortalUpdateWithWhereUniqueWithoutEntityInput {
  where: PortalWhereUniqueInput!
  data: PortalUpdateWithoutEntityDataInput!
}

input PortalUpdateWithWhereUniqueWithoutStatesInput {
  where: PortalWhereUniqueInput!
  data: PortalUpdateWithoutStatesDataInput!
}

input PortalUpsertWithoutEntranceInput {
  update: PortalUpdateWithoutEntranceDataInput!
  create: PortalCreateWithoutEntranceInput!
}

input PortalUpsertWithWhereUniqueWithoutEntityInput {
  where: PortalWhereUniqueInput!
  update: PortalUpdateWithoutEntityDataInput!
  create: PortalCreateWithoutEntityInput!
}

input PortalUpsertWithWhereUniqueWithoutStatesInput {
  where: PortalWhereUniqueInput!
  update: PortalUpdateWithoutStatesDataInput!
  create: PortalCreateWithoutStatesInput!
}

input PortalWhereInput {
  """Logical AND on all given filters."""
  AND: [PortalWhereInput!]

  """Logical OR on all given filters."""
  OR: [PortalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PortalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  template: PortalTemplateWhereInput
  entrance: EntranceWhereInput
  entity: EntityWhereInput
  states_every: StateWhereInput
  states_some: StateWhereInput
  states_none: StateWhereInput
}

input PortalWhereUniqueInput {
  id: ID
}

type Position implements Node {
  id: ID!
  left: Int
  top: Int
}

"""A connection to a list of items."""
type PositionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PositionEdge]!
  aggregate: AggregatePosition!
}

input PositionCreateInput {
  id: ID
  left: Int
  top: Int
}

input PositionCreateOneInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
}

"""An edge in a connection."""
type PositionEdge {
  """The item at the end of the edge."""
  node: Position!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PositionOrderByInput {
  id_ASC
  id_DESC
  left_ASC
  left_DESC
  top_ASC
  top_DESC
}

type PositionPreviousValues {
  id: ID!
  left: Int
  top: Int
}

type PositionSubscriptionPayload {
  mutation: MutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

input PositionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PositionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PositionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PositionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PositionWhereInput
}

input PositionUpdateDataInput {
  left: Int
  top: Int
}

input PositionUpdateInput {
  left: Int
  top: Int
}

input PositionUpdateManyMutationInput {
  left: Int
  top: Int
}

input PositionUpdateOneInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PositionUpdateDataInput
  upsert: PositionUpsertNestedInput
}

input PositionUpsertNestedInput {
  update: PositionUpdateDataInput!
  create: PositionCreateInput!
}

input PositionWhereInput {
  """Logical AND on all given filters."""
  AND: [PositionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PositionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PositionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  left: Int

  """All values that are not equal to given value."""
  left_not: Int

  """All values that are contained in given list."""
  left_in: [Int!]

  """All values that are not contained in given list."""
  left_not_in: [Int!]

  """All values less than the given value."""
  left_lt: Int

  """All values less than or equal the given value."""
  left_lte: Int

  """All values greater than the given value."""
  left_gt: Int

  """All values greater than or equal the given value."""
  left_gte: Int
  top: Int

  """All values that are not equal to given value."""
  top_not: Int

  """All values that are contained in given list."""
  top_in: [Int!]

  """All values that are not contained in given list."""
  top_not_in: [Int!]

  """All values less than the given value."""
  top_lt: Int

  """All values less than or equal the given value."""
  top_lte: Int

  """All values greater than the given value."""
  top_gt: Int

  """All values greater than or equal the given value."""
  top_gte: Int
}

input PositionWhereUniqueInput {
  id: ID
}

enum PrivacyType {
  PRIVATE
  PUBLIC
}

type Query {
  informationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot]!
  stateTransitions(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition]!
  entrances(where: EntranceWhereInput, orderBy: EntranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entrance]!
  portals(where: PortalWhereInput, orderBy: PortalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Portal]!
  actionRequirements(where: ActionRequirementWhereInput, orderBy: ActionRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirement]!
  hints(where: HintWhereInput, orderBy: HintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hint]!
  payloadRequirements(where: PayloadRequirementWhereInput, orderBy: PayloadRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayloadRequirement]!
  entityRequirements(where: EntityRequirementWhereInput, orderBy: EntityRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityRequirement]!
  inputRequirements(where: InputRequirementWhereInput, orderBy: InputRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InputRequirement]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  entityTemplateSets(where: EntityTemplateSetWhereInput, orderBy: EntityTemplateSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityTemplateSet]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  gamePlays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action]!
  actionPayloads(where: ActionPayloadWhereInput, orderBy: ActionPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionPayload]!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  apiKeys(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApiKey]!
  actionPayloadInputValues(where: ActionPayloadInputValueWhereInput, orderBy: ActionPayloadInputValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionPayloadInputValue]!
  portalTemplates(where: PortalTemplateWhereInput, orderBy: PortalTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PortalTemplate]!
  inputRequirementTemplates(where: InputRequirementTemplateWhereInput, orderBy: InputRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InputRequirementTemplate]!
  physicalPositions(where: PhysicalPositionWhereInput, orderBy: PhysicalPositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalPosition]!
  entityTemplates(where: EntityTemplateWhereInput, orderBy: EntityTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityTemplate]!
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!
  entityRequirementTemplates(where: EntityRequirementTemplateWhereInput, orderBy: EntityRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityRequirementTemplate]!
  informationSlotTemplates(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlotTemplate]!
  entranceTemplates(where: EntranceTemplateWhereInput, orderBy: EntranceTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntranceTemplate]!
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity]!
  payloadRequirementTemplates(where: PayloadRequirementTemplateWhereInput, orderBy: PayloadRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayloadRequirementTemplate]!
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldGroup]!
  actionRequirementTemplates(where: ActionRequirementTemplateWhereInput, orderBy: ActionRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirementTemplate]!
  stateTransitionTemplates(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransitionTemplate]!
  stateTemplates(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTemplate]!
  hintTemplates(where: HintTemplateWhereInput, orderBy: HintTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HintTemplate]!
  fieldTypes(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldType]!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State]!
  fieldTemplates(where: FieldTemplateWhereInput, orderBy: FieldTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldTemplate]!
  informationSlot(where: InformationSlotWhereUniqueInput!): InformationSlot
  stateTransition(where: StateTransitionWhereUniqueInput!): StateTransition
  entrance(where: EntranceWhereUniqueInput!): Entrance
  portal(where: PortalWhereUniqueInput!): Portal
  actionRequirement(where: ActionRequirementWhereUniqueInput!): ActionRequirement
  hint(where: HintWhereUniqueInput!): Hint
  payloadRequirement(where: PayloadRequirementWhereUniqueInput!): PayloadRequirement
  entityRequirement(where: EntityRequirementWhereUniqueInput!): EntityRequirement
  inputRequirement(where: InputRequirementWhereUniqueInput!): InputRequirement
  game(where: GameWhereUniqueInput!): Game
  entityTemplateSet(where: EntityTemplateSetWhereUniqueInput!): EntityTemplateSet
  user(where: UserWhereUniqueInput!): User
  gamePlay(where: GamePlayWhereUniqueInput!): GamePlay
  session(where: SessionWhereUniqueInput!): Session
  action(where: ActionWhereUniqueInput!): Action
  actionPayload(where: ActionPayloadWhereUniqueInput!): ActionPayload
  service(where: ServiceWhereUniqueInput!): Service
  apiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  actionPayloadInputValue(where: ActionPayloadInputValueWhereUniqueInput!): ActionPayloadInputValue
  portalTemplate(where: PortalTemplateWhereUniqueInput!): PortalTemplate
  inputRequirementTemplate(where: InputRequirementTemplateWhereUniqueInput!): InputRequirementTemplate
  physicalPosition(where: PhysicalPositionWhereUniqueInput!): PhysicalPosition
  entityTemplate(where: EntityTemplateWhereUniqueInput!): EntityTemplate
  position(where: PositionWhereUniqueInput!): Position
  entityRequirementTemplate(where: EntityRequirementTemplateWhereUniqueInput!): EntityRequirementTemplate
  informationSlotTemplate(where: InformationSlotTemplateWhereUniqueInput!): InformationSlotTemplate
  entranceTemplate(where: EntranceTemplateWhereUniqueInput!): EntranceTemplate
  entity(where: EntityWhereUniqueInput!): Entity
  payloadRequirementTemplate(where: PayloadRequirementTemplateWhereUniqueInput!): PayloadRequirementTemplate
  field(where: FieldWhereUniqueInput!): FieldGroup
  actionRequirementTemplate(where: ActionRequirementTemplateWhereUniqueInput!): ActionRequirementTemplate
  stateTransitionTemplate(where: StateTransitionTemplateWhereUniqueInput!): StateTransitionTemplate
  stateTemplate(where: StateTemplateWhereUniqueInput!): StateTemplate
  hintTemplate(where: HintTemplateWhereUniqueInput!): HintTemplate
  fieldType(where: FieldTypeWhereUniqueInput!): FieldType
  state(where: StateWhereUniqueInput!): State
  fieldTemplate(where: FieldTemplateWhereUniqueInput!): FieldTemplate
  informationSlotsConnection(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InformationSlotConnection!
  stateTransitionsConnection(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateTransitionConnection!
  entrancesConnection(where: EntranceWhereInput, orderBy: EntranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntranceConnection!
  portalsConnection(where: PortalWhereInput, orderBy: PortalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PortalConnection!
  actionRequirementsConnection(where: ActionRequirementWhereInput, orderBy: ActionRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionRequirementConnection!
  hintsConnection(where: HintWhereInput, orderBy: HintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HintConnection!
  payloadRequirementsConnection(where: PayloadRequirementWhereInput, orderBy: PayloadRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayloadRequirementConnection!
  entityRequirementsConnection(where: EntityRequirementWhereInput, orderBy: EntityRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityRequirementConnection!
  inputRequirementsConnection(where: InputRequirementWhereInput, orderBy: InputRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InputRequirementConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  entityTemplateSetsConnection(where: EntityTemplateSetWhereInput, orderBy: EntityTemplateSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityTemplateSetConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  gamePlaysConnection(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamePlayConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  actionsConnection(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionConnection!
  actionPayloadsConnection(where: ActionPayloadWhereInput, orderBy: ActionPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionPayloadConnection!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  apiKeysConnection(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApiKeyConnection!
  actionPayloadInputValuesConnection(where: ActionPayloadInputValueWhereInput, orderBy: ActionPayloadInputValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionPayloadInputValueConnection!
  portalTemplatesConnection(where: PortalTemplateWhereInput, orderBy: PortalTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PortalTemplateConnection!
  inputRequirementTemplatesConnection(where: InputRequirementTemplateWhereInput, orderBy: InputRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InputRequirementTemplateConnection!
  physicalPositionsConnection(where: PhysicalPositionWhereInput, orderBy: PhysicalPositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalPositionConnection!
  entityTemplatesConnection(where: EntityTemplateWhereInput, orderBy: EntityTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityTemplateConnection!
  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!
  entityRequirementTemplatesConnection(where: EntityRequirementTemplateWhereInput, orderBy: EntityRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityRequirementTemplateConnection!
  informationSlotTemplatesConnection(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InformationSlotTemplateConnection!
  entranceTemplatesConnection(where: EntranceTemplateWhereInput, orderBy: EntranceTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntranceTemplateConnection!
  entitiesConnection(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityConnection!
  payloadRequirementTemplatesConnection(where: PayloadRequirementTemplateWhereInput, orderBy: PayloadRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayloadRequirementTemplateConnection!
  fieldsConnection(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldConnection!
  actionRequirementTemplatesConnection(where: ActionRequirementTemplateWhereInput, orderBy: ActionRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionRequirementTemplateConnection!
  stateTransitionTemplatesConnection(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateTransitionTemplateConnection!
  stateTemplatesConnection(where: StateTemplateWhereInput, orderBy: StateTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateTemplateConnection!
  hintTemplatesConnection(where: HintTemplateWhereInput, orderBy: HintTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HintTemplateConnection!
  fieldTypesConnection(where: FieldTypeWhereInput, orderBy: FieldTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldTypeConnection!
  statesConnection(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateConnection!
  fieldTemplatesConnection(where: FieldTemplateWhereInput, orderBy: FieldTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldTemplateConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Service implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  apiKeys(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApiKey!]
  gamePlays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay!]
}

"""A connection to a list of items."""
type ServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: ID
  name: String!
  description: String
  apiKeys: ApiKeyCreateManyWithoutServiceInput
  gamePlays: GamePlayCreateManyWithoutServiceInput
}

input ServiceCreateOneWithoutApiKeysInput {
  create: ServiceCreateWithoutApiKeysInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutGamePlaysInput {
  create: ServiceCreateWithoutGamePlaysInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateWithoutApiKeysInput {
  id: ID
  name: String!
  description: String
  gamePlays: GamePlayCreateManyWithoutServiceInput
}

input ServiceCreateWithoutGamePlaysInput {
  id: ID
  name: String!
  description: String
  apiKeys: ApiKeyCreateManyWithoutServiceInput
}

"""An edge in a connection."""
type ServiceEdge {
  """The item at the end of the edge."""
  node: Service!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type ServicePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
}

input ServiceUpdateInput {
  name: String
  description: String
  apiKeys: ApiKeyUpdateManyWithoutServiceInput
  gamePlays: GamePlayUpdateManyWithoutServiceInput
}

input ServiceUpdateManyMutationInput {
  name: String
  description: String
}

input ServiceUpdateOneRequiredWithoutApiKeysInput {
  create: ServiceCreateWithoutApiKeysInput
  connect: ServiceWhereUniqueInput
  update: ServiceUpdateWithoutApiKeysDataInput
  upsert: ServiceUpsertWithoutApiKeysInput
}

input ServiceUpdateOneWithoutGamePlaysInput {
  create: ServiceCreateWithoutGamePlaysInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ServiceUpdateWithoutGamePlaysDataInput
  upsert: ServiceUpsertWithoutGamePlaysInput
}

input ServiceUpdateWithoutApiKeysDataInput {
  name: String
  description: String
  gamePlays: GamePlayUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutGamePlaysDataInput {
  name: String
  description: String
  apiKeys: ApiKeyUpdateManyWithoutServiceInput
}

input ServiceUpsertWithoutApiKeysInput {
  update: ServiceUpdateWithoutApiKeysDataInput!
  create: ServiceCreateWithoutApiKeysInput!
}

input ServiceUpsertWithoutGamePlaysInput {
  update: ServiceUpdateWithoutGamePlaysDataInput!
  create: ServiceCreateWithoutGamePlaysInput!
}

input ServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  apiKeys_every: ApiKeyWhereInput
  apiKeys_some: ApiKeyWhereInput
  apiKeys_none: ApiKeyWhereInput
  gamePlays_every: GamePlayWhereInput
  gamePlays_some: GamePlayWhereInput
  gamePlays_none: GamePlayWhereInput
}

input ServiceWhereUniqueInput {
  id: ID
  name: String
}

type Session implements Node {
  id: ID!
  createdAt: DateTime!
  closedAt: DateTime
  gamePlay: GamePlay!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  closedAt: DateTime
  gamePlay: GamePlayCreateOneWithoutSessionsInput!
}

input SessionCreateManyWithoutGamePlayInput {
  create: [SessionCreateWithoutGamePlayInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateWithoutGamePlayInput {
  id: ID
  closedAt: DateTime
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  closedAt_ASC
  closedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  closedAt: DateTime
}

input SessionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  closedAt: DateTime

  """All values that are not equal to given value."""
  closedAt_not: DateTime

  """All values that are contained in given list."""
  closedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  closedAt_not_in: [DateTime!]

  """All values less than the given value."""
  closedAt_lt: DateTime

  """All values less than or equal the given value."""
  closedAt_lte: DateTime

  """All values greater than the given value."""
  closedAt_gt: DateTime

  """All values greater than or equal the given value."""
  closedAt_gte: DateTime
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  closedAt: DateTime
  gamePlay: GamePlayUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateManyDataInput {
  closedAt: DateTime
}

input SessionUpdateManyMutationInput {
  closedAt: DateTime
}

input SessionUpdateManyWithoutGamePlayInput {
  create: [SessionCreateWithoutGamePlayInput!]
  connect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutGamePlayInput!]
  updateMany: [SessionUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionScalarWhereInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutGamePlayInput!]
}

input SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput!
  data: SessionUpdateManyDataInput!
}

input SessionUpdateWithoutGamePlayDataInput {
  closedAt: DateTime
}

input SessionUpdateWithWhereUniqueWithoutGamePlayInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutGamePlayDataInput!
}

input SessionUpsertWithWhereUniqueWithoutGamePlayInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutGamePlayDataInput!
  create: SessionCreateWithoutGamePlayInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  closedAt: DateTime

  """All values that are not equal to given value."""
  closedAt_not: DateTime

  """All values that are contained in given list."""
  closedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  closedAt_not_in: [DateTime!]

  """All values less than the given value."""
  closedAt_lt: DateTime

  """All values less than or equal the given value."""
  closedAt_lte: DateTime

  """All values greater than the given value."""
  closedAt_gt: DateTime

  """All values greater than or equal the given value."""
  closedAt_gte: DateTime
  gamePlay: GamePlayWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

type State implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: StateTemplate
  name: String
  description: String
  availableInformationSlots(where: InformationSlotWhereInput, orderBy: InformationSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlot!]
  openPortals(where: PortalWhereInput, orderBy: PortalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Portal!]
  outgoingTransitions(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition!]
  incomingTransitions(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition!]
  unlockedBy(where: StateTransitionWhereInput, orderBy: StateTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransition!]
  involvedStateRequirements(where: EntityRequirementWhereInput, orderBy: EntityRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityRequirement!]
  entity: Entity!
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]!
  aggregate: AggregateState!
}

input StateCreateInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  openPortals: PortalCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateManyWithoutAvailableInformationSlotsInput {
  create: [StateCreateWithoutAvailableInformationSlotsInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateManyWithoutEntityInput {
  create: [StateCreateWithoutEntityInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateManyWithoutOpenPortalsInput {
  create: [StateCreateWithoutOpenPortalsInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateManyWithoutUnlockedByInput {
  create: [StateCreateWithoutUnlockedByInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateOneInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

input StateCreateOneWithoutIncomingTransitionsInput {
  create: StateCreateWithoutIncomingTransitionsInput
  connect: StateWhereUniqueInput
}

input StateCreateOneWithoutInvolvedStateRequirementsInput {
  create: StateCreateWithoutInvolvedStateRequirementsInput
  connect: StateWhereUniqueInput
}

input StateCreateOneWithoutOutgoingTransitionsInput {
  create: StateCreateWithoutOutgoingTransitionsInput
  connect: StateWhereUniqueInput
}

input StateCreateWithoutAvailableInformationSlotsInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  openPortals: PortalCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  openPortals: PortalCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
}

input StateCreateWithoutIncomingTransitionsInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  openPortals: PortalCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutInvolvedStateRequirementsInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  openPortals: PortalCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutOpenPortalsInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutOutgoingTransitionsInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  openPortals: PortalCreateManyWithoutStatesInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  unlockedBy: StateTransitionCreateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
  entity: EntityCreateOneWithoutStatesInput!
}

input StateCreateWithoutUnlockedByInput {
  id: ID
  name: String
  description: String
  template: StateTemplateCreateOneInput
  availableInformationSlots: InformationSlotCreateManyWithoutStatesInput
  openPortals: PortalCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionCreateManyWithoutFromInput
  incomingTransitions: StateTransitionCreateManyWithoutToInput
  involvedStateRequirements: EntityRequirementCreateManyWithoutEntityStateInput
  entity: EntityCreateOneWithoutStatesInput!
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge."""
  node: State!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type StatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input StateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type StateSubscriptionPayload {
  mutation: MutationType!
  node: State
  updatedFields: [String!]
  previousValues: StatePreviousValues
}

input StateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateWhereInput
}

type StateTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  availableInformationSlots(where: InformationSlotTemplateWhereInput, orderBy: InformationSlotTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InformationSlotTemplate!]
  openPortals(where: PortalTemplateWhereInput, orderBy: PortalTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PortalTemplate!]
  outgoingTransitions(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransitionTemplate!]
  incomingTransitions(where: StateTransitionTemplateWhereInput, orderBy: StateTransitionTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StateTransitionTemplate!]
  entity: EntityTemplate!
}

"""A connection to a list of items."""
type StateTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateTemplateEdge]!
  aggregate: AggregateStateTemplate!
}

input StateTemplateCreateInput {
  id: ID
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  openPortals: PortalTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateManyWithoutAvailableInformationSlotsInput {
  create: [StateTemplateCreateWithoutAvailableInformationSlotsInput!]
  connect: [StateTemplateWhereUniqueInput!]
}

input StateTemplateCreateManyWithoutEntityInput {
  create: [StateTemplateCreateWithoutEntityInput!]
  connect: [StateTemplateWhereUniqueInput!]
}

input StateTemplateCreateManyWithoutOpenPortalsInput {
  create: [StateTemplateCreateWithoutOpenPortalsInput!]
  connect: [StateTemplateWhereUniqueInput!]
}

input StateTemplateCreateOneInput {
  create: StateTemplateCreateInput
  connect: StateTemplateWhereUniqueInput
}

input StateTemplateCreateOneWithoutIncomingTransitionsInput {
  create: StateTemplateCreateWithoutIncomingTransitionsInput
  connect: StateTemplateWhereUniqueInput
}

input StateTemplateCreateOneWithoutOutgoingTransitionsInput {
  create: StateTemplateCreateWithoutOutgoingTransitionsInput
  connect: StateTemplateWhereUniqueInput
}

input StateTemplateCreateWithoutAvailableInformationSlotsInput {
  id: ID
  name: String
  description: String
  openPortals: PortalTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateWithoutEntityInput {
  id: ID
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  openPortals: PortalTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
}

input StateTemplateCreateWithoutIncomingTransitionsInput {
  id: ID
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  openPortals: PortalTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateWithoutOpenPortalsInput {
  id: ID
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateCreateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

input StateTemplateCreateWithoutOutgoingTransitionsInput {
  id: ID
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateCreateManyWithoutStatesInput
  openPortals: PortalTemplateCreateManyWithoutStatesInput
  incomingTransitions: StateTransitionTemplateCreateManyWithoutToInput
  entity: EntityTemplateCreateOneWithoutStatesInput!
}

"""An edge in a connection."""
type StateTemplateEdge {
  """The item at the end of the edge."""
  node: StateTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type StateTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
}

input StateTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type StateTemplateSubscriptionPayload {
  mutation: MutationType!
  node: StateTemplate
  updatedFields: [String!]
  previousValues: StateTemplatePreviousValues
}

input StateTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateTemplateWhereInput
}

input StateTemplateUpdateDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  openPortals: PortalTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  openPortals: PortalTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateManyDataInput {
  name: String
  description: String
}

input StateTemplateUpdateManyMutationInput {
  name: String
  description: String
}

input StateTemplateUpdateManyWithoutAvailableInformationSlotsInput {
  create: [StateTemplateCreateWithoutAvailableInformationSlotsInput!]
  connect: [StateTemplateWhereUniqueInput!]
  set: [StateTemplateWhereUniqueInput!]
  disconnect: [StateTemplateWhereUniqueInput!]
  delete: [StateTemplateWhereUniqueInput!]
  update: [StateTemplateUpdateWithWhereUniqueWithoutAvailableInformationSlotsInput!]
  updateMany: [StateTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateTemplateScalarWhereInput!]
  upsert: [StateTemplateUpsertWithWhereUniqueWithoutAvailableInformationSlotsInput!]
}

input StateTemplateUpdateManyWithoutEntityInput {
  create: [StateTemplateCreateWithoutEntityInput!]
  connect: [StateTemplateWhereUniqueInput!]
  set: [StateTemplateWhereUniqueInput!]
  disconnect: [StateTemplateWhereUniqueInput!]
  delete: [StateTemplateWhereUniqueInput!]
  update: [StateTemplateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [StateTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateTemplateScalarWhereInput!]
  upsert: [StateTemplateUpsertWithWhereUniqueWithoutEntityInput!]
}

input StateTemplateUpdateManyWithoutOpenPortalsInput {
  create: [StateTemplateCreateWithoutOpenPortalsInput!]
  connect: [StateTemplateWhereUniqueInput!]
  set: [StateTemplateWhereUniqueInput!]
  disconnect: [StateTemplateWhereUniqueInput!]
  delete: [StateTemplateWhereUniqueInput!]
  update: [StateTemplateUpdateWithWhereUniqueWithoutOpenPortalsInput!]
  updateMany: [StateTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateTemplateScalarWhereInput!]
  upsert: [StateTemplateUpsertWithWhereUniqueWithoutOpenPortalsInput!]
}

input StateTemplateUpdateManyWithWhereNestedInput {
  where: StateTemplateScalarWhereInput!
  data: StateTemplateUpdateManyDataInput!
}

input StateTemplateUpdateOneInput {
  create: StateTemplateCreateInput
  connect: StateTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateTemplateUpdateDataInput
  upsert: StateTemplateUpsertNestedInput
}

input StateTemplateUpdateOneRequiredInput {
  create: StateTemplateCreateInput
  connect: StateTemplateWhereUniqueInput
  update: StateTemplateUpdateDataInput
  upsert: StateTemplateUpsertNestedInput
}

input StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput {
  create: StateTemplateCreateWithoutOutgoingTransitionsInput
  connect: StateTemplateWhereUniqueInput
  update: StateTemplateUpdateWithoutOutgoingTransitionsDataInput
  upsert: StateTemplateUpsertWithoutOutgoingTransitionsInput
}

input StateTemplateUpdateOneWithoutIncomingTransitionsInput {
  create: StateTemplateCreateWithoutIncomingTransitionsInput
  connect: StateTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateTemplateUpdateWithoutIncomingTransitionsDataInput
  upsert: StateTemplateUpsertWithoutIncomingTransitionsInput
}

input StateTemplateUpdateWithoutAvailableInformationSlotsDataInput {
  name: String
  description: String
  openPortals: PortalTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithoutEntityDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  openPortals: PortalTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
}

input StateTemplateUpdateWithoutIncomingTransitionsDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  openPortals: PortalTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithoutOpenPortalsDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionTemplateUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithoutOutgoingTransitionsDataInput {
  name: String
  description: String
  availableInformationSlots: InformationSlotTemplateUpdateManyWithoutStatesInput
  openPortals: PortalTemplateUpdateManyWithoutStatesInput
  incomingTransitions: StateTransitionTemplateUpdateManyWithoutToInput
  entity: EntityTemplateUpdateOneRequiredWithoutStatesInput
}

input StateTemplateUpdateWithWhereUniqueWithoutAvailableInformationSlotsInput {
  where: StateTemplateWhereUniqueInput!
  data: StateTemplateUpdateWithoutAvailableInformationSlotsDataInput!
}

input StateTemplateUpdateWithWhereUniqueWithoutEntityInput {
  where: StateTemplateWhereUniqueInput!
  data: StateTemplateUpdateWithoutEntityDataInput!
}

input StateTemplateUpdateWithWhereUniqueWithoutOpenPortalsInput {
  where: StateTemplateWhereUniqueInput!
  data: StateTemplateUpdateWithoutOpenPortalsDataInput!
}

input StateTemplateUpsertNestedInput {
  update: StateTemplateUpdateDataInput!
  create: StateTemplateCreateInput!
}

input StateTemplateUpsertWithoutIncomingTransitionsInput {
  update: StateTemplateUpdateWithoutIncomingTransitionsDataInput!
  create: StateTemplateCreateWithoutIncomingTransitionsInput!
}

input StateTemplateUpsertWithoutOutgoingTransitionsInput {
  update: StateTemplateUpdateWithoutOutgoingTransitionsDataInput!
  create: StateTemplateCreateWithoutOutgoingTransitionsInput!
}

input StateTemplateUpsertWithWhereUniqueWithoutAvailableInformationSlotsInput {
  where: StateTemplateWhereUniqueInput!
  update: StateTemplateUpdateWithoutAvailableInformationSlotsDataInput!
  create: StateTemplateCreateWithoutAvailableInformationSlotsInput!
}

input StateTemplateUpsertWithWhereUniqueWithoutEntityInput {
  where: StateTemplateWhereUniqueInput!
  update: StateTemplateUpdateWithoutEntityDataInput!
  create: StateTemplateCreateWithoutEntityInput!
}

input StateTemplateUpsertWithWhereUniqueWithoutOpenPortalsInput {
  where: StateTemplateWhereUniqueInput!
  update: StateTemplateUpdateWithoutOpenPortalsDataInput!
  create: StateTemplateCreateWithoutOpenPortalsInput!
}

input StateTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  availableInformationSlots_every: InformationSlotTemplateWhereInput
  availableInformationSlots_some: InformationSlotTemplateWhereInput
  availableInformationSlots_none: InformationSlotTemplateWhereInput
  openPortals_every: PortalTemplateWhereInput
  openPortals_some: PortalTemplateWhereInput
  openPortals_none: PortalTemplateWhereInput
  outgoingTransitions_every: StateTransitionTemplateWhereInput
  outgoingTransitions_some: StateTransitionTemplateWhereInput
  outgoingTransitions_none: StateTransitionTemplateWhereInput
  incomingTransitions_every: StateTransitionTemplateWhereInput
  incomingTransitions_some: StateTransitionTemplateWhereInput
  incomingTransitions_none: StateTransitionTemplateWhereInput
  entity: EntityTemplateWhereInput
}

input StateTemplateWhereUniqueInput {
  id: ID
}

type StateTransition implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  template: StateTransitionTemplate
  from: State!
  to: State
  unlocks(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
  requiredActions(where: ActionRequirementWhereInput, orderBy: ActionRequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirement!]
}

"""A connection to a list of items."""
type StateTransitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateTransitionEdge]!
  aggregate: AggregateStateTransition!
}

input StateTransitionCreateInput {
  id: ID
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  to: StateCreateOneWithoutIncomingTransitionsInput
  unlocks: StateCreateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

input StateTransitionCreateManyWithoutFromInput {
  create: [StateTransitionCreateWithoutFromInput!]
  connect: [StateTransitionWhereUniqueInput!]
}

input StateTransitionCreateManyWithoutToInput {
  create: [StateTransitionCreateWithoutToInput!]
  connect: [StateTransitionWhereUniqueInput!]
}

input StateTransitionCreateManyWithoutUnlocksInput {
  create: [StateTransitionCreateWithoutUnlocksInput!]
  connect: [StateTransitionWhereUniqueInput!]
}

input StateTransitionCreateOneWithoutRequiredActionsInput {
  create: StateTransitionCreateWithoutRequiredActionsInput
  connect: StateTransitionWhereUniqueInput
}

input StateTransitionCreateWithoutFromInput {
  id: ID
  template: StateTransitionTemplateCreateOneInput
  to: StateCreateOneWithoutIncomingTransitionsInput
  unlocks: StateCreateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

input StateTransitionCreateWithoutRequiredActionsInput {
  id: ID
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  to: StateCreateOneWithoutIncomingTransitionsInput
  unlocks: StateCreateManyWithoutUnlockedByInput
}

input StateTransitionCreateWithoutToInput {
  id: ID
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  unlocks: StateCreateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

input StateTransitionCreateWithoutUnlocksInput {
  id: ID
  template: StateTransitionTemplateCreateOneInput
  from: StateCreateOneWithoutOutgoingTransitionsInput!
  to: StateCreateOneWithoutIncomingTransitionsInput
  requiredActions: ActionRequirementCreateManyWithoutStateTransitionInput
}

"""An edge in a connection."""
type StateTransitionEdge {
  """The item at the end of the edge."""
  node: StateTransition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateTransitionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StateTransitionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StateTransitionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type StateTransitionSubscriptionPayload {
  mutation: MutationType!
  node: StateTransition
  updatedFields: [String!]
  previousValues: StateTransitionPreviousValues
}

input StateTransitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateTransitionWhereInput
}

type StateTransitionTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  requiredActions(where: ActionRequirementTemplateWhereInput, orderBy: ActionRequirementTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionRequirementTemplate!]
  from: StateTemplate!
  to: StateTemplate
}

"""A connection to a list of items."""
type StateTransitionTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateTransitionTemplateEdge]!
  aggregate: AggregateStateTransitionTemplate!
}

input StateTransitionTemplateCreateInput {
  id: ID
  requiredActions: ActionRequirementTemplateCreateManyWithoutStateTransitionInput
  from: StateTemplateCreateOneWithoutOutgoingTransitionsInput!
  to: StateTemplateCreateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateCreateManyWithoutFromInput {
  create: [StateTransitionTemplateCreateWithoutFromInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
}

input StateTransitionTemplateCreateManyWithoutToInput {
  create: [StateTransitionTemplateCreateWithoutToInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
}

input StateTransitionTemplateCreateOneInput {
  create: StateTransitionTemplateCreateInput
  connect: StateTransitionTemplateWhereUniqueInput
}

input StateTransitionTemplateCreateOneWithoutRequiredActionsInput {
  create: StateTransitionTemplateCreateWithoutRequiredActionsInput
  connect: StateTransitionTemplateWhereUniqueInput
}

input StateTransitionTemplateCreateWithoutFromInput {
  id: ID
  requiredActions: ActionRequirementTemplateCreateManyWithoutStateTransitionInput
  to: StateTemplateCreateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateCreateWithoutRequiredActionsInput {
  id: ID
  from: StateTemplateCreateOneWithoutOutgoingTransitionsInput!
  to: StateTemplateCreateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateCreateWithoutToInput {
  id: ID
  requiredActions: ActionRequirementTemplateCreateManyWithoutStateTransitionInput
  from: StateTemplateCreateOneWithoutOutgoingTransitionsInput!
}

"""An edge in a connection."""
type StateTransitionTemplateEdge {
  """The item at the end of the edge."""
  node: StateTransitionTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateTransitionTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StateTransitionTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StateTransitionTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type StateTransitionTemplateSubscriptionPayload {
  mutation: MutationType!
  node: StateTransitionTemplate
  updatedFields: [String!]
  previousValues: StateTransitionTemplatePreviousValues
}

input StateTransitionTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionTemplateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateTransitionTemplateWhereInput
}

input StateTransitionTemplateUpdateDataInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateManyWithoutFromInput {
  create: [StateTransitionTemplateCreateWithoutFromInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
  set: [StateTransitionTemplateWhereUniqueInput!]
  disconnect: [StateTransitionTemplateWhereUniqueInput!]
  delete: [StateTransitionTemplateWhereUniqueInput!]
  update: [StateTransitionTemplateUpdateWithWhereUniqueWithoutFromInput!]
  deleteMany: [StateTransitionTemplateScalarWhereInput!]
  upsert: [StateTransitionTemplateUpsertWithWhereUniqueWithoutFromInput!]
}

input StateTransitionTemplateUpdateManyWithoutToInput {
  create: [StateTransitionTemplateCreateWithoutToInput!]
  connect: [StateTransitionTemplateWhereUniqueInput!]
  set: [StateTransitionTemplateWhereUniqueInput!]
  disconnect: [StateTransitionTemplateWhereUniqueInput!]
  delete: [StateTransitionTemplateWhereUniqueInput!]
  update: [StateTransitionTemplateUpdateWithWhereUniqueWithoutToInput!]
  deleteMany: [StateTransitionTemplateScalarWhereInput!]
  upsert: [StateTransitionTemplateUpsertWithWhereUniqueWithoutToInput!]
}

input StateTransitionTemplateUpdateOneInput {
  create: StateTransitionTemplateCreateInput
  connect: StateTransitionTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateTransitionTemplateUpdateDataInput
  upsert: StateTransitionTemplateUpsertNestedInput
}

input StateTransitionTemplateUpdateOneRequiredWithoutRequiredActionsInput {
  create: StateTransitionTemplateCreateWithoutRequiredActionsInput
  connect: StateTransitionTemplateWhereUniqueInput
  update: StateTransitionTemplateUpdateWithoutRequiredActionsDataInput
  upsert: StateTransitionTemplateUpsertWithoutRequiredActionsInput
}

input StateTransitionTemplateUpdateWithoutFromDataInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateWithoutRequiredActionsDataInput {
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateTemplateUpdateOneWithoutIncomingTransitionsInput
}

input StateTransitionTemplateUpdateWithoutToDataInput {
  requiredActions: ActionRequirementTemplateUpdateManyWithoutStateTransitionInput
  from: StateTemplateUpdateOneRequiredWithoutOutgoingTransitionsInput
}

input StateTransitionTemplateUpdateWithWhereUniqueWithoutFromInput {
  where: StateTransitionTemplateWhereUniqueInput!
  data: StateTransitionTemplateUpdateWithoutFromDataInput!
}

input StateTransitionTemplateUpdateWithWhereUniqueWithoutToInput {
  where: StateTransitionTemplateWhereUniqueInput!
  data: StateTransitionTemplateUpdateWithoutToDataInput!
}

input StateTransitionTemplateUpsertNestedInput {
  update: StateTransitionTemplateUpdateDataInput!
  create: StateTransitionTemplateCreateInput!
}

input StateTransitionTemplateUpsertWithoutRequiredActionsInput {
  update: StateTransitionTemplateUpdateWithoutRequiredActionsDataInput!
  create: StateTransitionTemplateCreateWithoutRequiredActionsInput!
}

input StateTransitionTemplateUpsertWithWhereUniqueWithoutFromInput {
  where: StateTransitionTemplateWhereUniqueInput!
  update: StateTransitionTemplateUpdateWithoutFromDataInput!
  create: StateTransitionTemplateCreateWithoutFromInput!
}

input StateTransitionTemplateUpsertWithWhereUniqueWithoutToInput {
  where: StateTransitionTemplateWhereUniqueInput!
  update: StateTransitionTemplateUpdateWithoutToDataInput!
  create: StateTransitionTemplateCreateWithoutToInput!
}

input StateTransitionTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requiredActions_every: ActionRequirementTemplateWhereInput
  requiredActions_some: ActionRequirementTemplateWhereInput
  requiredActions_none: ActionRequirementTemplateWhereInput
  from: StateTemplateWhereInput
  to: StateTemplateWhereInput
}

input StateTransitionTemplateWhereUniqueInput {
  id: ID
}

input StateTransitionUpdateInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateManyWithoutFromInput {
  create: [StateTransitionCreateWithoutFromInput!]
  connect: [StateTransitionWhereUniqueInput!]
  set: [StateTransitionWhereUniqueInput!]
  disconnect: [StateTransitionWhereUniqueInput!]
  delete: [StateTransitionWhereUniqueInput!]
  update: [StateTransitionUpdateWithWhereUniqueWithoutFromInput!]
  deleteMany: [StateTransitionScalarWhereInput!]
  upsert: [StateTransitionUpsertWithWhereUniqueWithoutFromInput!]
}

input StateTransitionUpdateManyWithoutToInput {
  create: [StateTransitionCreateWithoutToInput!]
  connect: [StateTransitionWhereUniqueInput!]
  set: [StateTransitionWhereUniqueInput!]
  disconnect: [StateTransitionWhereUniqueInput!]
  delete: [StateTransitionWhereUniqueInput!]
  update: [StateTransitionUpdateWithWhereUniqueWithoutToInput!]
  deleteMany: [StateTransitionScalarWhereInput!]
  upsert: [StateTransitionUpsertWithWhereUniqueWithoutToInput!]
}

input StateTransitionUpdateManyWithoutUnlocksInput {
  create: [StateTransitionCreateWithoutUnlocksInput!]
  connect: [StateTransitionWhereUniqueInput!]
  set: [StateTransitionWhereUniqueInput!]
  disconnect: [StateTransitionWhereUniqueInput!]
  delete: [StateTransitionWhereUniqueInput!]
  update: [StateTransitionUpdateWithWhereUniqueWithoutUnlocksInput!]
  deleteMany: [StateTransitionScalarWhereInput!]
  upsert: [StateTransitionUpsertWithWhereUniqueWithoutUnlocksInput!]
}

input StateTransitionUpdateOneRequiredWithoutRequiredActionsInput {
  create: StateTransitionCreateWithoutRequiredActionsInput
  connect: StateTransitionWhereUniqueInput
  update: StateTransitionUpdateWithoutRequiredActionsDataInput
  upsert: StateTransitionUpsertWithoutRequiredActionsInput
}

input StateTransitionUpdateWithoutFromDataInput {
  template: StateTransitionTemplateUpdateOneInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateWithoutRequiredActionsDataInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
}

input StateTransitionUpdateWithoutToDataInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  unlocks: StateUpdateManyWithoutUnlockedByInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateWithoutUnlocksDataInput {
  template: StateTransitionTemplateUpdateOneInput
  from: StateUpdateOneRequiredWithoutOutgoingTransitionsInput
  to: StateUpdateOneWithoutIncomingTransitionsInput
  requiredActions: ActionRequirementUpdateManyWithoutStateTransitionInput
}

input StateTransitionUpdateWithWhereUniqueWithoutFromInput {
  where: StateTransitionWhereUniqueInput!
  data: StateTransitionUpdateWithoutFromDataInput!
}

input StateTransitionUpdateWithWhereUniqueWithoutToInput {
  where: StateTransitionWhereUniqueInput!
  data: StateTransitionUpdateWithoutToDataInput!
}

input StateTransitionUpdateWithWhereUniqueWithoutUnlocksInput {
  where: StateTransitionWhereUniqueInput!
  data: StateTransitionUpdateWithoutUnlocksDataInput!
}

input StateTransitionUpsertWithoutRequiredActionsInput {
  update: StateTransitionUpdateWithoutRequiredActionsDataInput!
  create: StateTransitionCreateWithoutRequiredActionsInput!
}

input StateTransitionUpsertWithWhereUniqueWithoutFromInput {
  where: StateTransitionWhereUniqueInput!
  update: StateTransitionUpdateWithoutFromDataInput!
  create: StateTransitionCreateWithoutFromInput!
}

input StateTransitionUpsertWithWhereUniqueWithoutToInput {
  where: StateTransitionWhereUniqueInput!
  update: StateTransitionUpdateWithoutToDataInput!
  create: StateTransitionCreateWithoutToInput!
}

input StateTransitionUpsertWithWhereUniqueWithoutUnlocksInput {
  where: StateTransitionWhereUniqueInput!
  update: StateTransitionUpdateWithoutUnlocksDataInput!
  create: StateTransitionCreateWithoutUnlocksInput!
}

input StateTransitionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateTransitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateTransitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateTransitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  template: StateTransitionTemplateWhereInput
  from: StateWhereInput
  to: StateWhereInput
  unlocks_every: StateWhereInput
  unlocks_some: StateWhereInput
  unlocks_none: StateWhereInput
  requiredActions_every: ActionRequirementWhereInput
  requiredActions_some: ActionRequirementWhereInput
  requiredActions_none: ActionRequirementWhereInput
}

input StateTransitionWhereUniqueInput {
  id: ID
}

input StateUpdateDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateManyDataInput {
  name: String
  description: String
}

input StateUpdateManyMutationInput {
  name: String
  description: String
}

input StateUpdateManyWithoutAvailableInformationSlotsInput {
  create: [StateCreateWithoutAvailableInformationSlotsInput!]
  connect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutAvailableInformationSlotsInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutAvailableInformationSlotsInput!]
}

input StateUpdateManyWithoutEntityInput {
  create: [StateCreateWithoutEntityInput!]
  connect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutEntityInput!]
}

input StateUpdateManyWithoutOpenPortalsInput {
  create: [StateCreateWithoutOpenPortalsInput!]
  connect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutOpenPortalsInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutOpenPortalsInput!]
}

input StateUpdateManyWithoutUnlockedByInput {
  create: [StateCreateWithoutUnlockedByInput!]
  connect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutUnlockedByInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutUnlockedByInput!]
}

input StateUpdateManyWithWhereNestedInput {
  where: StateScalarWhereInput!
  data: StateUpdateManyDataInput!
}

input StateUpdateOneInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateUpdateDataInput
  upsert: StateUpsertNestedInput
}

input StateUpdateOneRequiredWithoutInvolvedStateRequirementsInput {
  create: StateCreateWithoutInvolvedStateRequirementsInput
  connect: StateWhereUniqueInput
  update: StateUpdateWithoutInvolvedStateRequirementsDataInput
  upsert: StateUpsertWithoutInvolvedStateRequirementsInput
}

input StateUpdateOneRequiredWithoutOutgoingTransitionsInput {
  create: StateCreateWithoutOutgoingTransitionsInput
  connect: StateWhereUniqueInput
  update: StateUpdateWithoutOutgoingTransitionsDataInput
  upsert: StateUpsertWithoutOutgoingTransitionsInput
}

input StateUpdateOneWithoutIncomingTransitionsInput {
  create: StateCreateWithoutIncomingTransitionsInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StateUpdateWithoutIncomingTransitionsDataInput
  upsert: StateUpsertWithoutIncomingTransitionsInput
}

input StateUpdateWithoutAvailableInformationSlotsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutEntityDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
}

input StateUpdateWithoutIncomingTransitionsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutInvolvedStateRequirementsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutOpenPortalsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutOutgoingTransitionsDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  unlockedBy: StateTransitionUpdateManyWithoutUnlocksInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithoutUnlockedByDataInput {
  name: String
  description: String
  template: StateTemplateUpdateOneInput
  availableInformationSlots: InformationSlotUpdateManyWithoutStatesInput
  openPortals: PortalUpdateManyWithoutStatesInput
  outgoingTransitions: StateTransitionUpdateManyWithoutFromInput
  incomingTransitions: StateTransitionUpdateManyWithoutToInput
  involvedStateRequirements: EntityRequirementUpdateManyWithoutEntityStateInput
  entity: EntityUpdateOneRequiredWithoutStatesInput
}

input StateUpdateWithWhereUniqueWithoutAvailableInformationSlotsInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutAvailableInformationSlotsDataInput!
}

input StateUpdateWithWhereUniqueWithoutEntityInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutEntityDataInput!
}

input StateUpdateWithWhereUniqueWithoutOpenPortalsInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutOpenPortalsDataInput!
}

input StateUpdateWithWhereUniqueWithoutUnlockedByInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutUnlockedByDataInput!
}

input StateUpsertNestedInput {
  update: StateUpdateDataInput!
  create: StateCreateInput!
}

input StateUpsertWithoutIncomingTransitionsInput {
  update: StateUpdateWithoutIncomingTransitionsDataInput!
  create: StateCreateWithoutIncomingTransitionsInput!
}

input StateUpsertWithoutInvolvedStateRequirementsInput {
  update: StateUpdateWithoutInvolvedStateRequirementsDataInput!
  create: StateCreateWithoutInvolvedStateRequirementsInput!
}

input StateUpsertWithoutOutgoingTransitionsInput {
  update: StateUpdateWithoutOutgoingTransitionsDataInput!
  create: StateCreateWithoutOutgoingTransitionsInput!
}

input StateUpsertWithWhereUniqueWithoutAvailableInformationSlotsInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutAvailableInformationSlotsDataInput!
  create: StateCreateWithoutAvailableInformationSlotsInput!
}

input StateUpsertWithWhereUniqueWithoutEntityInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutEntityDataInput!
  create: StateCreateWithoutEntityInput!
}

input StateUpsertWithWhereUniqueWithoutOpenPortalsInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutOpenPortalsDataInput!
  create: StateCreateWithoutOpenPortalsInput!
}

input StateUpsertWithWhereUniqueWithoutUnlockedByInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutUnlockedByDataInput!
  create: StateCreateWithoutUnlockedByInput!
}

input StateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  template: StateTemplateWhereInput
  availableInformationSlots_every: InformationSlotWhereInput
  availableInformationSlots_some: InformationSlotWhereInput
  availableInformationSlots_none: InformationSlotWhereInput
  openPortals_every: PortalWhereInput
  openPortals_some: PortalWhereInput
  openPortals_none: PortalWhereInput
  outgoingTransitions_every: StateTransitionWhereInput
  outgoingTransitions_some: StateTransitionWhereInput
  outgoingTransitions_none: StateTransitionWhereInput
  incomingTransitions_every: StateTransitionWhereInput
  incomingTransitions_some: StateTransitionWhereInput
  incomingTransitions_none: StateTransitionWhereInput
  unlockedBy_every: StateTransitionWhereInput
  unlockedBy_some: StateTransitionWhereInput
  unlockedBy_none: StateTransitionWhereInput
  involvedStateRequirements_every: EntityRequirementWhereInput
  involvedStateRequirements_some: EntityRequirementWhereInput
  involvedStateRequirements_none: EntityRequirementWhereInput
  entity: EntityWhereInput
}

input StateWhereUniqueInput {
  id: ID
}

type Subscription {
  informationSlot(where: InformationSlotSubscriptionWhereInput): InformationSlotSubscriptionPayload
  stateTransition(where: StateTransitionSubscriptionWhereInput): StateTransitionSubscriptionPayload
  entrance(where: EntranceSubscriptionWhereInput): EntranceSubscriptionPayload
  portal(where: PortalSubscriptionWhereInput): PortalSubscriptionPayload
  actionRequirement(where: ActionRequirementSubscriptionWhereInput): ActionRequirementSubscriptionPayload
  hint(where: HintSubscriptionWhereInput): HintSubscriptionPayload
  payloadRequirement(where: PayloadRequirementSubscriptionWhereInput): PayloadRequirementSubscriptionPayload
  entityRequirement(where: EntityRequirementSubscriptionWhereInput): EntityRequirementSubscriptionPayload
  inputRequirement(where: InputRequirementSubscriptionWhereInput): InputRequirementSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  entityTemplateSet(where: EntityTemplateSetSubscriptionWhereInput): EntityTemplateSetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  gamePlay(where: GamePlaySubscriptionWhereInput): GamePlaySubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  action(where: ActionSubscriptionWhereInput): ActionSubscriptionPayload
  actionPayload(where: ActionPayloadSubscriptionWhereInput): ActionPayloadSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  apiKey(where: ApiKeySubscriptionWhereInput): ApiKeySubscriptionPayload
  actionPayloadInputValue(where: ActionPayloadInputValueSubscriptionWhereInput): ActionPayloadInputValueSubscriptionPayload
  portalTemplate(where: PortalTemplateSubscriptionWhereInput): PortalTemplateSubscriptionPayload
  inputRequirementTemplate(where: InputRequirementTemplateSubscriptionWhereInput): InputRequirementTemplateSubscriptionPayload
  physicalPosition(where: PhysicalPositionSubscriptionWhereInput): PhysicalPositionSubscriptionPayload
  entityTemplate(where: EntityTemplateSubscriptionWhereInput): EntityTemplateSubscriptionPayload
  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload
  entityRequirementTemplate(where: EntityRequirementTemplateSubscriptionWhereInput): EntityRequirementTemplateSubscriptionPayload
  informationSlotTemplate(where: InformationSlotTemplateSubscriptionWhereInput): InformationSlotTemplateSubscriptionPayload
  entranceTemplate(where: EntranceTemplateSubscriptionWhereInput): EntranceTemplateSubscriptionPayload
  entity(where: EntitySubscriptionWhereInput): EntitySubscriptionPayload
  payloadRequirementTemplate(where: PayloadRequirementTemplateSubscriptionWhereInput): PayloadRequirementTemplateSubscriptionPayload
  field(where: FieldSubscriptionWhereInput): FieldSubscriptionPayload
  actionRequirementTemplate(where: ActionRequirementTemplateSubscriptionWhereInput): ActionRequirementTemplateSubscriptionPayload
  stateTransitionTemplate(where: StateTransitionTemplateSubscriptionWhereInput): StateTransitionTemplateSubscriptionPayload
  stateTemplate(where: StateTemplateSubscriptionWhereInput): StateTemplateSubscriptionPayload
  hintTemplate(where: HintTemplateSubscriptionWhereInput): HintTemplateSubscriptionPayload
  fieldType(where: FieldTypeSubscriptionWhereInput): FieldTypeSubscriptionPayload
  state(where: StateSubscriptionWhereInput): StateSubscriptionPayload
  fieldTemplate(where: FieldTemplateSubscriptionWhereInput): FieldTemplateSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean!
  password: String!
  avatar: String
  token: String!
  gamesCreated(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  plays(where: GamePlayWhereInput, orderBy: GamePlayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamePlay!]
  entityTemplateSetsCreated(where: EntityTemplateSetWhereInput, orderBy: EntityTemplateSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EntityTemplateSet!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean
  password: String!
  avatar: String
  token: String!
  gamesCreated: GameCreateManyWithoutCreatorInput
  games: GameCreateManyWithoutCooperatorsInput
  plays: GamePlayCreateManyWithoutPlayerInput
  entityTemplateSetsCreated: EntityTemplateSetCreateManyWithoutCreatorInput
}

input UserCreateManyWithoutGamesInput {
  create: [UserCreateWithoutGamesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEntityTemplateSetsCreatedInput {
  create: UserCreateWithoutEntityTemplateSetsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGamesCreatedInput {
  create: UserCreateWithoutGamesCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlaysInput {
  create: UserCreateWithoutPlaysInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEntityTemplateSetsCreatedInput {
  id: ID
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean
  password: String!
  avatar: String
  token: String!
  gamesCreated: GameCreateManyWithoutCreatorInput
  games: GameCreateManyWithoutCooperatorsInput
  plays: GamePlayCreateManyWithoutPlayerInput
}

input UserCreateWithoutGamesCreatedInput {
  id: ID
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean
  password: String!
  avatar: String
  token: String!
  games: GameCreateManyWithoutCooperatorsInput
  plays: GamePlayCreateManyWithoutPlayerInput
  entityTemplateSetsCreated: EntityTemplateSetCreateManyWithoutCreatorInput
}

input UserCreateWithoutGamesInput {
  id: ID
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean
  password: String!
  avatar: String
  token: String!
  gamesCreated: GameCreateManyWithoutCreatorInput
  plays: GamePlayCreateManyWithoutPlayerInput
  entityTemplateSetsCreated: EntityTemplateSetCreateManyWithoutCreatorInput
}

input UserCreateWithoutPlaysInput {
  id: ID
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean
  password: String!
  avatar: String
  token: String!
  gamesCreated: GameCreateManyWithoutCreatorInput
  games: GameCreateManyWithoutCooperatorsInput
  entityTemplateSetsCreated: EntityTemplateSetCreateManyWithoutCreatorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  firstName_ASC
  firstName_DESC
  middleName_ASC
  middleName_DESC
  lastName_ASC
  lastName_DESC
  slug_ASC
  slug_DESC
  email_ASC
  email_DESC
  emailConfirmed_ASC
  emailConfirmed_DESC
  password_ASC
  password_DESC
  avatar_ASC
  avatar_DESC
  token_ASC
  token_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  firstName: String!
  middleName: String
  lastName: String!
  slug: String!
  email: String!
  emailConfirmed: Boolean!
  password: String!
  avatar: String
  token: String!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  middleName: String

  """All values that are not equal to given value."""
  middleName_not: String

  """All values that are contained in given list."""
  middleName_in: [String!]

  """All values that are not contained in given list."""
  middleName_not_in: [String!]

  """All values less than the given value."""
  middleName_lt: String

  """All values less than or equal the given value."""
  middleName_lte: String

  """All values greater than the given value."""
  middleName_gt: String

  """All values greater than or equal the given value."""
  middleName_gte: String

  """All values containing the given string."""
  middleName_contains: String

  """All values not containing the given string."""
  middleName_not_contains: String

  """All values starting with the given string."""
  middleName_starts_with: String

  """All values not starting with the given string."""
  middleName_not_starts_with: String

  """All values ending with the given string."""
  middleName_ends_with: String

  """All values not ending with the given string."""
  middleName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailConfirmed: Boolean

  """All values that are not equal to given value."""
  emailConfirmed_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  games: GameUpdateManyWithoutCooperatorsInput
  plays: GamePlayUpdateManyWithoutPlayerInput
  entityTemplateSetsCreated: EntityTemplateSetUpdateManyWithoutCreatorInput
}

input UserUpdateManyDataInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
}

input UserUpdateManyMutationInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
}

input UserUpdateManyWithoutGamesInput {
  create: [UserCreateWithoutGamesInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGamesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGamesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutEntityTemplateSetsCreatedInput {
  create: UserCreateWithoutEntityTemplateSetsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEntityTemplateSetsCreatedDataInput
  upsert: UserUpsertWithoutEntityTemplateSetsCreatedInput
}

input UserUpdateOneWithoutGamesCreatedInput {
  create: UserCreateWithoutGamesCreatedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutGamesCreatedDataInput
  upsert: UserUpsertWithoutGamesCreatedInput
}

input UserUpdateOneWithoutPlaysInput {
  create: UserCreateWithoutPlaysInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPlaysDataInput
  upsert: UserUpsertWithoutPlaysInput
}

input UserUpdateWithoutEntityTemplateSetsCreatedDataInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  games: GameUpdateManyWithoutCooperatorsInput
  plays: GamePlayUpdateManyWithoutPlayerInput
}

input UserUpdateWithoutGamesCreatedDataInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
  games: GameUpdateManyWithoutCooperatorsInput
  plays: GamePlayUpdateManyWithoutPlayerInput
  entityTemplateSetsCreated: EntityTemplateSetUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutGamesDataInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  plays: GamePlayUpdateManyWithoutPlayerInput
  entityTemplateSetsCreated: EntityTemplateSetUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutPlaysDataInput {
  name: String
  firstName: String
  middleName: String
  lastName: String
  slug: String
  email: String
  emailConfirmed: Boolean
  password: String
  avatar: String
  token: String
  gamesCreated: GameUpdateManyWithoutCreatorInput
  games: GameUpdateManyWithoutCooperatorsInput
  entityTemplateSetsCreated: EntityTemplateSetUpdateManyWithoutCreatorInput
}

input UserUpdateWithWhereUniqueWithoutGamesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGamesDataInput!
}

input UserUpsertWithoutEntityTemplateSetsCreatedInput {
  update: UserUpdateWithoutEntityTemplateSetsCreatedDataInput!
  create: UserCreateWithoutEntityTemplateSetsCreatedInput!
}

input UserUpsertWithoutGamesCreatedInput {
  update: UserUpdateWithoutGamesCreatedDataInput!
  create: UserCreateWithoutGamesCreatedInput!
}

input UserUpsertWithoutPlaysInput {
  update: UserUpdateWithoutPlaysDataInput!
  create: UserCreateWithoutPlaysInput!
}

input UserUpsertWithWhereUniqueWithoutGamesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGamesDataInput!
  create: UserCreateWithoutGamesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  middleName: String

  """All values that are not equal to given value."""
  middleName_not: String

  """All values that are contained in given list."""
  middleName_in: [String!]

  """All values that are not contained in given list."""
  middleName_not_in: [String!]

  """All values less than the given value."""
  middleName_lt: String

  """All values less than or equal the given value."""
  middleName_lte: String

  """All values greater than the given value."""
  middleName_gt: String

  """All values greater than or equal the given value."""
  middleName_gte: String

  """All values containing the given string."""
  middleName_contains: String

  """All values not containing the given string."""
  middleName_not_contains: String

  """All values starting with the given string."""
  middleName_starts_with: String

  """All values not starting with the given string."""
  middleName_not_starts_with: String

  """All values ending with the given string."""
  middleName_ends_with: String

  """All values not ending with the given string."""
  middleName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailConfirmed: Boolean

  """All values that are not equal to given value."""
  emailConfirmed_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  gamesCreated_every: GameWhereInput
  gamesCreated_some: GameWhereInput
  gamesCreated_none: GameWhereInput
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  plays_every: GamePlayWhereInput
  plays_some: GamePlayWhereInput
  plays_none: GamePlayWhereInput
  entityTemplateSetsCreated_every: EntityTemplateSetWhereInput
  entityTemplateSetsCreated_some: EntityTemplateSetWhereInput
  entityTemplateSetsCreated_none: EntityTemplateSetWhereInput
}

input UserWhereUniqueInput {
  id: ID
  slug: String
  email: String
  token: String
}

enum ValueType {
  STRING
  NUMBER
  BOOLEAN
  TIMESTAMP
  GEOPOINT
}
